#!/usr/bin/env groovy

def storeArtifacts() {
    sh './systemtests/scripts/store_kubernetes_info.sh "artifacts/openshift-info/"'
    sh './systemtests/scripts/collect_logs.sh "/tmp/testlogs" "artifacts/openshift-logs"'
    sh 'rm -rf /tmp/testlogs'
}

def tearDownOpenshift() {
    echo "tear down openshift"
    sh './systemtests/scripts/teardown-openshift.sh'
}

pipeline {
    agent {
        node {
            label 'enmasse-long'
        }
    }
    options {
        timeout(time: 12, unit: 'HOURS')
    }
    environment {
        CORES_DIR = "/tmp/cores"
    }
    stages {
        stage('clean') {
            steps {
                cleanWs()
            }
        }
        stage('checkout') {
            steps {
                checkout scm
                sh 'git submodule update --init --recursive'
                sh 'rm -rf artifacts && mkdir -p artifacts'
            }
        }
        stage('start openshift') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    sh './systemtests/scripts/setup-openshift.sh "templates/install"'
                    sh 'sudo chmod -R 777 /var/lib/origin/openshift.local.config'
                }
            }
        }
        stage('download enmasse') {
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    sh 'sudo chmod 777 -R ./systemtests/scripts/'
                    sh 'OPENSHIFT_PROJECT=$BUILD_TAG ./systemtests/scripts/deploy_enmasse.sh true'
                }
            }
        }
        stage('system tests') {
            environment {
                ARTIFACTS_DIR = 'artifacts'
                JOB_NAME_SUB = "${String.format("%.15s", JOB_NAME)}"
                OPENSHIFT_PROJECT = "${JOB_NAME_SUB}${BUILD_NUMBER}"
            }
            steps {
                withCredentials([string(credentialsId: 'openshift-host', variable: 'OPENSHIFT_URL'), usernamePassword(credentialsId: 'openshift-credentials', passwordVariable: 'OPENSHIFT_PASSWD', usernameVariable: 'OPENSHIFT_USER')]) {
                    sh "sudo ./systemtests/scripts/enable_core_dumps.sh ${env.CORES_DIR}"
                    sh "./systemtests/scripts/run_test_component.sh enmasse-latest /var/lib/origin/openshift.local.config/master/admin.kubeconfig '' 'systemtests-marathon'"
                }
            }
        }
    }
    post {
        always {
            storeArtifacts() //store artifacts if build was aborted - due to timeout reached
            //store test results from build and system tests
            junit '**/TEST-*.xml'

            //archive test results and openshift logs
            archive '**/TEST-*.xml'
            archive 'templates/install/**'
            sh "sudo ./systemtests/scripts/compress_core_dumps.sh ${env.CORES_DIR} artifacts"
            archive 'artifacts/**'
            tearDownOpenshift()
            sh "./systemtests/scripts/check_and_clear_cores.sh ${env.CORES_DIR}"
        }
        failure {
            echo "build failed"
        }
    }
}

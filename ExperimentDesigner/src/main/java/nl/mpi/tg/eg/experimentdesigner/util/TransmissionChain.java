/*
 * Copyright (C) 2016 Max Planck Institute for Psycholinguistics
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package nl.mpi.tg.eg.experimentdesigner.util;

import nl.mpi.tg.eg.experimentdesigner.controller.WizardController;
import nl.mpi.tg.eg.experimentdesigner.model.Experiment;
import nl.mpi.tg.eg.experimentdesigner.model.StimuliSubAction;
import nl.mpi.tg.eg.experimentdesigner.model.WizardData;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardAboutScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardAnimatedStimuliScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardEditUserScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardExistingUserCheckScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardMenuScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardSelectUserScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardStimulusScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardTextScreen;
import nl.mpi.tg.eg.experimentdesigner.model.wizard.WizardWelcomeScreen;

/**
 * @since September 23, 2016 10:33:54 AM (creation date)
 * @author Peter Withers <peter.withers@mpi.nl>
 */
public class TransmissionChain {

    private final WizardController wizardController = new WizardController();

    public WizardData getWizardData() {
        WizardData wizardData = new WizardData();
        wizardData.setAppName("TransmissionChain");
        wizardData.setShowMenuBar(true);
        wizardData.setObfuscateScreenNames(false);

        final WizardExistingUserCheckScreen welcomeMenuPresenter = new WizardExistingUserCheckScreen("Start", "New interview", "Resume interview", "Begin a new interview with a new participant", "Resume an interview with an existing participant");
        final WizardTextScreen instructionsPresenter = new WizardTextScreen("Instructions",
                "The stimuli used by this app and the recordings created by this app are stored in MPI_STIMULI and MPI_Recorder respectively. "
                + "Depending on the version of android and the file browser that you are using these will show up as:<br/>"
                + "\"/MPI_Recorder/\"<br/>"
                + "\"/storage/emulated/0/MPI_Recorder/\"<br/>"
                + "\"/data/media/0/MPI_Recorder/\"<br/>"
                + "<br/>"
                + "When you connect the mobile device to a computer via USB, you may need to enable USB file browsing. This can often be done by draging down from the top of the screen to access the option directly or via the settings menu.<br/>"
                + "<br/>"
                + "The stimuli for Task 1 and Task 2 are to be placed in the following directories:<br/>"
                + "/MPI_STIMULI/Task_1<br/>"
                + "/MPI_STIMULI/Task_2<br/>"
                + "<br/>"
                + "In more recent versions of this app OGG audio file format can also be used. If you provide both mp3 and ogg the system will pick its prefered type.<br/>"
                + "\"2_bat.png\" \"2_bat.ogg\" \"2_bat.mp3\"<br/>"
                + "<br/>"
                + "Recorded audio will be stored on the sdcard in the MPI_Recorder directory:<br/>"
                + "/data/media/0/MPI_Recorder/155feab481d-87fb-9eb9-46c9-3e40/SDCardPictureTask/2016-07-18-175348.wav'.<br/>"
                + "From version 0.1.877 onwards the participant ID will be used as a directory name:<br/>"
                + "/data/media/0/MPI_Recorder/-participant-id-/Task_1/2016-07-18-175348.wav'.<br/>"
                + "<br/>"
                + "Importing recordings into ELAN can be done via the CSV import functionality of ELAN. "
                + "The CSV file generated by this app provides tha start time and end time of each annotation. "
                + "There are two pairs of columns for the start and end times, each with a different date time format and you can select which you prefer. "
                + "The remaining columns the suggested tier number for ELAN, the stimulus ID / code and the tag indicating the event or participant response:<br/>"
                + "<table>"
                + "<tr><td>BeginTime,</td><td>EndTime,</td><td>BeginTime2,</td><td>EndTime2,</td><td>Tier,</td><td>StimulusID,</td><td>StimulusCode,</td><td>Tag</tr></td>"
                + "<tr><td>00:00:00.000,</td><td>00:00:01.202,</td><td>0.000,</td><td>1.202,</td><td>4,</td><td>'1_rat',</td><td>'1_rat',</td><td>'incorrect image clicked'</tr></td>"
                + "<tr><td>00:00:04.570,</td><td>00:00:04.570,</td><td>4.570,</td><td>4.570,</td><td>1,</td><td>'1_rat',</td><td>'1_rat',</td><td>'task 2 animated'</tr></td>"
                + "<tr><td>00:00:04.570,</td><td>00:00:06.735,</td><td>4.570,</td><td>6.735,</td><td>4,</td><td>'2_bat',</td><td>'2_bat',</td><td>'incorrect image clicked'</tr></td>"
                + "<tr><td>00:00:08.659,</td><td>00:00:08.659,</td><td>8.659,</td><td>8.659,</td><td>1,</td><td>'2_bat',</td><td>'2_bat',</td><td>'task 2 animated'</tr></td>"
                + "<tr><td>00:00:08.659,</td><td>00:00:09.862,</td><td>8.659,</td><td>9.862,</td><td>4,</td><td>'1_pig',</td><td>'1_pig',</td><td>'correct image clicked'</tr></td>"
                + "<tr><td>00:00:11.305,</td><td>00:00:11.305,</td><td>11.305,</td><td>11.305,</td><td>1,</td><td>'1_pig',</td><td>'1_pig',</td><td>'task 2 animated'</tr></td>"
                + "<tr><td>00:00:11.305,</td><td>00:00:12.267,</td><td>11.305,</td><td>12.267,</td><td>4,</td><td>'2_fish',</td><td>'2_fish',</td><td>'correct image clicked'</tr></td>"
                + "<tr><td>00:00:13.470,</td><td>00:00:13.470,</td><td>13.470,</td><td>13.470,</td><td>1,</td><td>'2_fish',</td><td>'2_fish',</td><td>'task 2 animated'</tr></td>"
                + "</table>"
                + "<br/>",
                "Begin");
        final WizardWelcomeScreen welcomePresenter = new WizardWelcomeScreen("Transmission Chain", "Welcome", "Instructions", "Begin", welcomeMenuPresenter, instructionsPresenter);

        final WizardMenuScreen menuScreen = new WizardMenuScreen("Menu", "Menu", "Menu");
        menuScreen.setBackWizardScreen(welcomePresenter);
        final WizardSelectUserScreen wizardSelectUserScreen = new WizardSelectUserScreen("Select Participant");
        wizardSelectUserScreen.setBackWizardScreen(welcomePresenter);
        wizardSelectUserScreen.setNextWizardScreen(menuScreen);
        final WizardEditUserScreen editUserPresenter = new WizardEditUserScreen("Information about the participant", "Edit User", null, "Save and continue", null, null, null, false, false, "Could not contact the server, please check your internet connection and try again.");
        editUserPresenter.setCustomFields(new String[]{"workerId:Participant ID:.'{'3,'}':Please enter at least three letters."});
//        final WizardAboutScreen debugScreenPresenter = new WizardAboutScreen();

        final WizardStimulusScreen wizardStimulusScreenSequential = new WizardStimulusScreen();
        wizardStimulusScreenSequential.setScreenTitle("FieldKit Sequential");
        wizardStimulusScreenSequential.setMenuLabel("FieldKit Sequential");
//        wizardStimulusScreenSequential.setScreenLabel("FieldKit Sequential");
        wizardStimulusScreenSequential.setScreenTag("FieldKitSequential");
//        experiment, welcomePresenter, "cutbreak", welcomePresenter, new String[]{"cutbreak"}, grammaticalityValuesArray, true, 1000, false, "end_of_stimuli", 15, obfuscateScreenNames
        wizardStimulusScreenSequential.setStimulusTagArray(new String[]{"FieldKit"});
        wizardStimulusScreenSequential.setFeatureValuesArray(new StimuliSubAction[]{new StimuliSubAction("80", "the informant talks about the image", "next")});
        wizardStimulusScreenSequential.setMaxStimuli(1000);
        wizardStimulusScreenSequential.setRandomiseStimuli(false);
        wizardStimulusScreenSequential.setFilePerStimulus(false);
        wizardStimulusScreenSequential.setEnd_of_stimuli("Complete");

        final WizardStimulusScreen wizardStimulusScreenRandom = new WizardStimulusScreen();
        wizardStimulusScreenRandom.setScreenTitle("FieldKit Random");
        wizardStimulusScreenRandom.setMenuLabel("FieldKit Random");
//        wizardStimulusScreenRandom.setScreenLabel("FieldKit Random");
        wizardStimulusScreenRandom.setScreenTag("FieldKitRandom");
//        experiment, welcomePresenter, "cutbreak", welcomePresenter, new String[]{"cutbreak"}, grammaticalityValuesArray, true, 1000, false, "end_of_stimuli", 15, obfuscateScreenNames
        wizardStimulusScreenRandom.setStimulusTagArray(new String[]{"FieldKit"});
        wizardStimulusScreenRandom.setFeatureValuesArray(new StimuliSubAction[]{new StimuliSubAction("80", "the informant talks about the image", "next")});
        wizardStimulusScreenRandom.setMaxStimuli(1000);
        wizardStimulusScreenRandom.setRandomiseStimuli(true);
        wizardStimulusScreenRandom.setFilePerStimulus(false);
        wizardStimulusScreenRandom.setEnd_of_stimuli("Complete");

        editUserPresenter.setBackWizardScreen(welcomePresenter);
//        task1Screen.setBackWizardScreen(menuScreen);
//        task2Screen.setBackWizardScreen(menuScreen);
//        task1Screen.setNextWizardScreen(menuScreen);
//        task2Screen.setNextWizardScreen(menuScreen);
//        debugScreenPresenter.setBackWizardScreen(menuScreen);
//        task1ScreenSD.setBackWizardScreen(menuScreen);
//        task1ScreenSD.setNextWizardScreen(menuScreen);
//        task2ScreenSD.setBackWizardScreen(menuScreen);
//        task2ScreenSD.setNextWizardScreen(menuScreen);
        editUserPresenter.setNextWizardScreen(menuScreen);
        welcomeMenuPresenter.setNextWizardScreen(editUserPresenter);
        welcomeMenuPresenter.setBackWizardScreen(instructionsPresenter);
        instructionsPresenter.setBackWizardScreen(welcomePresenter);
        instructionsPresenter.setNextWizardScreen(welcomeMenuPresenter);
        wizardStimulusScreenSequential.setBackWizardScreen(menuScreen);
        wizardStimulusScreenSequential.setEndOfStimulisWizardScreen(menuScreen);
        wizardStimulusScreenRandom.setBackWizardScreen(menuScreen);
        wizardStimulusScreenRandom.setEndOfStimulisWizardScreen(menuScreen);
//        menuScreen.addTargetScreen(task1ScreenSD);
//        menuScreen.addTargetScreen(task2ScreenSD);
//        menuScreen.addTargetScreen(task1Screen);
//        menuScreen.addTargetScreen(task2Screen);
        menuScreen.addTargetScreen(wizardStimulusScreenSequential);
        menuScreen.addTargetScreen(wizardStimulusScreenRandom);
//        menuScreen.addTargetScreen(debugScreenPresenter);
        menuScreen.addTargetScreen(instructionsPresenter);
        wizardData.addScreen(welcomePresenter);
        wizardData.addScreen(welcomeMenuPresenter);
        wizardData.addScreen(instructionsPresenter);
        wizardData.addScreen(editUserPresenter);
        wizardData.addScreen(menuScreen);
        wizardData.addScreen(wizardSelectUserScreen);
        wizardData.addScreen(wizardStimulusScreenSequential);
        wizardData.addScreen(wizardStimulusScreenRandom);
//        wizardData.addScreen(task1Screen);
//        wizardData.addScreen(task2Screen);
//        wizardData.addScreen(task1ScreenSD);
//        wizardData.addScreen(task2ScreenSD);
//        wizardData.addScreen(debugScreenPresenter);
        return wizardData;
    }

    public Experiment getExperiment() {
        return wizardController.getExperiment(getWizardData());
    }
}

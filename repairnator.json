{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "swagger-api/swagger-core",
  "bugCommit": "https://github.com/swagger-api/swagger-core/compare/5d75de8254f2...4bd32ad7c5d9",
  "failingModule": "/root/workspace/swagger-api/swagger-core/268912908/modules/swagger-jaxrs2",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 1,
  "error-types": [
    "java.lang.AssertionError"
  ],
  "totalNumberRunningTests": 298,
  "failing-test-cases": [
    {
      "className": "io.swagger.jaxrs2.annotations.responses.RequestBodyTest",
      "failingMethods": [
        "io.swagger.jaxrs2.annotations.responses.RequestBodyTest#oneRequestBodyMultipleParameters"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [openapi: 3.0.0 paths:   /user:     put:       summary: Modify user       description: Modifying user.       operationId: methodWithRequestBodyWithoutAnnotation       requestBody:         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/User\u0027       responses:         default:           description: no description     post:       summary: Create user       description: This can only be done by the logged in user.       operationId: methodWithRequestBodyAndTwoParameters       parameters:       - name: name         in: query         schema:           type: string       - name: code         in: query         schema:           type: string       requestBody:         description: Created user object         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/User\u0027         required: true       responses:         default:           description: no description     delete:       summary: Delete user       description: This can only be done by the logged in user.       operationId: methodWithoutRequestBodyAndTwoParameters       parameters:       - name: name         in: query         schema:           type: string       - name: code         in: query         schema:           type: string       responses:         default:           description: no description   /pet:     put:       summary: Modify pet       description: Modifying pet.       operationId: methodWithRequestBodyWithoutAnnotationAndTwoProduces       requestBody:         content:           application/json:             schema:               $ref: \u0027#/components/schemas/User\u0027           application/xml:             schema:               $ref: \u0027#/components/schemas/User\u0027       responses:         default:           description: no description     post:       summary: Create pet       description: Creating pet.       operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoProduces       requestBody:         content:           application/json:             schema:               $ref: \u0027#/components/schemas/Pet\u0027           application/xml:             schema:               $ref: \u0027#/components/schemas/Pet\u0027       responses:         default:           description: no description     delete:       summary: Delete pet       description: Deleting pet.       operationId: methodWithOneSimpleRequestBody       requestBody:         content:           application/json:             schema:               type: int           application/xml:             schema:               type: int       responses:         default:           description: no description components:   schemas:     User:       type: object       properties:         id:           type: integer           format: int64         username:           type: string         firstName:           type: string         lastName:           type: string         email:           type: string         password:           type: string         phone:           type: string         userStatus:           type: integer           description: User Status           format: int32           enum:           - null       xml:         name: User     Pet:       type: object       properties:         id:           type: integer           format: int64         category:           $ref: \u0027#/components/schemas/Category\u0027         name:           type: string         photoUrls:           type: array           xml:             wrapped: true           items:             type: string             xml:               name: photoUrl         tags:           type: array           xml:             wrapped: true           items:             $ref: \u0027#/components/schemas/Tag\u0027         status:           type: string           description: pet status in the store           enum:           - available,pending,sold       xml:         name: Pet ] but found [openapi: 3.0.0 paths:   /user:     put:       summary: Modify user       description: Modifying user.       operationId: methodWithRequestBodyWithoutAnnotation       requestBody:         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/User\u0027       responses:         default:           description: no description     post:       summary: Create user       description: This can only be done by the logged in user.       operationId: methodWithRequestBodyAndTwoParameters       parameters:       - name: name         in: query         schema:           type: string       - name: code         in: query         schema:           type: string       requestBody:         description: Created user object         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/User\u0027         required: true       responses:         default:           description: no description     delete:       summary: Delete user       description: This can only be done by the logged in user.       operationId: methodWithoutRequestBodyAndTwoParameters       parameters:       - name: name         in: query         schema:           type: string       - name: code         in: query         schema:           type: string       responses:         default:           description: no description   /pet:     put:       summary: Modify pet       description: Modifying pet.       operationId: methodWithRequestBodyWithoutAnnotationAndTwoProduces       requestBody:         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/User\u0027       responses:         default:           description: no description     post:       summary: Create pet       description: Creating pet.       operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoProduces       requestBody:         content:           \u0027*/*\u0027:             schema:               $ref: \u0027#/components/schemas/Pet\u0027       responses:         default:           description: no description     delete:       summary: Delete pet       description: Deleting pet.       operationId: methodWithOneSimpleRequestBody       requestBody:         content:           \u0027*/*\u0027:             schema:               type: int       responses:         default:           description: no description components:   schemas:     User:       type: object       properties:         id:           type: integer           format: int64         username:           type: string         firstName:           type: string         lastName:           type: string         email:           type: string         password:           type: string         phone:           type: string         userStatus:           type: integer           description: User Status           format: int32           enum:           - null       xml:         name: User     Pet:       type: object       properties:         id:           type: integer           format: int64         category:           $ref: \u0027#/components/schemas/Category\u0027         name:           type: string         photoUrls:           type: array           xml:             wrapped: true           items:             type: string             xml:               name: photoUrl         tags:           type: array           xml:             wrapped: true           items:             $ref: \u0027#/components/schemas/Tag\u0027         status:           type: string           description: pet status in the store           enum:           - available,pending,sold       xml:         name: Pet ]",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}
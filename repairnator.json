{
  "builds": {},
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Feb 16, 2020 6:27:06 PM",
    "reproductionDateEnd": "Feb 16, 2020 7:04:22 PM",
    "machineInfo": {
      "numberCPU": 1,
      "freeMemory": 328617656,
      "totalMemory": 1125998592
    },
    "totalDuration": 2234,
    "processDurations": {
      "cloning": {
        "nbSteps": 0,
        "totalDuration": 0,
        "stepNames": [],
        "stepDurations": []
      },
      "building": {
        "nbSteps": 3,
        "totalDuration": 0,
        "stepNames": [
          "ComputeSourceDir",
          "ComputeTestDir",
          "CheckoutPatchedBuild"
        ],
        "stepDurations": [
          0,
          0,
          0
        ]
      },
      "testing": {
        "nbSteps": 0,
        "totalDuration": 0,
        "stepNames": [],
        "stepDurations": []
      },
      "fixing": {
        "nbSteps": 1,
        "totalDuration": 2068,
        "stepNames": [
          "AstorJKali"
        ],
        "stepDurations": [
          2068
        ]
      }
    },
    "projectRootPomPath": "/scratch/dginelli/workspace/repairnator-repairnator-experiments-swagger-api-swagger-core-367008248-20180416-082455-firstCommit/pom.xml"
  },
  "repository": {
    "githubId": 0,
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  },
  "commits": {},
  "tests": {
    "failingModule": "/scratch/dginelli/workspace/repairnator-repairnator-experiments-swagger-api-swagger-core-367008248-20180416-082455-firstCommit/modules/swagger-jaxrs2",
    "overallMetrics": {
      "numberRunning": 423,
      "numberPassing": 422,
      "numberFailing": 1,
      "numberErroring": 0,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 1
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest",
        "numberRunning": 16,
        "numberPassing": 15,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "io.swagger.v3.jaxrs2.annotations.operations.AnnotatedOperationMethodTest",
        "testMethod": "testCompletePetResource",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [openapi: 3.0.1\npaths:\n  /pet/findByTags:\n    get:\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma seperated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Pets matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid tag value\n  /pet/findByCategory/{category}:\n    get:\n      summary: Finds Pets by category\n      operationId: findPetsByCategory\n      parameters:\n      - name: category\n        in: path\n        description: Category value that need to be considered for filter\n        required: true\n        style: matrix\n        schema:\n          $ref: \u0027#/components/schemas/Category\u0027\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid category value\n  /pet/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c\u003d 10.  ID \u003e 10 or nonintegers will simulate\n        API error conditions\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n            application/xml:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n  /pet/bodynoannotation:\n    post:\n      summary: Add a new pet to the store no annotation\n      operationId: addPetNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyid:\n    post:\n      summary: Add a new pet to the store passing an integer with generic parameter\n        annotation\n      operationId: addPetByInteger\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyidnoannotation:\n    post:\n      summary: Add a new pet to the store passing an integer without parameter annotation\n      operationId: addPetByIntegerNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        405:\n          description: Invalid input\n  /pet:\n    put:\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n        405:\n          description: Validation exception\n    post:\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/findByStatus:\n    get:\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid status value\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n] but found [openapi: 3.0.1\npaths:\n  /pet/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c\u003d 10.  ID \u003e 10 or nonintegers will simulate\n        API error conditions\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n            application/xml:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n  /pet/findByTags:\n    get:\n      summary: Finds Pets by tags\n      description: Muliple tags can be provided with comma seperated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Pets matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid tag value\n  /pet/bodyid:\n    post:\n      summary: Add a new pet to the store passing an integer with generic parameter\n        annotation\n      operationId: addPetByInteger\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/bodyidnoannotation:\n    post:\n      summary: Add a new pet to the store passing an integer without parameter annotation\n      operationId: addPetByIntegerNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        405:\n          description: Invalid input\n  /pet:\n    put:\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        400:\n          description: Invalid ID supplied\n        404:\n          description: Pet not found\n        405:\n          description: Validation exception\n    post:\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n        required: true\n      responses:\n        405:\n          description: Invalid input\n  /pet/findByStatus:\n    get:\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma seperated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: \u0027#/components/schemas/Pet\u0027\n        400:\n          description: Invalid status value\n  /pet/bodynoannotation:\n    post:\n      summary: Add a new pet to the store no annotation\n      operationId: addPetNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        405:\n          description: Invalid input\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n]",
        "isError": false
      }
    ]
  },
  "projectMetrics": {
    "numberModules": 6,
    "numberPlugins": 0,
    "numberSourceFiles": 181,
    "numberTestFiles": 308,
    "numberLibrariesFailingModule": 94,
    "numberLines": 0
  }
}
{
  "tests": {
    "failingModule": "/scratch/dginelli/workspace/repairnator-repairnator-experiments-swagger-api-swagger-core-268912908-20170827-163630_bugonly-firstCommit/modules/swagger-jaxrs2",
    "overallMetrics": {
      "numberRunning": 298,
      "numberPassing": 297,
      "numberFailing": 1,
      "numberErroring": 0,
      "numberSkipping": 0,
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false,
          "occurrences": 1
        }
      ]
    },
    "failingClasses": [
      {
        "testClass": "io.swagger.jaxrs2.annotations.responses.RequestBodyTest",
        "numberRunning": 1,
        "numberPassing": 0,
        "numberFailing": 1,
        "numberErroring": 0,
        "numberSkipping": 0
      }
    ],
    "failureDetails": [
      {
        "testClass": "io.swagger.jaxrs2.annotations.responses.RequestBodyTest",
        "testMethod": "oneRequestBodyMultipleParameters",
        "failureName": "java.lang.AssertionError",
        "detail": "expected [openapi: 3.0.0\npaths:\n  /user:\n    put:\n      summary: Modify user\n      description: Modifying user.\n      operationId: methodWithRequestBodyWithoutAnnotation\n      requestBody:\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n      responses:\n        default:\n          description: no description\n    post:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyAndTwoParameters\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      requestBody:\n        description: Created user object\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n        required: true\n      responses:\n        default:\n          description: no description\n    delete:\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: methodWithoutRequestBodyAndTwoParameters\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      responses:\n        default:\n          description: no description\n  /pet:\n    put:\n      summary: Modify pet\n      description: Modifying pet.\n      operationId: methodWithRequestBodyWithoutAnnotationAndTwoProduces\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n      responses:\n        default:\n          description: no description\n    post:\n      summary: Create pet\n      description: Creating pet.\n      operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoProduces\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n          application/xml:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        default:\n          description: no description\n    delete:\n      summary: Delete pet\n      description: Deleting pet.\n      operationId: methodWithOneSimpleRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: int\n          application/xml:\n            schema:\n              type: int\n      responses:\n        default:\n          description: no description\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          enum:\n          - null\n      xml:\n        name: User\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n] but found [openapi: 3.0.0\npaths:\n  /user:\n    put:\n      summary: Modify user\n      description: Modifying user.\n      operationId: methodWithRequestBodyWithoutAnnotation\n      requestBody:\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n      responses:\n        default:\n          description: no description\n    post:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyAndTwoParameters\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      requestBody:\n        description: Created user object\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n        required: true\n      responses:\n        default:\n          description: no description\n    delete:\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: methodWithoutRequestBodyAndTwoParameters\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      responses:\n        default:\n          description: no description\n  /pet:\n    put:\n      summary: Modify pet\n      description: Modifying pet.\n      operationId: methodWithRequestBodyWithoutAnnotationAndTwoProduces\n      requestBody:\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/User\u0027\n      responses:\n        default:\n          description: no description\n    post:\n      summary: Create pet\n      description: Creating pet.\n      operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoProduces\n      requestBody:\n        content:\n          \u0027*/*\u0027:\n            schema:\n              $ref: \u0027#/components/schemas/Pet\u0027\n      responses:\n        default:\n          description: no description\n    delete:\n      summary: Delete pet\n      description: Deleting pet.\n      operationId: methodWithOneSimpleRequestBody\n      requestBody:\n        content:\n          \u0027*/*\u0027:\n            schema:\n              type: int\n      responses:\n        default:\n          description: no description\ncomponents:\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n          enum:\n          - null\n      xml:\n        name: User\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \u0027#/components/schemas/Category\u0027\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: \u0027#/components/schemas/Tag\u0027\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n]",
        "isError": false
      }
    ]
  },
  "projectMetrics": {
    "numberModules": 5,
    "numberPlugins": 0,
    "numberSourceFiles": 157,
    "numberTestFiles": 172,
    "numberLibrariesFailingModule": 51,
    "numberLines": 0
  },
  "commits": {},
  "builds": {},
  "reproductionBuggyBuild": {
    "reproductionDateBeginning": "Feb 16, 2020 6:27:07 PM",
    "reproductionDateEnd": "Feb 16, 2020 6:57:00 PM",
    "machineInfo": {
      "numberCPU": 1,
      "freeMemory": 214619120,
      "totalMemory": 1131216896
    },
    "totalDuration": 1789,
    "processDurations": {
      "cloning": {
        "nbSteps": 0,
        "totalDuration": 0,
        "stepNames": [],
        "stepDurations": []
      },
      "building": {
        "nbSteps": 3,
        "totalDuration": 0,
        "stepNames": [
          "ComputeSourceDir",
          "ComputeTestDir",
          "CheckoutPatchedBuild"
        ],
        "stepDurations": [
          0,
          0,
          0
        ]
      },
      "testing": {
        "nbSteps": 0,
        "totalDuration": 0,
        "stepNames": [],
        "stepDurations": []
      },
      "fixing": {
        "nbSteps": 1,
        "totalDuration": 1582,
        "stepNames": [
          "AstorJKali"
        ],
        "stepDurations": [
          1582
        ]
      }
    },
    "projectRootPomPath": "/scratch/dginelli/workspace/repairnator-repairnator-experiments-swagger-api-swagger-core-268912908-20170827-163630_bugonly-firstCommit/pom.xml"
  },
  "repository": {
    "githubId": 0,
    "isFork": false,
    "original": {
      "name": "",
      "githubId": 0,
      "url": ""
    },
    "isPullRequest": false,
    "pullRequestId": 0
  },
  "patchDiff": {
    "files": {
      "numberAdded": 0,
      "numberChanged": 0,
      "numberDeleted": 0
    },
    "lines": {
      "numberAdded": 0,
      "numberDeleted": 0
    }
  }
}
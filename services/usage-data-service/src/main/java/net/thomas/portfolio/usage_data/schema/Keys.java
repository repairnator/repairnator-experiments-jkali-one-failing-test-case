/*
 * This file is generated by jOOQ.
*/
package net.thomas.portfolio.usage_data.schema;


import javax.annotation.Generated;

import net.thomas.portfolio.usage_data.schema.tables.AccessType;
import net.thomas.portfolio.usage_data.schema.tables.User;
import net.thomas.portfolio.usage_data.schema.tables.UserAccessedDocument;
import net.thomas.portfolio.usage_data.schema.tables.records.AccessTypeRecord;
import net.thomas.portfolio.usage_data.schema.tables.records.UserAccessedDocumentRecord;
import net.thomas.portfolio.usage_data.schema.tables.records.UserRecord;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;
import org.jooq.types.UInteger;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>usage_data</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<AccessTypeRecord, UInteger> IDENTITY_ACCESS_TYPE = Identities0.IDENTITY_ACCESS_TYPE;
    public static final Identity<UserRecord, UInteger> IDENTITY_USER = Identities0.IDENTITY_USER;
    public static final Identity<UserAccessedDocumentRecord, UInteger> IDENTITY_USER_ACCESSED_DOCUMENT = Identities0.IDENTITY_USER_ACCESSED_DOCUMENT;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccessTypeRecord> KEY_ACCESS_TYPE_PRIMARY = UniqueKeys0.KEY_ACCESS_TYPE_PRIMARY;
    public static final UniqueKey<AccessTypeRecord> KEY_ACCESS_TYPE_NAME_UNIQUE = UniqueKeys0.KEY_ACCESS_TYPE_NAME_UNIQUE;
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = UniqueKeys0.KEY_USER_PRIMARY;
    public static final UniqueKey<UserRecord> KEY_USER_NAME_UNIQUE = UniqueKeys0.KEY_USER_NAME_UNIQUE;
    public static final UniqueKey<UserAccessedDocumentRecord> KEY_USER_ACCESSED_DOCUMENT_PRIMARY = UniqueKeys0.KEY_USER_ACCESSED_DOCUMENT_PRIMARY;
    public static final UniqueKey<UserAccessedDocumentRecord> KEY_USER_ACCESSED_DOCUMENT_ROW_UNIQUE = UniqueKeys0.KEY_USER_ACCESSED_DOCUMENT_ROW_UNIQUE;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<AccessTypeRecord, UInteger> IDENTITY_ACCESS_TYPE = Internal.createIdentity(AccessType.ACCESS_TYPE, AccessType.ACCESS_TYPE.ID);
        public static Identity<UserRecord, UInteger> IDENTITY_USER = Internal.createIdentity(User.USER, User.USER.ID);
        public static Identity<UserAccessedDocumentRecord, UInteger> IDENTITY_USER_ACCESSED_DOCUMENT = Internal.createIdentity(UserAccessedDocument.USER_ACCESSED_DOCUMENT, UserAccessedDocument.USER_ACCESSED_DOCUMENT.ROW);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AccessTypeRecord> KEY_ACCESS_TYPE_PRIMARY = Internal.createUniqueKey(AccessType.ACCESS_TYPE, "KEY_access_type_PRIMARY", AccessType.ACCESS_TYPE.ID);
        public static final UniqueKey<AccessTypeRecord> KEY_ACCESS_TYPE_NAME_UNIQUE = Internal.createUniqueKey(AccessType.ACCESS_TYPE, "KEY_access_type_name_UNIQUE", AccessType.ACCESS_TYPE.NAME);
        public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, "KEY_user_PRIMARY", User.USER.ID);
        public static final UniqueKey<UserRecord> KEY_USER_NAME_UNIQUE = Internal.createUniqueKey(User.USER, "KEY_user_name_UNIQUE", User.USER.NAME);
        public static final UniqueKey<UserAccessedDocumentRecord> KEY_USER_ACCESSED_DOCUMENT_PRIMARY = Internal.createUniqueKey(UserAccessedDocument.USER_ACCESSED_DOCUMENT, "KEY_user_accessed_document_PRIMARY", UserAccessedDocument.USER_ACCESSED_DOCUMENT.ROW);
        public static final UniqueKey<UserAccessedDocumentRecord> KEY_USER_ACCESSED_DOCUMENT_ROW_UNIQUE = Internal.createUniqueKey(UserAccessedDocument.USER_ACCESSED_DOCUMENT, "KEY_user_accessed_document_row_UNIQUE", UserAccessedDocument.USER_ACCESSED_DOCUMENT.ROW);
    }
}

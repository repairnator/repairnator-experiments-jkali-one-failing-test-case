/*
 * This file is generated by jOOQ.
*/
package net.thomas.portfolio.usage_data.schema.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import net.thomas.portfolio.usage_data.schema.Indexes;
import net.thomas.portfolio.usage_data.schema.Keys;
import net.thomas.portfolio.usage_data.schema.UsageData;
import net.thomas.portfolio.usage_data.schema.tables.records.UserAccessedDocumentRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAccessedDocument extends TableImpl<UserAccessedDocumentRecord> {

    private static final long serialVersionUID = 675549761;

    /**
     * The reference instance of <code>usage_data.user_accessed_document</code>
     */
    public static final UserAccessedDocument USER_ACCESSED_DOCUMENT = new UserAccessedDocument();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAccessedDocumentRecord> getRecordType() {
        return UserAccessedDocumentRecord.class;
    }

    /**
     * The column <code>usage_data.user_accessed_document.row</code>.
     */
    public final TableField<UserAccessedDocumentRecord, UInteger> ROW = createField("row", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>usage_data.user_accessed_document.document_type</code>.
     */
    public final TableField<UserAccessedDocumentRecord, String> DOCUMENT_TYPE = createField("document_type", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>usage_data.user_accessed_document.document_uid</code>.
     */
    public final TableField<UserAccessedDocumentRecord, String> DOCUMENT_UID = createField("document_uid", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>usage_data.user_accessed_document.user_id</code>.
     */
    public final TableField<UserAccessedDocumentRecord, UInteger> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>usage_data.user_accessed_document.access_type_id</code>.
     */
    public final TableField<UserAccessedDocumentRecord, UInteger> ACCESS_TYPE_ID = createField("access_type_id", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>usage_data.user_accessed_document.time_of_access</code>.
     */
    public final TableField<UserAccessedDocumentRecord, Timestamp> TIME_OF_ACCESS = createField("time_of_access", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>usage_data.user_accessed_document</code> table reference
     */
    public UserAccessedDocument() {
        this(DSL.name("user_accessed_document"), null);
    }

    /**
     * Create an aliased <code>usage_data.user_accessed_document</code> table reference
     */
    public UserAccessedDocument(String alias) {
        this(DSL.name(alias), USER_ACCESSED_DOCUMENT);
    }

    /**
     * Create an aliased <code>usage_data.user_accessed_document</code> table reference
     */
    public UserAccessedDocument(Name alias) {
        this(alias, USER_ACCESSED_DOCUMENT);
    }

    private UserAccessedDocument(Name alias, Table<UserAccessedDocumentRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAccessedDocument(Name alias, Table<UserAccessedDocumentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return UsageData.USAGE_DATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_ACCESSED_DOCUMENT_ACCESS_TYPE_FOREIGN_KEY_IDX, Indexes.USER_ACCESSED_DOCUMENT_DOCUMENT_INDEX, Indexes.USER_ACCESSED_DOCUMENT_PRIMARY, Indexes.USER_ACCESSED_DOCUMENT_ROW_UNIQUE, Indexes.USER_ACCESSED_DOCUMENT_USER_FOREIGN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserAccessedDocumentRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_USER_ACCESSED_DOCUMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserAccessedDocumentRecord> getPrimaryKey() {
        return Keys.KEY_USER_ACCESSED_DOCUMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserAccessedDocumentRecord>> getKeys() {
        return Arrays.<UniqueKey<UserAccessedDocumentRecord>>asList(Keys.KEY_USER_ACCESSED_DOCUMENT_PRIMARY, Keys.KEY_USER_ACCESSED_DOCUMENT_ROW_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAccessedDocument as(String alias) {
        return new UserAccessedDocument(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserAccessedDocument as(Name alias) {
        return new UserAccessedDocument(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccessedDocument rename(String name) {
        return new UserAccessedDocument(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAccessedDocument rename(Name name) {
        return new UserAccessedDocument(name, null);
    }
}

# Configuration version
configurationVersion=4

# Working folder
workingFolder=E:\TestAnalyzer\testarea

# Jar files to be mutated (can be specified relative to the working folder)
codepathToMutate=./sample-project/jars/application.jar;

# Jar files with test cases (may overlap / be equal to codePathToMutate) (can be specified relative to the working folder)
codepathToTest=./sample-project/jars/application-tests.jar;

# Further needed dependencies (hint: see test-analyzer-runner/utilities/ClasspathHelp.java)
classpath=./sample-project/jars/dependency-1.jar;./sample-project/jars/dependency-2.jar;

# Extension that contains further workflows (will be located in test-analyzer-extensions/target after a Maven build)
# classpath+=./common/test-analyzer-extensions.jar;

# Mutation testing (main workflow)
workflows=de.tum.in.niedermr.ta.runner.analysis.workflow.TestWorkflow;

# Collect statistics about the code (requires test-analyzer-extensions.jar)
# workflows+=de.tum.in.niedermr.ta.extensions.analysis.workflows.statistics.CodeStatisticsWorkflow;

# Collect the declared return types of the methods (requires test-analyzer-extensions.jar)
# workflows+=de.tum.in.niedermr.ta.extensions.analysis.workflows.methodsignature.ReturnTypeCollectorWorkflow;

# Compute the stack distance between test cases and methods (requires test-analyzer-extensions.jar)
# workflows+=de.tum.in.niedermr.ta.extensions.analysis.workflows.stackdistance2.StackDistanceAnalysisWorkflowV2;

# Parse JaCoCo XML coverage files (requires test-analyzer-extensions.jar)
# workflows+=de.tum.in.niedermr.ta.extensions.analysis.workflows.coverage.CoverageParserWorkflow;

# Default test runner (can be replaced with runners for testNG)
# testRunner=de.tum.in.niedermr.ta.core.code.tests.runner.junit.JUnitTestRunner

# Filter the methods to be mutated (specify classes implementing IMethodFilter)
# methodFilters=

# Return value generators returnValueGenerators=de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator;de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleAndWrapperReturnValueGeneratorWith0;de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleAndWrapperReturnValueGeneratorWith1;
# returnValueGenerators+=de.tum.in.niedermr.ta.extensions.analysis.mutation.returnvalues.CommonInstancesReturnValueGenerator;

resultPresentation=DB
testClassIncludes=
testClassExcludes=.*FailingTest
testingTimeoutConstant=15
testingTimeoutPerTestcase=10
testingTimeoutAbsoluteMax=-1
operateFaultTolerant=false
numberOfThreads=1
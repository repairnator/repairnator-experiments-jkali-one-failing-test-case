INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'org.junit.ComparisonFailure');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', false, false, '');

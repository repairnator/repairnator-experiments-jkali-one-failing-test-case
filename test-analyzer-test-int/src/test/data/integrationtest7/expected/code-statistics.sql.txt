INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '2', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '3', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '7', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.computeMultiThreading()', '30', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '37', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '7', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '2', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '7', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(java.lang.Object)', '5', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '1', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '7', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute4(int)', '8', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '5', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '9', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '2', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute3(int)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '3', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading$ComputeThread.run()', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '9', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute2(int)', '6', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '9', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '1', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '2', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '18', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '7', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '12', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '1', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '5', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '28', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '1', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '8', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '4', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '3', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '2', 'instructions');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Object)', '5', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '15', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '34', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '17', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '22', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '18', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '9', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '5', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '17', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '16', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '13', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '21', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '21', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '14', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '15', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '15', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '26', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '10', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '9', 'instructions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '5', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '3', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '3', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '2', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '3', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '1', 'assertions');
INSERT INTO Testcase_Info_Import (execution, testcase, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '1', 'assertions');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.computeMultiThreading()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'protected', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', 'private', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(java.lang.Object)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute4(int)', 'private', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'private', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute3(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading$ComputeThread.run()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', 'protected', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MultiThreading.compute2(int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', 'private', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', 'private', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', 'public', 'modifier');
INSERT INTO Method_Info_Import (execution, method, stringValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Object)', 'public', 'modifier');

INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(java.lang.Object)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()');
INSERT INTO Collected_Information_Import (execution, method, testcase) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()');

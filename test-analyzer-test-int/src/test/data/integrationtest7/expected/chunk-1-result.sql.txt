INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'org.junit.ComparisonFailure');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, true, 'org.junit.ComparisonFailure');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, false, 'java.lang.StackOverflowError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, false, 'java.lang.StackOverflowError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', false, false, '');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith0', true, false, 'java.lang.NumberFormatException');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.SimpleReturnValueGeneratorWith1', true, false, 'java.lang.NumberFormatException');
INSERT INTO Test_Result_Import (execution, testcase, method, retValGen, killed, assertErr, exception) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', 'de.tum.in.niedermr.ta.core.analysis.mutation.returnvalues.VoidReturnValueGenerator', true, true, 'java.lang.AssertionError');

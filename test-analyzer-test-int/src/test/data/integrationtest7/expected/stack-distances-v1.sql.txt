INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '3', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '3', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '6');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '3', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '3', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '2', '3', '6');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '1', '1', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '3', '9');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '3', '6');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '2', '3', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '3', '5');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '2', '3', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '3', '5');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '3', '5');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '8');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '4');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '2', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '3');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(java.lang.Object)', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '2', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '1', '1', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '2', '2', '1');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '1', '2', '6');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '1', '1', '2');
INSERT INTO Stack_Info_Import (execution, testcase, method, minStackDistance, maxStackDistance, invocationCount) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '2', '2', '2');

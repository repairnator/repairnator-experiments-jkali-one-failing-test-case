-- Created with: de.tum.in.niedermr.ta.extensions.analysis.workflows.coverage.parser.JaCoCoCoverageParser
/*
-- TODO: check test excludes
UPDATE Execution_Information SET methodCoverage = 
	 (SELECT CASE WHEN SUM(countCovered) = 0 THEN 0 ELSE SUM(countCovered) / (SUM(countCovered) + SUM(countNotCovered)) END FROM
		 (
		 SELECT 'none' AS sourceFolder, 0 AS countCovered, 0 AS countNotCovered
		 UNION SELECT 'src', '21', '24'
-- 		 UNION SELECT 'tests', '23', '49'
-- 		 UNION SELECT 'tests-testng', '0', '4'
		 ) X
	 )
WHERE execution = 'TEST';
UPDATE Execution_Information SET lineCoverage = 
	 (SELECT CASE WHEN SUM(countCovered) = 0 THEN 0 ELSE SUM(countCovered) / (SUM(countCovered) + SUM(countNotCovered)) END FROM
		 (
		 SELECT 'none' AS sourceFolder, 0 AS countCovered, 0 AS countNotCovered
		 UNION SELECT 'src', '44', '40'
-- 		 UNION SELECT 'tests', '83', '117'
-- 		 UNION SELECT 'tests-testng', '0', '4'
		 ) X
	 )
WHERE execution = 'TEST';
UPDATE Execution_Information SET instructionCoverage = 
	 (SELECT CASE WHEN SUM(countCovered) = 0 THEN 0 ELSE SUM(countCovered) / (SUM(countCovered) + SUM(countNotCovered)) END FROM
		 (
		 SELECT 'none' AS sourceFolder, 0 AS countCovered, 0 AS countNotCovered
		 UNION SELECT 'src', '146', '134'
-- 		 UNION SELECT 'tests', '316', '377'
-- 		 UNION SELECT 'tests-testng', '0', '18'
		 ) X
	 )
WHERE execution = 'TEST';
UPDATE Execution_Information SET branchCoverage = 
	 (SELECT CASE WHEN SUM(countCovered) = 0 THEN 0 ELSE SUM(countCovered) / (SUM(countCovered) + SUM(countNotCovered)) END FROM
		 (
		 SELECT 'none' AS sourceFolder, 0 AS countCovered, 0 AS countNotCovered
		 UNION SELECT 'src', '10', '12'
-- 		 UNION SELECT 'tests', '0', '4'
		 ) X
	 )
WHERE execution = 'TEST';
*/
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '4', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.setResult(int)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '3', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResult()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '4', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.getResultAsString()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '9', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '9', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '2', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.isEven()', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '7', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.add(int)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '4', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLite.increment()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.noReturnStatement()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.compareTo(java.lang.Integer)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.tryCatchBlock(java.lang.String)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.add(int,int,int)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '2', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.staticMethod()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '2', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToCauseATimeout()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '2', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Special.returnFiveForTestNotToExit()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.applyMultiplyWithEight(int)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '18', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.multiApplyFunction(java.util.function.Function,int,int)', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '9', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.usePredicateLambda()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '9', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.apply(java.util.function.Predicate,int)', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$0(java.lang.Integer)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8.lambda$1(java.lang.Integer)', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '1', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBeforeClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '1', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callBefore()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '2', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callTest()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '1', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfter()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '1', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SpecialTest2Object.callAfterClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(java.lang.String)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '9', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '28', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.Mathematics.faculty(de.tum.in.ma.simpleproject.core.Calculation)', '6', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '7', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.parse(java.lang.String)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '3', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.trimString(java.lang.String)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '8', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '8', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsArray()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '3', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '12', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '12', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getResultAsList()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '4', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '5', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.sub(int)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '12', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '12', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '37', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '37', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '6', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.mult(int)', '6', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '4', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.clear()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '6', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '2', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.isPositive(int)', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '5', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation.getComparable()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '1', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '2', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '2', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.Calculation$1.compareTo(de.tum.in.ma.simpleproject.core.Calculation)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.setUp()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.emptyAtBeginning()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '6', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '16', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.even()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '17', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add0()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '17', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.add5()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '16', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.increment()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '9', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.lite.CalculationLiteTests.stringCorrect()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '8', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyStatement.evaluate()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.beforeClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.before()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.testBeforeAndAfterDontInstrument()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.after()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '3', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.SetUpAndTearDownTests.afterClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '11', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.IgnoredTestClassTests.testInIgnoredClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest.testRun()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '10', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsInherited.testInInheritingClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '11', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testMultiplyEight()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '10', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.Java8Test.testPredicateLambda()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.successfulTest()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HasFailingTest.failingTest()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testTimeoutIfMutated()', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.TimeoutInTest.testDieIfMutated()', '2', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '7', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.JUnitRulesTest$MyRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description)', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '10', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsSuper.testInInheritableNonAbstractClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.setUp()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '4', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testNoReturnStatement()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '15', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testSyntheticBride()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '13', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testTryCatchBlock()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '7', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '11', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testWithTryCatchBlock()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.MiscellaneousTests.testStaticMethod()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '10', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.special.HierarchyTestsAbstract.testInAbstractClass()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '10', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '35', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty1()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.system.MathematicsTests.testFaculty2()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '8', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '8', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationTrivialTests.emptyAtBeginning()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '6', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.setUp()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '5', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '5', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '20', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '20', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.constructor()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '9', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '9', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '34', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '34', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.positive()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '5', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '5', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '14', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '14', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.even()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '17', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '17', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add0()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '17', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '17', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.add5()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '5', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '5', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '21', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '21', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult1()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '15', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '15', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult2()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '15', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '15', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.mult3()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '5', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '5', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '18', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '18', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.intArray()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '16', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '16', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.increment()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '6', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '6', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '26', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '26', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.clear()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '4', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '4', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '15', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '15', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.sub()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '6', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '6', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '22', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '22', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.resultAsList()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '10', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '10', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationDefaultTests.comparable()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '6', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '6', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.setUp()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '5', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringReturnNotNull()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '2', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '2', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '9', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '9', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.stringCorrect()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '3', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '3', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '13', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '13', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.core.CalculationStringTests.parse()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIsEven()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.testIncrement()', '0', 'cov_branch_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '0', 'cov_line_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '1', 'cov_line_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '0', 'cov_instruction_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '5', 'cov_instruction_all');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '0', 'cov_branch_covered');
INSERT INTO Method_Info_Import (execution, method, intValue, valueName) VALUES ('TEST', 'de.tum.in.ma.simpleproject.testng.TestNgTests.ignoredTest()', '0', 'cov_branch_all');

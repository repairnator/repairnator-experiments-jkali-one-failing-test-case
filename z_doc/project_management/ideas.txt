What about adding word-by-word comparison to the substring comparator?
Given two strings:
"This is a car."
"That is awesome."

The result would be:
"{Th[is]} {is} {a[]} {car}."
"{Th[at]} {is} {a[wesome]} {}."

Status: implemented but not tested enough

What about annotation-based/field-based/pattern-based support for object comparison?
E.g. annotation-based
class Person {
    @Compare
    private final String name;
    
    @DoNotCompare
    private final int age;
}

E.g. field-based
Map<Field, String> namesOfComparatorsByField = ...

E.g. pattern-based:
Map<String, String> namesOfComparatorsByPattern = ...
A pattern could be:
Person*.name

What about a method-based object comparator?

What about a method-based and field-based comparator?

Why compare values/objects if comparison features exclude it?
E.g. COMPARE_ELEMENTS is not set but why compare objects then?
=> ComparisonProvider should be extended with extra parameter 
that makes the provider return the emptyResultComparator for those cases.

/**
 * Copyright (C) 2015-2018 Philip Helger (www.helger.com)
 * philip[at]helger[dot]com
 *
 * The Original Code is Copyright The PEPPOL project (http://www.peppol.eu)
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package com.helger.peppol.smpserver.data.sql.model;

import java.io.Serializable;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.helger.commons.ValueEnforcer;
import com.helger.commons.annotation.ReturnsMutableObject;
import com.helger.commons.collection.impl.CommonsHashSet;
import com.helger.db.jpa.annotation.UsedOnlyByJPA;
import com.helger.peppol.smp.ExtensionType;
import com.helger.peppol.smp.SMPExtensionConverter;

/**
 * Process generated by hbm2java
 *
 * @author PEPPOL.AT, BRZ, Philip Helger
 */
@Entity
@Table (name = "smp_process")
public class DBProcess implements Serializable
{
  private DBProcessID m_aID;
  private DBServiceMetadata m_aServiceMetadata;
  private String m_sExtension;
  private Set <DBEndpoint> m_aEndpoints = new CommonsHashSet<> ();

  @Deprecated
  @UsedOnlyByJPA
  public DBProcess ()
  {}

  public DBProcess (final DBProcessID aID, final DBServiceMetadata aServiceMetadata, final String sExtension)
  {
    m_aID = aID;
    m_aServiceMetadata = aServiceMetadata;
    m_sExtension = sExtension;
  }

  @EmbeddedId
  @Nullable
  public DBProcessID getId ()
  {
    return m_aID;
  }

  @Deprecated
  @UsedOnlyByJPA
  public void setId (final DBProcessID aID)
  {
    m_aID = aID;
  }

  @ManyToOne (fetch = FetchType.LAZY)
  @JoinColumns ({ @JoinColumn (name = "documentIdentifier",
                               referencedColumnName = "documentIdentifier",
                               nullable = false,
                               insertable = false,
                               updatable = false),
                  @JoinColumn (name = "documentIdentifierScheme",
                               referencedColumnName = "documentIdentifierScheme",
                               nullable = false,
                               insertable = false,
                               updatable = false),
                  @JoinColumn (name = "businessIdentifier",
                               referencedColumnName = "businessIdentifier",
                               nullable = false,
                               insertable = false,
                               updatable = false),
                  @JoinColumn (name = "businessIdentifierScheme",
                               referencedColumnName = "businessIdentifierScheme",
                               nullable = false,
                               insertable = false,
                               updatable = false) })
  public DBServiceMetadata getServiceMetadata ()
  {
    return m_aServiceMetadata;
  }

  public void setServiceMetadata (final DBServiceMetadata aServiceMetadata)
  {
    m_aServiceMetadata = aServiceMetadata;
  }

  @Lob
  @Column (name = "extension", length = 65535)
  public String getExtension ()
  {
    return m_sExtension;
  }

  public void setExtension (@Nullable final String sExtension)
  {
    m_sExtension = sExtension;
  }

  @Transient
  public void setExtension (@Nullable final ExtensionType aExtension)
  {
    setExtension (SMPExtensionConverter.convertToString (aExtension));
  }

  @Nonnull
  @ReturnsMutableObject ("design")
  @OneToMany (fetch = FetchType.LAZY, mappedBy = "process", cascade = { CascadeType.ALL })
  public Set <DBEndpoint> getEndpoints ()
  {
    return m_aEndpoints;
  }

  public void setEndpoints (@Nonnull final Set <DBEndpoint> aEndpoints)
  {
    ValueEnforcer.notNull (aEndpoints, "Endpoints");
    m_aEndpoints = aEndpoints;
  }
}

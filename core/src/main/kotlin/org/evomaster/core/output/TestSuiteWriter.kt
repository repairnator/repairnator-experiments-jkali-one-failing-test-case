package org.evomaster.core.output

import org.evomaster.core.EMConfig
import org.evomaster.core.search.Solution
import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZonedDateTime

/**
 * Given a Solution as input, convert it to a string representation of
 * the tests that can be written to file and be compiled
 */
class TestSuiteWriter {

    companion object {

        private val controller = "controller"
        private val baseUrlOfSut = "baseUrlOfSut"


        fun writeTests(
                solution: Solution<*>,
                controllerName: String,
                config: EMConfig
                ){

            val name = TestSuiteFileName(config.testSuiteFileName)

            val content = convertToCompilableTestCode(solution, config.outputFormat, name, controllerName)
            saveToDisk(content, config, name)
        }



        fun convertToCompilableTestCode(
                solution: Solution<*>,
                format: OutputFormat,
                testSuiteFileName: TestSuiteFileName,
                controllerName: String)
                : String {

            val lines = Lines()

            header(solution, format, testSuiteFileName, lines)
            lines.indent()

            beforeAfterMethods(format, controllerName, lines)

            val tests = TestSuiteOrganizer.sortTests(solution)

            for(test in tests){
                lines.addEmpty(2)

                val testLines = TestCaseWriter().convertToCompilableTestCode(format, test, baseUrlOfSut)
                lines.add(testLines)
            }

            lines.deindent()
            footer(lines)

            return lines.toString()
        }


        fun saveToDisk(testFileContent: String,
                       config: EMConfig,
                       testSuiteFileName: TestSuiteFileName){

            val path = Paths.get(config.outputFolder, testSuiteFileName.getAsPath(config.outputFormat))

            Files.createDirectories(path.parent)
            Files.deleteIfExists(path)
            Files.createFile(path)

            path.toFile().appendText(testFileContent)
        }

        private fun classDescriptionComment(solution: Solution<*>, format: OutputFormat, lines: Lines){
            lines.add("/**")
            lines.add(" * This file was automatically generated by EvoMaster on ${ZonedDateTime.now()}")
            lines.add(" * <br>")
            lines.add(" * The generated test suite contains ${solution.individuals.size} tests")
            lines.add(" */")
        }

        private fun header(solution: Solution<*>,
                           format: OutputFormat,
                           name: TestSuiteFileName,
                           lines: Lines){

            if(name.hasPackage() && format.isJavaOrKotlin()){
                lines.add("package ${name.getPackage()}")
                appendSemicolon(format, lines)
            }

            lines.addEmpty(2)

            if(format.isJUnit5()){
                addImport("org.junit.jupiter.api.AfterAll", lines, format)
                addImport("org.junit.jupiter.api.BeforeAll", lines, format)
                addImport("org.junit.jupiter.api.BeforeEach", lines, format)
                addImport("org.junit.jupiter.api.Test", lines, format)
                addImport("static org.junit.jupiter.api.Assertions.*", lines, format)
            }
            if(format.isJUnit4()){
                addImport("org.junit.AfterClass", lines, format)
                addImport("org.junit.BeforeClass", lines, format)
                addImport("org.junit.Before", lines, format)
                addImport("org.junit.Test", lines, format)
                addImport("static org.junit.Assert.*", lines, format)
            }

            //TODO check if those are used
            addImport("io.restassured.RestAssured", lines, format)
            addImport("static io.restassured.RestAssured.given", lines, format)
            addImport("static org.evomaster.clientJava.controllerApi.EMTestUtils.*", lines, format)
            addImport("org.evomaster.clientJava.controller.SutHandler", lines, format)
            //addImport("static org.hamcrest.core.Is.is", lines, format)

            lines.addEmpty(2)

            classDescriptionComment(solution, format, lines)

            if(format.isJavaOrKotlin()){
                defineClass(format, name, lines)
                lines.addEmpty()
            }
        }


        private fun beforeAfterMethods(format: OutputFormat,
                                       controllerName: String,
                                       lines: Lines){

            //TODO check format

            lines.addEmpty()
            lines.add("private static SutHandler $controller = new $controllerName();")
            lines.add("private static String $baseUrlOfSut;")
            lines.addEmpty(2)

            when{
                format.isJUnit4() -> lines.add("@BeforeClass")
                format.isJUnit5() -> lines.add("@BeforeAll")
            }
            lines.add("public static void initClass() {")
            lines.indent()
            lines.add("baseUrlOfSut = $controller.startSut();")
            lines.add("assertNotNull(baseUrlOfSut);")
            lines.add("RestAssured.urlEncodingEnabled = false;")
            lines.deindent()
            lines.add("}")

            lines.addEmpty(2)

            when{
                format.isJUnit4() -> lines.add("@AfterClass")
                format.isJUnit5() -> lines.add("@AfterAll")
            }
            lines.add("public static void tearDown() {")
            lines.indent()
            lines.add("$controller.stopSut();")
            lines.deindent()
            lines.add("}")

            lines.addEmpty(2)

            when{
                format.isJUnit4() -> lines.add("@Before")
                format.isJUnit5() -> lines.add("@BeforeEach")
            }
            lines.add("public void initTest() {")
            lines.indent()
            lines.add("$controller.resetStateOfSUT();")
            lines.deindent()
            lines.add("}")

            lines.addEmpty(2)
        }


        private fun footer(lines: Lines){
            lines.addEmpty(2)
            lines.add("}")
        }

        private fun defineClass(format: OutputFormat, name: TestSuiteFileName, lines: Lines){

            lines.addEmpty()

            when{
                format.isJava() -> lines.append("public ")
                format.isKotlin() -> lines.append("internal ")
            }

            lines.append("class ${name.getClassName()} {")
        }

        private fun addImport(klass: Class<*>, lines: Lines, format: OutputFormat){
            addImport(klass.name, lines, format)
        }

        private fun addImport(klass: String, lines: Lines, format: OutputFormat){
            lines.add("import $klass")
            appendSemicolon(format, lines)
        }

        private fun appendSemicolon(format: OutputFormat, lines: Lines) {
            if(format.isJava()){
                lines.append(";")
            }
        }
    }
}
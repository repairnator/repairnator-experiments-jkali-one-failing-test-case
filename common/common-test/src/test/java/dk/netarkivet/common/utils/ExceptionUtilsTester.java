/*
 * #%L
 * Netarchivesuite - common - test
 * %%
 * Copyright (C) 2005 - 2018 The Royal Danish Library, 
 *             the National Library of France and the Austrian National Library.
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 2.1 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Lesser Public License for more details.
 * 
 * You should have received a copy of the GNU General Lesser Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/lgpl-2.1.html>.
 * #L%
 */
package dk.netarkivet.common.utils;

import static org.junit.Assert.assertEquals;

import java.sql.SQLException;

import org.junit.Test;

import dk.netarkivet.common.exceptions.ArgumentNotValid;
import dk.netarkivet.testutils.ClassAsserts;
import dk.netarkivet.testutils.StringAsserts;

/**
 * Unit tests for the ExceptionUtils class.
 */
public class ExceptionUtilsTester {

    /** Test that this utility class cannot be instantiated. */
    @Test
    public void testExceptionUtils() {
        ClassAsserts.assertPrivateConstructor(ExceptionUtils.class);
    }

    /**
     * Test that exceptions are printed including all stacktraces, and that nul exceptions are turned into 'null\n'.
     */
    @Test
    public void testGetStackTrace() throws Exception {
        assertEquals("Null exceptions should simply return 'null' and a linebreak", "null\n",
                ExceptionUtils.getStackTrace(null));
        String exceptionMessage = "Test";
        ArgumentNotValid cause = new ArgumentNotValid(exceptionMessage);
        ArgumentNotValid throwable = new ArgumentNotValid(exceptionMessage, cause);
        String result = ExceptionUtils.getStackTrace(throwable);
        StringAsserts.assertStringContains("Should contain the exception", ArgumentNotValid.class.getName(), result);
        StringAsserts.assertStringContains("Should contain the exception msg", exceptionMessage, result);
        StringAsserts.assertStringContains("Should contain the stacktrace", "testGetStackTrace", result);
        StringAsserts.assertStringContains("Should contain the stacktrace", "ExceptionUtilsTester", result);
        StringAsserts.assertStringContains("Should contain the cause", "Caused by:", result);
    }

    /**
     * this test confirms that the message generated by getSQLExceptionCause() contains all the information in the
     * original SQLException
     */
    @Test
    public void testGetSQLExceptionCause() {
        SQLException ex1 = new SQLException("reason1", "state1", 101);
        SQLException ex2 = new SQLException("reason2", "state2", 102);
        SQLException ex3 = new SQLException("reason3", "state3", 103);
        ex1.setNextException(ex2);
        ex2.setNextException(ex3);
        String message = dk.netarkivet.common.utils.ExceptionUtils.getSQLExceptionCause(ex1);
        StringAsserts.assertStringContains("Compound exception should contain " + "references to all three "
                        + "reasons, states, and codes", message, "reason1", "reason2", "reason3", "state1", "state2",
                "state3",
                "101", "102", "103");
    }

}

#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage printTable getSortingFunction);

sub help {
	return qq{
	Lists all required resource attributes. Resource id is required option.
	-----------------------------------------------------------------------
	Available options:
	--resourceId   | -r resource id
	--serviceId    | -s service id - return only atributes required by this service
	--orderById    | -i order by attribute id
	--orderByName  | -n order by attribute friendly name
	--batch        | -b batch
	--help         | -h help

	};
}

our $batch;
my ($resourceId, $serviceId, $sortingFunction);
GetOptions ("help|h" => sub {
		print help();
		exit 0;
	}, "batch|b"     => \$batch,
	"resourceId|r=i" => \$resourceId, "serviceId|s=i" => \$serviceId, "orderById|i" =>
	sub { $sortingFunction = getSortingFunction('getId') },
	"orderByName|n"  => sub {$sortingFunction = getSortingFunction("getFriendlyName", 1); } ) || die help();

unless (defined $sortingFunction) { $sortingFunction = getSortingFunction("getFriendlyName", 1); }

# Check options
unless (defined($resourceId)) { die "ERROR: resourceId is required \n";}

my $agent = Perun::Agent->new();
my $attributesAgent = $agent->getAttributesAgent;

my %params = ( resource => $resourceId );
if ($serviceId) { $params{service} = $serviceId; }

my @attributes = $attributesAgent->getRequiredAttributes( %params );

unless (@attributes) {
	printMessage "No required attributes found", $batch;
	exit 0;
}

printTable($sortingFunction, @attributes);

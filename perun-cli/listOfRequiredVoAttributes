#!/usr/bin/perl -w

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage printTable getSortingFunction);

sub help {
	return qq{
	Lists all required VO attributes. VO id or VO short name and Service id or name are required option.
	-----------------------------------------------------------------------
	Available options:
	--voId         | -v VO id
	--voShortName  | -V  VO short name
	--orderById    | -i order by attribute id
	--serviceId    | -s  service idetifier
	--serviceName  | -S  service name
	--orderByName  | -n order by attribute friendly name
	--batch        | -b batch
	--help         | -h help

	};
}

our $batch;
my ($voId, $voShortName, $serviceId, $serviceName, $sortingFunction);
GetOptions ("help|h"  => sub {
		print help();
		exit 0;
	}, "batch|b"      => \$batch,
	"voId|v=i"        => \$voId,
	"voShortName|V=s" => \$voShortName,
	"serviceId|s=i"   => \$serviceId,
	"serviceName|S=s" => \$serviceName,
	"orderById|i"     => sub { $sortingFunction = getSortingFunction('getId') },
	"orderByName|n"   => sub {$sortingFunction = getSortingFunction("getFriendlyName", 1); } ) || die help();

unless (defined $sortingFunction) { $sortingFunction = getSortingFunction("getFriendlyName", 1); }

# Check options
unless (defined($voId) or defined($voShortName)) { die "ERROR: voId  or voShotName is required \n";}
unless (defined($serviceId) or defined($serviceName)) { die "ERROR: serviceId or serviceName is required \n";}

my $agent = Perun::Agent->new();

unless (defined $voId) {
	my $vo = $agent->getVosAgent->getVoByShortName( shortName => $voShortName );
	$voId = $vo->getId;
}
unless (defined $serviceId) {
	my $service = $agent->getServicesAgent->getServiceByName( name => $serviceName );
	$serviceId = $service->getId;
}

my $attributesAgent = $agent->getAttributesAgent;
my @attributes = $attributesAgent->getRequiredAttributes( vo => $voId, service => $serviceId );

unless (@attributes) {
	printMessage "No required attributes found", $batch;
	exit 0;
}

printTable($sortingFunction, @attributes);

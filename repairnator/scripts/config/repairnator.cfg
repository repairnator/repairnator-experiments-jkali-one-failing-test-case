#### STANDARD CONFIGURATION ####

# Mandatory elements for all components of Repairnator

GITHUB_OAUTH=XXXX # Github personal token (https://github.com/settings/tokens)
HOME_REPAIR=$HOME/repairnator # The home directory for the following pathes

# Optional configuration for all components of Repairnator

GITHUB_USERNAME=repairnator # Name which will be used for committing
GITHUB_USEREMAIL=noreply@github.com # Email will be used for committing
MONGODB_HOST= # Mongo host to put data, should follow the following format: mongodb://user:password@domain:port
MONGODB_NAME= # Mongo database name to use
PUSH_URL= # Github repository URL to put data (data are pushed in branches), on the format: https://github.com/user/repo
SMTP_SERVER= # Smtp server to notify by email
NOTIFY_TO= # email adresses separated by comma (used for notifier, you must have specify an smtp server)
NOTIFY_ENDPROCESS=0 # If set to 1, the end of dockerpool and scanner will send a notification using smtp and notify_to information
RUN_ID_SUFFIX= # A suffix to add to the run id (useful to retrieve a specific run in serialized data).
REPAIR_TOOLS=NopolAllTests,AstorJMut,NPEFix # The available repair tools to use. Possible values (comma separated): NPEFix, AssertFixer, AstorJMut, AstorJKali, AstorJGenProg, NopolAllTests, NopolSingleTest, NopolTestExclusionStrategy

CREATE_PR=0 # set to 1 to create pull requests automatically when a patch is found

#### Scanner configuration

REPAIR_PROJECT_LIST_PATH=$HOME_REPAIR/project_list.txt # The list of project slug to scan
SCANNER_NB_HOURS=1 # Number of hours to inspect to get last builds (e.g. 4 will mean 4 hours in the past)
#LOOK_FROM_DATE= # Use with the following one, when wanting to scan a period of time (format: dd/MM/yyyy)
#LOOK_TO_DATE=

#### Docker pool configuration

NB_THREADS=4 # Number of concurrent docker container to run
DAY_TIMEOUT=1 # Global timeout to stop the docker execution

#### Realtime scanner configuration

WHITELIST_PATH=$HOME_REPAIR/whitelist.txt # Path of the whitelist of projects (mandatory but the file does not have to exist)
BLACKLIST_PATH=$HOME_REPAIR/blacklist.txt # Path of the blacklist (mandatory but the file does not have to exist)
DURATION=PT10m # Duration execution of the process on the ISO-8601 duration format: PWdTXhYmZs (e.g. PT1h for 1 hour)
JOB_SLEEP_TIME=10 # Sleep time in seconds for requesting /job endpoint in Travis
BUILD_SLEEP_TIME=10 # Sleep time in seconds for refreshing builds status
LIMIT_INSPECTED_BUILDS=100 # Maximum number of builds under inspection

#### Checkbranch configuration

CHECK_BRANCH_REPOSITORY= # Repository to use for check branches script
HUMAN_PATCH=0 # Test the human patch for check branches ?

##### ADVANCED CONFIGURATION

# Change the following configuration only if you know exactly what you're doing.

### Versions

SCANNER_VERSION=LATEST
DOCKERPOOL_VERSION=LATEST
REALTIME_VERSION=LATEST
PIPELINE_VERSION=latest
CHECKBRANCHES_VERSION=LATEST

### Docker tags
DOCKER_TAG=spirals/repairnator:$PIPELINE_VERSION # Tag of the docker image to use for pipeline
DOCKER_TAG_BEARS=spirals/bears:$PIPELINE_VERSION # Tag of the docker image to use for pipeline when running on Bears mode
DOCKER_CHECKBRANCHES_TAG=surli/checkbranches:latest # Tag of the docker image to use for checkbranches
DOCKER_CHECKBRANCHES_TAG_BEARS=fermadeiral/checkbranches:latest # Tag of the docker image to use for checkbranches when running on Bears mode

### Root pathes

ROOT_LOG_DIR=$HOME_REPAIR/logs/ # The directory will be created if it does not exist
ROOT_OUT_DIR=$HOME_REPAIR/out/ # The directory will be created if it does not exist
ROOT_BIN_DIR=$HOME_REPAIR/bin/ # The directory will be created if it does not exist

### Binary pathes
REPAIRNATOR_RUN_DIR=$ROOT_BIN_DIR`date "+%Y-%m-%d_%H%M"` # Where to put executables used (will be created automatically and deleted)
REPAIRNATOR_SCANNER_DEST_JAR=$REPAIRNATOR_RUN_DIR/repairnator-scanner.jar
REPAIRNATOR_DOCKERPOOL_DEST_JAR=$REPAIRNATOR_RUN_DIR/repairnator-dockerpool.jar
REPAIRNATOR_CHECKBRANCHES_DEST_JAR=$REPAIRNATOR_RUN_DIR/repairnator-checkbranches.jar
REPAIRNATOR_REALTIME_DEST_JAR=$REPAIRNATOR_RUN_DIR/repairnator-realtime.jar

### Other pathes
REPAIR_OUTPUT_PATH=$ROOT_OUT_DIR`date "+%Y-%m-%d_%H%M%S"` # Where to put output of repairnator
LOG_DIR=$ROOT_LOG_DIR`date "+%Y-%m-%d_%H%M%S"` # Log directory: it will contain several logs and serialized files
DOCKER_LOG_DIR=$LOG_DIR # Log directory for docker containers (most of the time, it should be the same as LOG_DIR, but sometimes if you use distant host, e.g. g5k you need to specify another value)

M2_HOME=$MAVEN_HOME # Path to the maven home: this value is only used when executing directly repairnator-pipeline.jar (outside a docker container)

### Switches

BEARS_MODE=0 # Set 1 to use the bears mode
BEARS_FIXER_MODE=both # Possible values are both, failing_passing, passing_passing or both
BEARS_DELIMITER=1 # When set to 1, the scanner writes different files for the different kind of statuses.
SKIP_LAUNCH_REPAIRNATOR=0 # If set to 1, skip the launch of docker pool: it will only launch the scanner. Note that this option might be overriden in some scripts.
CREATE_OUTPUT_DIR=0 # Use specifically for grid5000: allow to create a subdirectory to contain logs/serialization of docker containers
SKIP_DELETE=0 # Set to 1 to skip the deletion of docker containers

### Optional java arguments
JAVA_OPTS= # optional arguments for java such as Xmx

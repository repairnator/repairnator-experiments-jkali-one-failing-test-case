[INFO ] fr.inria.main.evolution.AstorMain.setupLogging(AstorMain.java:272) - Log file at: /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:982) - Source folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:1001) - Source Test folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/test/java]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:911) - Test retrieved from classes: 11
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/google/guava/guava/21.0/guava-21.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/java/dev/jna/jna/4.4.0/jna-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa/2.1.4/morfologik-fsa-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa-builders/2.1.4/morfologik-fsa-builders-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-speller/2.1.4/morfologik-speller-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-stemming/2.1.4/morfologik-stemming-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/carrotsearch/hppc/0.7.2/hppc-0.7.2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/loomchild/segment/2.0.0/segment-2.0.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/optimaize/languagedetector/language-detector/0.6/language-detector-0.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/arnx/jsonic/1.2.11/jsonic-1.2.11.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/slf4j/slf4j-api/1.7.6/slf4j-api-1.7.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/intellij/annotations/12.0/annotations-12.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-core/5.5.4/lucene-core-5.5.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-backward-codecs/5.5.4/lucene-backward-codecs-5.5.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/edu/berkeley/nlp/berkeleylm/1.1.2/berkeleylm-1.1.2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.4/jackson-databind-2.8.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.4/jackson-core-2.8.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/hunspell-native-libs/2.9/hunspell-native-libs-2.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT-tests.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:925) - Setting up the max to 173080 milliseconds (173 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:720) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/google/guava/guava/21.0/guava-21.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/java/dev/jna/jna/4.4.0/jna-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa/2.1.4/morfologik-fsa-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa-builders/2.1.4/morfologik-fsa-builders-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-speller/2.1.4/morfologik-speller-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-stemming/2.1.4/morfologik-stemming-2.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/carrotsearch/hppc/0.7.2/hppc-0.7.2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/loomchild/segment/2.0.0/segment-2.0.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/optimaize/languagedetector/language-detector/0.6/language-detector-0.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/arnx/jsonic/1.2.11/jsonic-1.2.11.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/slf4j/slf4j-api/1.7.6/slf4j-api-1.7.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/intellij/annotations/12.0/annotations-12.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-core/5.5.4/lucene-core-5.5.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-backward-codecs/5.5.4/lucene-backward-codecs-5.5.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/edu/berkeley/nlp/berkeleylm/1.1.2/berkeleylm-1.1.2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.4/jackson-databind-2.8.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.4/jackson-core-2.8.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/hunspell-native-libs/2.9/hunspell-native-libs-2.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT-tests.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:790) - Number of CtTypes created: 32
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:724) - 
---- Initial suspicious size: 172
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 172,  146
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 146
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 146, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:765) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /proj/nobackup/snic2020-10-10/astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= suppression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= /target/classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 173080
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= AstorJKali-repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= /target/test-classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 200
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.8.0_202
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= CoCoSpoon
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jkali
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= Europe/Paris
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/google/guava/guava/21.0/guava-21.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/java/dev/jna/jna/4.4.0/jna-4.4.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa/2.1.4/morfologik-fsa-2.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-fsa-builders/2.1.4/morfologik-fsa-builders-2.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-speller/2.1.4/morfologik-speller-2.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/carrot2/morfologik-stemming/2.1.4/morfologik-stemming-2.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/carrotsearch/hppc/0.7.2/hppc-0.7.2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/loomchild/segment/2.0.0/segment-2.0.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/optimaize/languagedetector/language-detector/0.6/language-detector-0.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/net/arnx/jsonic/1.2.11/jsonic-1.2.11.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/slf4j/slf4j-api/1.7.6/slf4j-api-1.7.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/intellij/annotations/12.0/annotations-12.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-core/5.5.4/lucene-core-5.5.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/apache/lucene/lucene-backward-codecs/5.5.4/lucene-backward-codecs-5.5.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/edu/berkeley/nlp/berkeleylm/1.1.2/berkeleylm-1.1.2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.4/jackson-databind-2.8.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.4/jackson-core-2.8.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/javax/xml/bind/jaxb-api/2.3.0/jaxb-api-2.3.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/hunspell-native-libs/2.9/hunspell-native-libs-2.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/languagetool/languagetool-core/4.0-SNAPSHOT/languagetool-core-4.0-SNAPSHOT-tests.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logfilepath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= /scratch/dginelli/workspace/repairnator-repairnator-experiments-languagetool-org-languagetool-284572053-20171007-095750_bugonly-firstCommit/languagetool-language-modules/pt
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 155, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.languagetool.AnalyzedToken taggerToken : taggerTokens) { 	final java.lang.String posTag = t[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 144, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return additionalTaggedTokens ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 143, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerWord)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerW[...] ` -topatch--> `if (true) { 	additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerWord)); [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerW[...] ` -topatch--> `if (false) { 	additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerWord));[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, "RM", lowerW[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 140, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `if (true) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagger.ADJ_PART[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 140, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `if (false) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagger.ADJ_PAR[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 140, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 161, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `additionalTaggedTokens.add(new org.languagetool.AnalyzedToken(word, posTag, lemma)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	java.lang.String lemma = matcher.group(1).toLowerCase().concat(taggerToken.getLe[...] ` -topatch--> `if (true) { 	java.lang.String lemma = matcher.group(1).toLowerCase().concat(taggerToken.getLemma());[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	java.lang.String lemma = matcher.group(1).toLowerCase().concat(taggerToken.getLe[...] ` -topatch--> `if (false) { 	java.lang.String lemma = matcher.group(1).toLowerCase().concat(taggerToken.getLemma())[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	java.lang.String lemma = matcher.group(1).toLowerCase().concat(taggerToken.getLe[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `if (true) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagger.VERB.mat[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `if (false) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagger.VERB.ma[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 157, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (posTag != null) { 	final java.util.regex.Matcher m = org.languagetool.tagging.pt.PortugueseTagge[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 138, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.languagetool.AnalyzedToken taggerToken : taggerTokens) { 	final java.lang.String posTag = t[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 137, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `taggerTokens = asAnalyzedTokenList(lowerWord, dictLookup.lookup(possibleAdj)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 154, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `taggerTokens = asAnalyzedTokenList(possibleVerb, dictLookup.lookup(possibleVerb)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 165, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return additionalTaggedTokens ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 102, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `disambiguator = new org.languagetool.tagging.disambiguation.pt.PortugueseHybridDisambiguator() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 91, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `tagger = new org.languagetool.tagging.pt.PortugueseTagger() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (synthesizer == null) { 	synthesizer = new org.languagetool.synthesis.pt.PortugueseSynthesizer();[...] ` -topatch--> `if (true) { 	this.synthesizer = new org.languagetool.synthesis.pt.PortugueseSynthesizer(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (synthesizer == null) { 	synthesizer = new org.languagetool.synthesis.pt.PortugueseSynthesizer();[...] ` -topatch--> `if (false) { 	this.synthesizer = new org.languagetool.synthesis.pt.PortugueseSynthesizer(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (synthesizer == null) { 	synthesizer = new org.languagetool.synthesis.pt.PortugueseSynthesizer();[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (disambiguator == null) { 	disambiguator = new org.languagetool.tagging.disambiguation.pt.Portugu[...] ` -topatch--> `if (true) { 	this.disambiguator = new org.languagetool.tagging.disambiguation.pt.PortugueseHybridDis[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (disambiguator == null) { 	disambiguator = new org.languagetool.tagging.disambiguation.pt.Portugu[...] ` -topatch--> `if (false) { 	this.disambiguator = new org.languagetool.tagging.disambiguation.pt.PortugueseHybridDi[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (disambiguator == null) { 	disambiguator = new org.languagetool.tagging.disambiguation.pt.Portugu[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (tagger == null) { 	tagger = new org.languagetool.tagging.pt.PortugueseTagger(); } ` -topatch--> `if (true) { 	this.tagger = new org.languagetool.tagging.pt.PortugueseTagger(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (tagger == null) { 	tagger = new org.languagetool.tagging.pt.PortugueseTagger(); } ` -topatch--> `if (false) { 	this.tagger = new org.languagetool.tagging.pt.PortugueseTagger(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (tagger == null) { 	tagger = new org.languagetool.tagging.pt.PortugueseTagger(); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	final java.lang.String possibleVerb = matcher.group(2).toLowerCase(); 	jav[...] ` -topatch--> `if (true) { 	final java.lang.String possibleVerb = matcher.group(2).toLowerCase(); 	java.util.List<o[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	final java.lang.String possibleVerb = matcher.group(2).toLowerCase(); 	jav[...] ` -topatch--> `if (false) { 	final java.lang.String possibleVerb = matcher.group(2).toLowerCase(); 	java.util.List<[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	final java.lang.String possibleVerb = matcher.group(2).toLowerCase(); 	jav[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 111, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `l.add(new org.languagetool.AnalyzedToken(word, null, null)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 133, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.endsWith("mente")) { 	final java.lang.String lowerWord = word.toLowerCase(conversionLocale)[...] ` -topatch--> `if (true) { 	final java.lang.String lowerWord = word.toLowerCase(this.conversionLocale); 	final java[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 133, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.endsWith("mente")) { 	final java.lang.String lowerWord = word.toLowerCase(conversionLocale)[...] ` -topatch--> `if (false) { 	final java.lang.String lowerWord = word.toLowerCase(this.conversionLocale); 	final jav[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 133, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (word.endsWith("mente")) { 	final java.lang.String lowerWord = word.toLowerCase(conversionLocale)[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 107, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addTokens(additionalTags(word, dictLookup), l) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 113, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordTokenizer() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (wordTokenizer == null) { 	wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordToken[...] ` -topatch--> `if (true) { 	this.wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordTokenizer(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (wordTokenizer == null) { 	wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordToken[...] ` -topatch--> `if (false) { 	this.wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordTokenizer(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.language.Portuguese line: 112, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (wordTokenizer == null) { 	wordTokenizer = new org.languagetool.tokenizers.pt.PortugueseWordToken[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWikipediaRule line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Grammar) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWikipediaRule line: 59, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>mais também</marker>"),  org.languageto[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 173, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `l.add(at) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 172, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.languagetool.AnalyzedToken at : taggedTokens) { 	l.add(at); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordCoherencyRule line: 45, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("Foi um período duradouro. Tão marcante e <marke[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordCoherencyRule line: 44, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Inconsistency) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (taggedTokens != null) { 	for (org.languagetool.AnalyzedToken at : taggedTokens) { 		l.add(at); 	[...] ` -topatch--> `if (true) { 	for (org.languagetool.AnalyzedToken at : taggedTokens) { 		l.add(at); 	} }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (taggedTokens != null) { 	for (org.languagetool.AnalyzedToken at : taggedTokens) { 		l.add(at); 	[...] ` -topatch--> `if (false) { 	for (org.languagetool.AnalyzedToken at : taggedTokens) { 		l.add(at); 	} }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (taggedTokens != null) { 	for (org.languagetool.AnalyzedToken at : taggedTokens) { 		l.add(at); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 122, pointed element: CtOperatorAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `pos += word.length() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 121, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tokenReadings.add(atr) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordRepeatBeginningRule line: 77, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Style) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (containsTypewriterApostrophe) { 	java.util.List<org.languagetool.chunking.ChunkTag> listChunkTag[...] ` -topatch--> `if (true) { 	java.util.List<org.languagetool.chunking.ChunkTag> listChunkTags = new java.util.ArrayL[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (containsTypewriterApostrophe) { 	java.util.List<org.languagetool.chunking.ChunkTag> listChunkTag[...] ` -topatch--> `if (false) { 	java.util.List<org.languagetool.chunking.ChunkTag> listChunkTags = new java.util.Array[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (containsTypewriterApostrophe) { 	java.util.List<org.languagetool.chunking.ChunkTag> listChunkTag[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordRepeatBeginningRule line: 78, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("Além disso, a rua é quase completamente residên[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWeaselWordsRule line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Style) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 110, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty()) { 	l.add(new org.languagetool.AnalyzedToken(word, null, null)); } ` -topatch--> `if (true) { 	l.add(new org.languagetool.AnalyzedToken(word, null, null)); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 110, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty()) { 	l.add(new org.languagetool.AnalyzedToken(word, null, null)); } ` -topatch--> `if (false) { 	l.add(new org.languagetool.AnalyzedToken(word, null, null)); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 110, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty()) { 	l.add(new org.languagetool.AnalyzedToken(word, null, null)); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWeaselWordsRule line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>Diz-se</marker> que programas gratuitos[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 88, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `word = word.replace("’", "'") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseAccentuationCheckRule line: 90, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setDefaultOff() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.contains("'")) { 	containsTypewriterApostrophe = true; } ` -topatch--> `if (true) { 	containsTypewriterApostrophe = true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.contains("'")) { 	containsTypewriterApostrophe = true; } ` -topatch--> `if (false) { 	containsTypewriterApostrophe = true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (word.contains("'")) { 	containsTypewriterApostrophe = true; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseAccentuationCheckRule line: 91, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Misspelling) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.length() > 1) { 	if (word.contains("'")) { 		containsTypewriterApostrophe = true; 	} 	word [...] ` -topatch--> `if (true) { 	if (word.contains("'")) { 		containsTypewriterApostrophe = true; 	} 	word = word.replac[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (word.length() > 1) { 	if (word.contains("'")) { 		containsTypewriterApostrophe = true; 	} 	word [...] ` -topatch--> `if (false) { 	if (word.contains("'")) { 		containsTypewriterApostrophe = true; 	} 	word = word.repla[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 84, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (word.length() > 1) { 	if (word.contains("'")) { 		containsTypewriterApostrophe = true; 	} 	word [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 80, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String word : sentenceTokens) {   	boolean containsTypewriterApostrophe = false; 	if [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty() && (!isMixedCase)) { 	addTokens(additionalTags(word, dictLookup), l); } ` -topatch--> `if (true) { 	addTokens(additionalTags(word, dictLookup), l); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty() && (!isMixedCase)) { 	addTokens(additionalTags(word, dictLookup), l); } ` -topatch--> `if (false) { 	addTokens(additionalTags(word, dictLookup), l); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (l.isEmpty() && (!isMixedCase)) { 	addTokens(additionalTags(word, dictLookup), l); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 102, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addTokens(lowerTaggerTokens, l) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!isLowercase) && (!isMixedCase)) { 	java.util.List<org.languagetool.AnalyzedToken> lowerTaggerT[...] ` -topatch--> `if (true) { 	java.util.List<org.languagetool.AnalyzedToken> lowerTaggerTokens = asAnalyzedTokenListF[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!isLowercase) && (!isMixedCase)) { 	java.util.List<org.languagetool.AnalyzedToken> lowerTaggerT[...] ` -topatch--> `if (false) { 	java.util.List<org.languagetool.AnalyzedToken> lowerTaggerTokens = asAnalyzedTokenList[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((!isLowercase) && (!isMixedCase)) { 	java.util.List<org.languagetool.AnalyzedToken> lowerTaggerT[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tagging.pt.PortugueseTagger line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addTokens(taggerTokens, l) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 97, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DOTTED_NUMBERS_PATTERN.matcher(text).r[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 96, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN.matcher(text).replaceAll([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseClicheRule line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>quente como uma fornalha</marker>"),  o[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseClicheRule line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Style) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 98, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DOTTED_ORDINALS_PATTERN.matcher(text).[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 89, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COMMA_PATTERN.matcher(text).re[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordRepeatRule line: 48, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("Este <marker>é é</marker> apenas uma frase de e[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordRepeatRule line: 47, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Duplication) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PostReformPortugueseCompoundRule line: 47, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Grammar) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 117, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBERS_PATTERN.matcher(text).re[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordinessRule line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>Raramente é o caso em que acontece</mar[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWordinessRule line: 56, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Style) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWrongWordInContextRule line: 37, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Grammar) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseWrongWordInContextRule line: 38, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("O acidente <marker>infringiu</marker> grandes d[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseRedundancyRule line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>duna de areia</marker>"),  org.language[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseReplaceRule line: 56, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.LocaleViolation) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseReplaceRule line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>device</marker>"),  org.languagetool.ru[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseRedundancyRule line: 56, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.Style) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseReplaceRule2 line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLocQualityIssueType(org.languagetool.rules.ITSIssueType.LocaleViolation) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.rules.pt.PortugueseReplaceRule2 line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addExamplePair(org.languagetool.rules.Example.wrong("<marker>curriculum vitae</marker>"),  org.langu[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (spacedDecimalMatcher.find()) { 	java.lang.StringBuffer sb = new java.lang.StringBuffer(); 	do { [...] ` -topatch--> `if (true) { 	java.lang.StringBuffer sb = new java.lang.StringBuffer(); 	do { 		java.lang.String spli[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (spacedDecimalMatcher.find()) { 	java.lang.StringBuffer sb = new java.lang.StringBuffer(); 	do { [...] ` -topatch--> `if (false) { 	java.lang.StringBuffer sb = new java.lang.StringBuffer(); 	do { 		java.lang.String spl[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (spacedDecimalMatcher.find()) { 	java.lang.StringBuffer sb = new java.lang.StringBuffer(); 	do { [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dotInsideSentence) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN[...] ` -topatch--> `if (true) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN.matcher(text[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dotInsideSentence) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN[...] ` -topatch--> `if (false) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN.matcher(tex[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dotInsideSentence) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DATE_PATTERN[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(",")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COM[...] ` -topatch--> `if (true) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COMMA_PATTERN.mat[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(",")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COM[...] ` -topatch--> `if (false) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COMMA_PATTERN.ma[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(",")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COM[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 128, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tokenList.add(token) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 125, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `token = token.replace(org.languagetool.tokenizers.pt.PortugueseWordTokenizer.NON_BREAKING_SPACE_SUBS[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 124, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `token = token.replace(org.languagetool.tokenizers.pt.PortugueseWordTokenizer.NON_BREAKING_COLON_SUBS[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 127, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `token = token.replace(org.languagetool.tokenizers.pt.PortugueseWordTokenizer.NON_BREAKING_DOT_SUBST,[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 121, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (st.hasMoreElements()) { 	java.lang.String token = st.nextToken(); 	token = token.replace(org.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 123, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `token = token.replace(org.languagetool.tokenizers.pt.PortugueseWordTokenizer.DECIMAL_COMMA_SUBST, ',[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(":")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBE[...] ` -topatch--> `if (true) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBERS_PATTERN.mat[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(":")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBE[...] ` -topatch--> `if (false) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBERS_PATTERN.ma[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.languagetool.tokenizers.pt.PortugueseWordTokenizer line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (text.contains(":")) { 	text = org.languagetool.tokenizers.pt.PortugueseWordTokenizer.COLON_NUMBE[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:171) - Time Repair Loop (s): 1472.306
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:173) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:255) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:265) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:190) - Time Total(s): 1509.28

[INFO ] fr.inria.main.evolution.AstorMain.setupLogging(AstorMain.java:272) - Log file at: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:982) - Source folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:1001) - Source Test folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/test/java]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:911) - Test retrieved from classes: 55
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.2.0-SNAPSHOT/cxx-squid-1.2.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.2.0-SNAPSHOT/cxx-checks-1.2.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-6/wagon-provider-api-1.0-beta-6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant/1.10.4/ant-1.10.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant-launcher/1.10.4/ant-launcher-1.10.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/jdom/jdom2/2.0.6/jdom2-2.0.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/mockito/mockito-core/2.19.0/mockito-core-2.19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy/1.8.10/byte-buddy-1.8.10.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.8.10/byte-buddy-agent-1.8.10.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-io/commons-io/2.6/commons-io-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/assertj/assertj-core/3.10.0/assertj-core-3.10.0.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:925) - Setting up the max to 641620 milliseconds (641 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:720) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.2.0-SNAPSHOT/cxx-squid-1.2.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.2.0-SNAPSHOT/cxx-checks-1.2.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-6/wagon-provider-api-1.0-beta-6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant/1.10.4/ant-1.10.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant-launcher/1.10.4/ant-launcher-1.10.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/jdom/jdom2/2.0.6/jdom2-2.0.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/mockito/mockito-core/2.19.0/mockito-core-2.19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy/1.8.10/byte-buddy-1.8.10.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.8.10/byte-buddy-agent-1.8.10.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-io/commons-io/2.6/commons-io-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/assertj/assertj-core/3.10.0/assertj-core-3.10.0.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:790) - Number of CtTypes created: 80
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:724) - 
---- Initial suspicious size: 812
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=107, susp=0.2672612419124244]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=82, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=74, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=72, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=73, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=78, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=71, susp=0.23904572186687872]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 812,  752
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 752
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 752, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:765) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /proj/nobackup/snic2020-10-10/astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= suppression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= /target/classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 641620
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= AstorJKali-repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= /target/test-classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 200
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.8.0_202
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= CoCoSpoon
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jkali
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= Europe/Paris
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.2.0-SNAPSHOT/cxx-squid-1.2.0-SNAPSHOT.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.2.0-SNAPSHOT/cxx-checks-1.2.0-SNAPSHOT.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-project/2.2.1/maven-project-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-settings/2.2.1/maven-settings-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-profile/2.2.1/maven-profile-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-model/2.2.1/maven-model-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.2.1/maven-artifact-manager-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.2.1/maven-repository-metadata-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-6/wagon-provider-api-1.0-beta-6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/backport-util-concurrent/backport-util-concurrent/3.1/backport-util-concurrent-3.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.2.1/maven-plugin-registry-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-interpolation/1.11/plexus-interpolation-1.11.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.15/plexus-utils-1.5.15.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/maven/maven-artifact/2.2.1/maven-artifact-2.2.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant/1.10.4/ant-1.10.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/apache/ant/ant-launcher/1.10.4/ant-launcher-1.10.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/jdom/jdom2/2.0.6/jdom2-2.0.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/mockito/mockito-core/2.19.0/mockito-core-2.19.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy/1.8.10/byte-buddy-1.8.10.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.8.10/byte-buddy-agent-1.8.10.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-io/commons-io/2.6/commons-io-2.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/.m2/org/assertj/assertj-core/3.10.0/assertj-core-3.10.0.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logfilepath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-397733945-20180628-125344-firstCommit/cxx-sensors
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 59, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return new java.io.File(filename).getCanonicalPath() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `if (true) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename); } else {  	fil[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `if (false) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename); } else {  	fi[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 78, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath((baseDir + java.io.File.separator) + f[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XmlParserHelper line: 51, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new java.lang.IllegalStateException(e) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XmlParserHelper line: 45, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 282, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `notFoundFiles.add(normalPath) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 281, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile == null) { 	notFoundFiles.add(normalPath); } ` -topatch--> `if (true) { 	this.notFoundFiles.add(normalPath); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 281, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile == null) { 	notFoundFiles.add(normalPath); } ` -topatch--> `if (false) { 	this.notFoundFiles.add(normalPath); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 281, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile == null) { 	notFoundFiles.add(normalPath); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 276, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath == null) || notFoundFiles.contains(normalPath)) { 	return null; } ` -topatch--> `if (true) { 	return null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 276, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath == null) || notFoundFiles.contains(normalPath)) { 	return null; } ` -topatch--> `if (false) { 	return null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 276, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath == null) || notFoundFiles.contains(normalPath)) { 	return null; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 324, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (newIssueLocation != null) { 	newIssueLocations.add(newIssueLocation); } ` -topatch--> `if (true) { 	newIssueLocations.add(newIssueLocation); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 324, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (newIssueLocation != null) { 	newIssueLocations.add(newIssueLocation); } ` -topatch--> `if (false) { 	newIssueLocations.add(newIssueLocation); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 324, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (newIssueLocation != null) { 	newIssueLocations.add(newIssueLocation); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 299, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 298, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find the file '{}', skipping violations[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 290, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	int lines = inputFile.lines(); 	int lineNr = java.lang.Integer.max(1, getL[...] ` -topatch--> `if (true) { 	int lines = inputFile.lines(); 	int lineNr = java.lang.Integer.max(1, getLineAsInt(loca[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 290, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	int lines = inputFile.lines(); 	int lineNr = java.lang.Integer.max(1, getL[...] ` -topatch--> `if (false) { 	int lines = inputFile.lines(); 	int lineNr = java.lang.Integer.max(1, getLineAsInt(loc[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 290, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	int lines = inputFile.lines(); 	int lineNr = java.lang.Integer.max(1, getL[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 222, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String found : includeFiles) { 	reports.add(new java.io.File(found)); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 223, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `reports.add(new java.io.File(found)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 229, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Parser will parse '{}' report files", reports.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 269, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveViolation(sensorContext, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!newIssueLocations.isEmpty()) { 	try { 		newIssue.at(newIssueLocations.get(0)); 		for (int i = 1[...] ` -topatch--> `if (true) { 	try { 		newIssue.at(newIssueLocations.get(0)); 		for (int i = 1; i < newIssueLocations.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!newIssueLocations.isEmpty()) { 	try { 		newIssue.at(newIssueLocations.get(0)); 		for (int i = 1[...] ` -topatch--> `if (false) { 	try { 		newIssue.at(newIssueLocations.get(0)); 		for (int i = 1; i < newIssueLocations[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 333, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!newIssueLocations.isEmpty()) { 	try { 		newIssue.at(newIssueLocations.get(0)); 		for (int i = 1[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 321, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((location.getFile() != null) && (!location.getFile().isEmpty())) { 	org.sonar.api.batch.sensor.i[...] ` -topatch--> `if (true) { 	org.sonar.api.batch.sensor.issue.NewIssueLocation newIssueLocation = createNewIssueLoca[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 321, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((location.getFile() != null) && (!location.getFile().isEmpty())) { 	org.sonar.api.batch.sensor.i[...] ` -topatch--> `if (false) { 	org.sonar.api.batch.sensor.issue.NewIssueLocation newIssueLocation = createNewIssueLoc[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 321, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((location.getFile() != null) && (!location.getFile().isEmpty())) { 	org.sonar.api.batch.sensor.i[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 320, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.utils.CxxReportLocation location : issue.getLocations()) { 	if ((location[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 181, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return normalizedPath ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `if (true) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `if (false) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 180, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 179, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `normalizedPath = org.apache.commons.io.FilenameUtils.normalize((baseDir + java.io.File.separator) + [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 268, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(issue)) { 	saveViolation(sensorContext, issue); } ` -topatch--> `if (true) { 	saveViolation(sensorContext, issue); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 268, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(issue)) { 	saveViolation(sensorContext, issue); } ` -topatch--> `if (false) { 	saveViolation(sensorContext, issue); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 268, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(issue)) { 	saveViolation(sensorContext, issue); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 248, pointed element: CtContinueImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtContinueImpl) `continue ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 247, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `includes.add(normalizedPath) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 221, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Scanner found '{}' report files", includeFiles[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 218, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `directoryScanner.scan() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 217, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `directoryScanner.setIncludes(includes.toArray(new java.lang.String[includes.size()])) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Scanner uses report paths: '{}'"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Scanner uses report paths: '{}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 212, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 174, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `if (true) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 174, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `if (false) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 174, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 255, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Normalized report includes to '{[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 255, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Normalized report includes to '[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 255, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 226, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find a report for '{}={}'"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 226, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find a report for '{}={}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 226, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `if (true) { 	includes.add(normalizedPath); 	continue; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `if (false) { 	includes.add(normalizedPath); 	continue; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 243, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String reportPath : reportPaths) {  	java.lang.String normalizedPath = org.sonar.cxx.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("{} processed = {}", org.sonar.cx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("{} processed = {}", org.sonar.c[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 142, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 141, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `processReport(context, report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `executeReport(context, report, prevViolationsCount) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 42, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addLocation(file, line, info) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 40, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.ruleId = ruleId ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 41, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.locations = new java.util.ArrayList<>() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 39, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.ruleRepoKey = ruleRepoKey ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 46, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `locations.add(new org.sonar.cxx.sensors.utils.CxxReportLocation(file, line, info)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 277, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 170, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `if (true) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.normalize(filen[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 170, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `if (false) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.normalize(file[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 170, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 36, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 37, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.line = line ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 38, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.info = info ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 206, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined report path value for k[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 206, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined report path value for [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 206, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 66, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.language = language ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 201, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `if (true) { 	return reports; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 201, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `if (false) { 	return reports; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 201, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.warn("Cannot find the file '{}', i[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.warn("Cannot find the file '{}', [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 198, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Cannot find the file '{}', [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 198, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Cannot find the file '{}',[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 198, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `if (true) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCoverage().on[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `if (false) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCoverage().o[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 176, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("save coverage measure for f[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 176, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("save coverage measure for [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 176, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 174, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fileSystem().bas[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `if (true) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fil[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `if (false) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fi[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 171, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.util.Map.Entry<java.lang.String, org.sonar.cxx.sensors.coverage.CoverageMeasures> entry : [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Processing report '{}'", report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 97, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.io.File report : reports) { 	int prevViolationsCount = violationsPerModuleCount; 	org.sona[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `if (true) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer> entry : t[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `if (false) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer> entry : [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 103, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("{} processed = {}", org.sonar.cxx.sensors.util[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 94, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `violationsPerFileCount.clear() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 91, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Searching reports by relative path with basedi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 95, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `violationsPerModuleCount = 0 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 116, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.io.File report : reports) { 	if (!cacheCov.containsKey(report.getAbsolutePath())) { 		for [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `if (true) { 	for (org.sonar.cxx.sensors.coverage.CoverageParser parser : this.parsers) { 		try { 			[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `if (false) { 	for (org.sonar.cxx.sensors.coverage.CoverageParser parser : this.parsers) { 		try { 		[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 38, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser.LOG.info("Parsing the XUnit Test Resul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 49, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 48, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 108, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveMeasures(context, coverageMeasures) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 107, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coverageMeasures = processReports(context, reports, this.cache.unitCoverageCache()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 102, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Parsing unit test coverage [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 102, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Parsing unit test coverage[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 102, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 101, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parse(inf.rootElementCursor(input)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 87, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parse(input) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 133, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `streamHandler.stream(rootCursor) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `if (true) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 		org.sona[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `if (false) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 		org.son[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Coverage BaseDir '{}' ", context.fileSyst[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 95, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Searching for coverage reports '{}'", jav[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 93, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Searching coverage reports by path with b[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 49, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 48, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 38, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser.LOG.info("Parsing the NUnit Test Resul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 53, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(streamHandler, false) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 70, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 68, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.BullseyeParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 69, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.VisualStudioParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 66, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.cache = cache ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 67, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.CoberturaParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `if (true) { 	com.ctc.wstx.stax.WstxInputFactory wstxInputfactory = ((com.ctc.wstx.stax.WstxInputFact[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `if (false) { 	com.ctc.wstx.stax.WstxInputFactory wstxInputfactory = ((com.ctc.wstx.stax.WstxInputFac[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 65, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.streamHandler = streamHandler ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 72, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.IS_VALIDATING, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 69, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `wstxInputfactory.configureForLowMemUsage() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 70, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `wstxInputfactory.getConfig().setUndeclaredEntityResolver(new org.sonar.cxx.sensors.utils.StaxParser.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 75, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.isoControlCharsAwareParser = isoControlCharsAwareParser ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 76, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `inf = new org.codehaus.staxmate.SMInputFactory(xmlFactory) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 73, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.SUPPORT_DTD, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 74, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 135, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.getStreamReader().closeCompletely() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 51, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.JsonCompilationDatabase.LOG.debug("Parsing 'JSON Compilation Database' f[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 54, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `mapper.disable(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 55, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `mapper.enable(com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 136, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `measuresTotal = cacheCov.get(report.getAbsolutePath()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 137, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Processing report '{}' skip[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 137, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Processing report '{}' ski[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 137, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 133, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 127, pointed element: CtBreakImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtBreakImpl) `break ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 125, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `cacheCov.put(report.getAbsolutePath(), measuresTotal) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 120, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.parseCoverageReport(parser, context, report, measur[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("cached measures for '{}' : [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("cached measures for '{}' :[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 166, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Added coverage report '{}' (parsed by: {}[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 165, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `measuresTotal.putAll(measuresForReport) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 50, pointed element: CtOperatorAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `this.hits += hits ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 34, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.line = line ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 47, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasure.setHits(hits) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 45, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `lineMeasures.computeIfAbsent(lineId, ( v) -> new org.sonar.cxx.sensors.coverage.CoverageMeasure(line[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 117, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `if (true) { 	parser = this.parsers.get(parserValue.get()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `if (false) { 	parser = this.parsers.get(parserValue.get()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerSensor.LOG.info("C-Compiler parser: '{}'", parserValue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 98, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parser = parsers.get(parserValue.get()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 44, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser.LOG.info("Parsing the Visual St[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 121, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 118, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.compiler.CompilerParser.Warning w : warnings) { 	if (org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 119, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportIssue issue = new org.sonar.cxx.sensors.utils.CxxR[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 119, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportIssue issue = new org.sonar.cxx.sensors.utils.Cxx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 119, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 59, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 58, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 168, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 139, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ((((!file.isEmpty()) && (id != null)) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 64, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addCompilerParser(new org.sonar.cxx.sensors.compiler.CxxCompilerGccParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 63, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addCompilerParser(new org.sonar.cxx.sensors.compiler.CxxCompilerVcParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 85, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.put(parser.key(), parser) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 117, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.processReport(context, report, reportCharset, reportRegEx, warnings) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 115, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerSensor.LOG.info("Scanner '{}' initialized with report '{}'[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `if (true) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `if (false) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 157, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `newKey = "M" + misraRule ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Remap MISRA rule {} to key {}",[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Remap MISRA rule {} to key {}"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 162, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return newKey ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `if (true) { 	return def; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `if (false) { 	return def; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 135, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `if (true) {  	return (((id != null) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 135, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `if (false) {  	return (((id != null) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 135, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `if (true) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA 2004") || msg.contains("MISR[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `if (false) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA 2004") || msg.contains("MIS[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 105, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `if (true) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  	msg.contains("MI[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 105, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `if (false) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  	msg.contains("M[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 105, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `if (true)  { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE); } else { 	if (msg.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `if (false)  { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE); } else { 	if (msg[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 54, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coveredConditions = coveredConditions ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 55, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.conditions = totalConditions ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 51, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `lineMeasures.computeIfAbsent(lineId, ( v) -> new org.sonar.cxx.sensors.coverage.CoverageMeasure(line[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 53, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasure.setConditions(totalConditions, coveredConditions) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 75, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `warnings.add(new org.sonar.cxx.sensors.compiler.CompilerParser.Warning(filename, line, id, msg)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	return m.group(1); } ` -topatch--> `if (true) { 	return m.group(1); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	return m.group(1); } ` -topatch--> `if (false) { 	return m.group(1); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.matches()) { 	return m.group(1); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 85, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.info("Parsing 'Visual C++' format ({})", char[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 89, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.info("Using pattern : '{}'", p) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 91, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (scanner.findWithinHorizon(p, 0) != null) { 	matchres = scanner.match(); 	java.lang.String fil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 92, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matchres = scanner.match() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.debug("Scanner-matches file='{}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.debug("Scanner-matches file='{}[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 56, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `baseDir = context.fileSystem().baseDir().getAbsolutePath() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 55, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.debug("Parsing 'Cobertura' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 132, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `if (true) { 	measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 132, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `if (false) { 	measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 132, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 118, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.coverage.CoverageParser parser : parsers) { 	try { 		org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 161, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `if (true) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("Coverage report " + repo[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 161, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `if (false) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("Coverage report " + rep[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 161, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 156, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.processReport(context, report, measuresForReport) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Parsing 'PC-Lint' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 91, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 98, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String file = errorCursor.getAttrValue("file"); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `if (true) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if (isMisra20[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `if (false) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if (isMisra2[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 110, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 66, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectPackageMeasures(baseDir, rootCursor.descendant[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 65, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 68, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `packageParser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 72, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (source.getNext() != null) { 	java.lang.String sourceValue = source.getElemStringValue().trim([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 84, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (pack.getNext() != null) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileMeasures[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 60, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `readBaseDir(rootCursor.descendantElementCursor("source")) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 59, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 62, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sourceParser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.LOG.debug("Parsing 'Bullseye' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 129, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Report is empty {}", e) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 126, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setHits(startLine, covered) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 125, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (startLine <= endLine) { 	builder.setHits(startLine, covered); 	startLine++; }  ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 122, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lastSourceId = sourceId ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 118, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 119, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(sourceId, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 116, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = coverageData.get(sourceId) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (true) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put(s[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (false) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put([...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `if (true) { 	builder = coverageData.get(sourceId); 	if (builder == null) { 		builder = org.sonar.cxx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `if (false) { 	builder = coverageData.get(sourceId); 	if (builder == null) { 		builder = org.sonar.cx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 108, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (range.getNext() != null) { 	java.lang.String sourceId = range.getAttrValue("source_id"); 	int[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 66, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.handleModuleItems(module, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 49, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.LOG.debug("Parsing 'Visual Studio' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectRangeMeasures(function, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 97, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (function.getNext() != null) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectRange[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 90, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(sourceFile.getAttrValue("path"), builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 86, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (sourceFile.getNext() != null) { 	java.lang.String id = sourceFile.getAttrValue("id"); 	org.so[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 78, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 76, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, cove[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, cov[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, covera[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, cover[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 73, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (child.getNext() != null) { 	java.lang.String name = child.getLocalName(); 	if ("functions".eq[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 151, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxUtils.validateRecovery(e, language) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 92, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parseFileUnit(coverageData, headerMatcher) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 79, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `headerMatcher.reset(scanner.next()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 107, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `normalFilename = org.apache.commons.io.FilenameUtils.normalize("./" + filename) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (new java.io.File(filename).isAbsolute()) { 	normalFilename = org.apache.commons.io.FilenameUtils[...] ` -topatch--> `if (true) { 	normalFilename = org.apache.commons.io.FilenameUtils.normalize(filename); } else { 	nor[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (new java.io.File(filename).isAbsolute()) { 	normalFilename = org.apache.commons.io.FilenameUtils[...] ` -topatch--> `if (false) { 	normalFilename = org.apache.commons.io.FilenameUtils.normalize(filename); } else { 	no[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (new java.io.File(filename).isAbsolute()) { 	normalFilename = org.apache.commons.io.FilenameUtils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.LOG.debug("Parsing file section...") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 124, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.LOG.debug("Found line section...") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 120, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(file.getPath(), coverageMeasures) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 118, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parseLineSection(coverageMeasures, nextLine) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 117, pointed element: CtForImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (java.lang.String nextLine = scanner.next(); !org.sonar.cxx.sensors.coverage.TestwellCtcTxtResul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 114, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.LOG.debug("Parsing function sections...") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 110, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addLines(file, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 128, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addEachLine(coverageMeasures, lineMatcher) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 127, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	addEachLine[...] ` -topatch--> `if (true) { 	addEachLine(coverageMeasures, lineMatcher); } else { 	org.sonar.cxx.sensors.coverage.Te[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 127, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	addEachLine[...] ` -topatch--> `if (false) { 	addEachLine(coverageMeasures, lineMatcher); } else { 	org.sonar.cxx.sensors.coverage.T[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 127, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (lineMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	addEachLine[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 156, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasures.setHits(lineIdCur, lineHits) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 155, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev != lineIdCur) { 	coverageMeasures.setHits(lineIdCur, lineHits);  	if (lineIdCond > 0)[...] ` -topatch--> `if (true) { 	coverageMeasures.setHits(lineIdCur, lineHits);  	if (lineIdCond > 0) { 		coverageMeasur[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 155, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev != lineIdCur) { 	coverageMeasures.setHits(lineIdCur, lineHits);  	if (lineIdCond > 0)[...] ` -topatch--> `if (false) { 	coverageMeasures.setHits(lineIdCur, lineHits);  	if (lineIdCond > 0) { 		coverageMeasu[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 155, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev != lineIdCur) { 	coverageMeasures.setHits(lineIdCur, lineHits);  	if (lineIdCond > 0)[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 153, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lineHits = lineHitsTrue + lineHitsFalse ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 149, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) || (condsFalse != null)) {  	int lineHitsTrue = (condsTrue != null) ? new ja[...] ` -topatch--> `if (true) {  	int lineHitsTrue = (condsTrue != null) ? new java.math.BigDecimal(condsTrue).intValue([...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 149, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) || (condsFalse != null)) {  	int lineHitsTrue = (condsTrue != null) ? new ja[...] ` -topatch--> `if (false) {  	int lineHitsTrue = (condsTrue != null) ? new java.math.BigDecimal(condsTrue).intValue[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 149, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) || (condsFalse != null)) {  	int lineHitsTrue = (condsTrue != null) ? new ja[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 143, pointed element: CtDoImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtDoImpl) `do { 	int lineIdCur = java.lang.Integer.parseInt(lineMatcher.group(org.sonar.cxx.sensors.coverage.Te[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 170, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coveredConditions = (lineHitsTrue > 0 ? 1 : 0) + (lineHitsFalse > 0 ? 1 : 0) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 171, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `conditionIsDetected = true ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 168, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lineIdCond = lineIdCur ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 169, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `conditions = 2 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 166, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) && (condsFalse != null)) {  	lineIdCond = lineIdCur; 	conditions = 2; 	cover[...] ` -topatch--> `if (true) {  	lineIdCond = lineIdCur; 	conditions = 2; 	coveredConditions = (lineHitsTrue > 0 ? 1 : [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 166, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) && (condsFalse != null)) {  	lineIdCond = lineIdCur; 	conditions = 2; 	cover[...] ` -topatch--> `if (false) {  	lineIdCond = lineIdCur; 	conditions = 2; 	coveredConditions = (lineHitsTrue > 0 ? 1 :[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 166, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((condsTrue != null) && (condsFalse != null)) {  	lineIdCond = lineIdCur; 	conditions = 2; 	cover[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 162, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coveredConditions = 0 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 163, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `conditionIsDetected = false ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 160, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lineIdCond = 0 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 161, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `conditions = 0 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 158, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdCond > 0) { 	coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions); 	l[...] ` -topatch--> `if (true) { 	coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions); 	lineIdCond [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 158, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdCond > 0) { 	coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions); 	l[...] ` -topatch--> `if (false) { 	coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions); 	lineIdCond[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 158, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdCond > 0) { 	coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions); 	l[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 159, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasures.setConditions(lineIdCond, conditions, coveredConditions) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 202, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (blockEnd != null) { 	if (blockEnd.endsWith("-")) { 		lineHits = 0; 	} else 		if (blockEnd.endsWi[...] ` -topatch--> `if (true) { 	if (blockEnd.endsWith("-")) { 		lineHits = 0; 	} else { 		if (blockEnd.endsWith("+")) {[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 202, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (blockEnd != null) { 	if (blockEnd.endsWith("-")) { 		lineHits = 0; 	} else 		if (blockEnd.endsWi[...] ` -topatch--> `if (false) { 	if (blockEnd.endsWith("-")) { 		lineHits = 0; 	} else { 		if (blockEnd.endsWith("+")) [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 202, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (blockEnd != null) { 	if (blockEnd.endsWith("-")) { 		lineHits = 0; 	} else 		if (blockEnd.endsWi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 194, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lineIdPrev = lineIdCur ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 193, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLinehits(coverageMeasures, lineIdPrev, lineIdCur, lineHits) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 190, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setLinehitsByBlockend(coverageMeasures, lineIdCur, lineMatcher) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 220, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasures.setHits(lineIdNext, lineHits) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 219, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (lineIdNext < lineIdCur) { 	coverageMeasures.setHits(lineIdNext, lineHits); 	lineIdNext++; }  ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 217, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev > 0) { 	int lineIdNext = lineIdPrev + 1; 	while (lineIdNext < lineIdCur) { 		coverage[...] ` -topatch--> `if (true) { 	int lineIdNext = lineIdPrev + 1; 	while (lineIdNext < lineIdCur) { 		coverageMeasures.s[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 217, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev > 0) { 	int lineIdNext = lineIdPrev + 1; 	while (lineIdNext < lineIdCur) { 		coverage[...] ` -topatch--> `if (false) { 	int lineIdNext = lineIdPrev + 1; 	while (lineIdNext < lineIdCur) { 		coverageMeasures.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 217, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (lineIdPrev > 0) { 	int lineIdNext = lineIdPrev + 1; 	while (lineIdNext < lineIdCur) { 		coverage[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 101, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String file = errorCursor.getAttrValue("file"); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 112, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 108, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `if (true) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `if (false) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `if (true) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `if (false) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `if (true) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `if (false) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportIssue line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 80, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return def ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 65, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `if (true) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 65, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `if (false) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 65, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (this == obj) { 	return true; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 68, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `if (true) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 68, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `if (false) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 68, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (obj == null) { 	return false; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `if (true) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `if (false) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportLocation line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (getClass() != obj.getClass()) { 	return false; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 64, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 115, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (folder.getNext() != null) { 	java.lang.String folderName = folder.getAttrValue("name"); 	path[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 65, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.collectCoverageLeafNodes(rootCursor.getAttrValue("dir"[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 76, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.collectCoverage2(rootCursor.getAttrValue("dir"), rootC[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 75, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 80, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `topLevelparser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 81, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 90, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (folder.getNext() != null) { 	java.io.File fileName = new java.io.File(correctPath, folder.get[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 65, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (module.getNext() != null) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.handleModuleIt[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 60, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 56, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectModuleMeasures(rootCursor.descendantElement[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 148, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Cannot read report", e); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 148, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Cannot read report", e); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 148, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 147, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("The report '{}' seems to be empty, ignoring.",[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `if (true) { 	return refPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `if (false) { 	return refPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 247, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return refPath ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 95, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.other.CxxOtherSensor.LOG.debug("Parsing 'other' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 94, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (com.dd.plist.NSObject diagnostic : diagnostics) { 	com.dd.plist.NSDictionary diag = ((com.dd.pl[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((fileIndex < 0) || (fileIndex >= sourceFiles.length)) { 	throw new java.lang.IllegalArgumentExce[...] ` -topatch--> `if (true) { 	throw new java.lang.IllegalArgumentException("Invalid file index"); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((fileIndex < 0) || (fileIndex >= sourceFiles.length)) { 	throw new java.lang.IllegalArgumentExce[...] ` -topatch--> `if (false) { 	throw new java.lang.IllegalArgumentException("Invalid file index"); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 108, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((fileIndex < 0) || (fileIndex >= sourceFiles.length)) { 	throw new java.lang.IllegalArgumentExce[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 115, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 92, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (clazz.getNext() != null) { 	java.lang.String normalPath = org.sonar.cxx.sensors.utils.CxxUtil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.get(normalPath);[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.get(normalPath)[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (true) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put(n[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (false) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put([...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 85, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileMeasures(baseDir, pack.descendantElementCu[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 108, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (line.getNext() != null) { 	int lineId = java.lang.Integer.parseInt(line.getAttrValue("number"[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn("Truncating the actual number o[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn("Truncating the actual number [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(normalPath, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 97, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileData(clazz, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 122, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `if (true) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineId, j[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 122, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `if (false) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineId, [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 122, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 124, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setConditions(lineId, java.lang.Integer.parseInt(conditions[1]), java.lang.Integer.parseInt([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 116, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setHits(lineId, ((int) (noHits))) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Matc[...] ` -topatch--> `if (true) { 	java.util.regex.Matcher m = org.sonar.cxx.sensors.coverage.CoberturaParser.conditionsPa[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Matc[...] ` -topatch--> `if (false) { 	java.util.regex.Matcher m = org.sonar.cxx.sensors.coverage.CoberturaParser.conditionsP[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Matc[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `if (true) { 	return child.getTextTrim(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `if (false) { 	return child.getTextTrim(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 106, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 107, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return child.getTextTrim() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 101, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.rats.CxxRatsSensor.LOG.error("Ignore incomplete XML output from RATS '{}'", or[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 91, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom2.Element lineElem : lines) { 	java.lang.String line = lineElem.getTextTrim();  	org.so[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 95, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 86, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom2.Element file : files) { 	java.lang.String fileName = file.getChild("name").getTextTri[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 72, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.rats.CxxRatsSensor.LOG.debug("Parsing 'RATS' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 79, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom2.Element vulnerability : vulnerabilities) { 	java.lang.String type = org.sonar.cxx.sen[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `scanner.close() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `warnings.add(new org.sonar.cxx.sensors.compiler.CompilerParser.Warning(filename, line, id, msg)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Scanner-matches file='{}[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Scanner-matches file='{[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.info("Parsing '{}' format", org.sonar.cxx.se[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 88, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (scanner.findWithinHorizon(p, 0) != null) { 	matchres = scanner.match(); 	java.lang.String fil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 89, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matchres = scanner.match() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 86, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Using pattern : '{}'", p) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 63, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.id = id ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 64, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.title = title ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStacks().size() > 1) { 	errorMsg.append(" (Stack ").append(stackNr).append(")"); } ` -topatch--> `if (true) { 	errorMsg.append(" (Stack ").append(stackNr).append(")"); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStacks().size() > 1) { 	errorMsg.append(" (Stack ").append(stackNr).append(")"); } ` -topatch--> `if (false) { 	errorMsg.append(" (Stack ").append(stackNr).append(")"); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStacks().size() > 1) { 	errorMsg.append(" (Stack ").append(stackNr).append(")"); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 74, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `errorMsg.append(error.getText()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 78, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `errorMsg.append("\n\n").append(stack) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 113, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, issue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 84, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location frame : error.getStackTrac[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (frameIsInProject(context, frame)) { 	return frame; } ` -topatch--> `if (true) { 	return frame; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (frameIsInProject(context, frame)) { 	return frame; } ` -topatch--> `if (false) { 	return frame; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (frameIsInProject(context, frame)) { 	return frame; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 102, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error : org.sonar.cxx.sensors.drmem[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportIssue moduleIssue = new[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportIssue moduleIssue = new org.sonar.cxx.sensors.util[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportIssue moduleIssue = new[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportIssue moduleIssue = new org.sonar.cxx.sensors.uti[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 103, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportIssue moduleIssue = new[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 100, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.debug("Parsing 'Dr Memory' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 110, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find a project file to assign the [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 111, pointed element: CtContinueImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtContinueImpl) `continue ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lastOwnFrame == null) { 	org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find [...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find a project file t[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (lastOwnFrame == null) { 	org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find [...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find a project file [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (lastOwnFrame == null) { 	org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.warn("Cannot find [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 118, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (headerMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	parseFile[...] ` -topatch--> `if (true) { 	parseFileUnit(coverageData, headerMatcher); } else { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (headerMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	parseFile[...] ` -topatch--> `if (false) { 	parseFileUnit(coverageData, headerMatcher); } else { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (headerMatcher.find(org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.FROM_START)) { 	parseFile[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 89, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser.LOG.debug(headerMatcher.toString()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 78, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (parseUnit(coverageData, headerMatcher)) { 	headerMatcher.reset(scanner.next()); }  ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.TestwellCtcTxtParser line: 94, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `if (true) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.TRUE); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `if (false) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.TRUE); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 111, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 71, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor.LOG.debug("Parsing 'Vera++' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 90, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	if (!"error".equals(name)) { 		java.lang.String line = erro[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"error".equals(name)) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.S[...] ` -topatch--> `if (true) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.String message = e[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"error".equals(name)) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.S[...] ` -topatch--> `if (false) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.String message = [...]` (spoon.support.reflect.code.CtIfImpl) 

[INFO ] fr.inria.main.evolution.AstorMain.setupLogging(AstorMain.java:272) - Log file at: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:982) - Source folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:1001) - Source Test folders: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/test/java]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:911) - Test retrieved from classes: 51
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.0.0-SNAPSHOT/cxx-squid-1.0.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.0.0-SNAPSHOT/cxx-checks-1.0.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-2/wagon-provider-api-1.0-beta-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant/1.9.6/ant-1.9.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant-launcher/1.9.6/ant-launcher-1.9.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jdom/jdom/1.0/jdom-1.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/mockito/mockito-core/2.10.0/mockito-core-2.10.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy/1.7.4/byte-buddy-1.7.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.7.4/byte-buddy-agent-1.7.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-io/commons-io/2.5/commons-io-2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/assertj/assertj-core/3.9.0/assertj-core-3.9.0.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:925) - Setting up the max to 446770 milliseconds (446 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:720) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:236) - Creating model,  Code location from working folder: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:67) - building model: /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors/src/main/java, compliance level: 8
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:81) - Classpath (Dependencies) for building SpoonModel: [/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.0.0-SNAPSHOT/cxx-squid-1.0.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.0.0-SNAPSHOT/cxx-checks-1.0.0-SNAPSHOT.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-2/wagon-provider-api-1.0-beta-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant/1.9.6/ant-1.9.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant-launcher/1.9.6/ant-launcher-1.9.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jdom/jdom/1.0/jdom-1.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/mockito/mockito-core/2.10.0/mockito-core-2.10.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy/1.7.4/byte-buddy-1.7.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.7.4/byte-buddy-agent-1.7.4.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-io/commons-io/2.5/commons-io-2.5.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar, /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/assertj/assertj-core/3.9.0/assertj-core-3.9.0.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:790) - Number of CtTypes created: 70
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:724) - 
---- Initial suspicious size: 669
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=107, susp=0.282842712474619]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=82, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=74, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=72, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=73, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=78, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.sonar.cxx.sensors.compiler.CompilerParser, methodName=null, lineNumber=71, susp=0.25298221281347033]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 669,  612
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 612
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 612, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:765) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /proj/nobackup/snic2020-10-10/astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= suppression
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= /target/classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 446770
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= AstorJKali-repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= /target/test-classes
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 200
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.8.0_202
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= CoCoSpoon
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= jkali
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /cvmfs/ebsw.hpc2n.umu.se/amd64_ubuntu1604_common/software/Core/Java/1.8.0_202/bin
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= Europe/Paris
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-plugin-api/6.7/sonar-plugin-api-6.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/woodstox-core-lgpl/4.4.0/woodstox-core-lgpl-4.4.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/javax/xml/stream/stax-api/1.0-2/stax-api-1.0-2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/woodstox/stax2-api/3.1.4/stax2-api-3.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/staxmate/staxmate/2.0.1/staxmate-2.0.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-squid/1.0.0-SNAPSHOT/cxx-squid-1.0.0-SNAPSHOT.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-core/1.22/sslr-core-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/cglib/cglib-nodep/3.2.5/cglib-nodep-3.2.5.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr-squid-bridge/sslr-squid-bridge/2.6.1/sslr-squid-bridge-2.6.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sslr/sslr-xpath/1.20/sslr-xpath-1.20.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jaxen/jaxen/1.1.4/jaxen-1.1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube-plugins/cxx/cxx-checks/1.0.0-SNAPSHOT/cxx-checks-1.0.0-SNAPSHOT.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-testing-harness/1.22/sslr-testing-harness-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-toolkit/1.22/sslr-toolkit-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sslr/sslr-xpath/1.22/sslr-xpath-1.22.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-colorizer/3.7/sonar-colorizer-3.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/sonar/sonar-channel/3.7/sonar-channel-3.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-assert/1.4/fest-assert-1.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/easytesting/fest-util/1.1.6/fest-util-1.1.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-all/1.3/hamcrest-all-1.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/junit/junit/4.12/junit-4.12.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-project/2.0.9/maven-project-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-settings/2.0.9/maven-settings-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-profile/2.0.9/maven-profile-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-model/2.0.9/maven-model-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact-manager/2.0.9/maven-artifact-manager-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-repository-metadata/2.0.9/maven-repository-metadata-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/wagon/wagon-provider-api/1.0-beta-2/wagon-provider-api-1.0-beta-2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-plugin-registry/2.0.9/maven-plugin-registry-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-utils/1.5.1/plexus-utils-1.5.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/maven/maven-artifact/2.0.9/maven-artifact-2.0.9.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/codehaus/plexus/plexus-container-default/1.0-alpha-9-stable-1/plexus-container-default-1.0-alpha-9-stable-1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/classworlds/classworlds/1.1-alpha-2/classworlds-1.1-alpha-2.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/sonarsource/sonarqube/sonar-testing-harness/6.7/sonar-testing-harness-6.7.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/json-simple/json-simple/1.1.1/json-simple-1.1.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant/1.9.6/ant-1.9.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/apache/ant/ant-launcher/1.9.6/ant-launcher-1.9.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/jdom/jdom/1.0/jdom-1.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/mockito/mockito-core/2.10.0/mockito-core-2.10.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy/1.7.4/byte-buddy-1.7.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/net/bytebuddy/byte-buddy-agent/1.7.4/byte-buddy-agent-1.7.4.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-classic/1.2.3/logback-classic-1.2.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/ch/qos/logback/logback-core/1.2.3/logback-core-1.2.3.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/google/guava/guava/19.0/guava-19.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-io/commons-io/2.5/commons-io-2.5.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/commons-lang/commons-lang/2.6/commons-lang-2.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-core/2.8.6/jackson-core-2.8.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-databind/2.8.6/jackson-databind-2.8.6.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/fasterxml/jackson/core/jackson-annotations/2.8.0/jackson-annotations-2.8.0.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/com/googlecode/plist/dd-plist/1.19/dd-plist-1.19.jar:/scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/.m2/org/assertj/assertj-core/3.9.0/assertj-core-3.9.0.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logfilepath= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/repairnator.astor.jkali.log
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= /scratch/dginelli/workspace/repairnator-repairnator-experiments-SonarOpenCommunity-sonar-cxx-361643056-20180403-155432-firstCommit/cxx-sensors
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XmlParserHelper line: 51, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new java.lang.IllegalStateException(e) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XmlParserHelper line: 45, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 57, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return new java.io.File(filename).getCanonicalPath() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 72, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `if (true) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename); } else {  	fil[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 72, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `if (false) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename); } else {  	fi[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 72, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (targetfile.isAbsolute()) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filena[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 76, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath((baseDir + java.io.File.separator) + f[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 292, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	try { 		int lines = inputFile.lines(); 		int lineNr = getLineAsInt(line, l[...] ` -topatch--> `if (true) { 	try { 		int lines = inputFile.lines(); 		int lineNr = getLineAsInt(line, lines); 		java[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 292, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	try { 		int lines = inputFile.lines(); 		int lineNr = getLineAsInt(line, l[...] ` -topatch--> `if (false) { 	try { 		int lines = inputFile.lines(); 		int lineNr = getLineAsInt(line, lines); 		jav[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 292, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (inputFile != null) { 	try { 		int lines = inputFile.lines(); 		int lineNr = getLineAsInt(line, l[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 289, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath != null) && (!notFoundFiles.contains(normalPath))) { 	org.sonar.api.batch.fs.InputFi[...] ` -topatch--> `if (true) { 	org.sonar.api.batch.fs.InputFile inputFile = sensorContext.fileSystem().inputFile(senso[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 289, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath != null) && (!notFoundFiles.contains(normalPath))) { 	org.sonar.api.batch.fs.InputFi[...] ` -topatch--> `if (false) { 	org.sonar.api.batch.fs.InputFile inputFile = sensorContext.fileSystem().inputFile(sens[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 289, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalPath != null) && (!notFoundFiles.contains(normalPath))) { 	org.sonar.api.batch.fs.InputFi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 316, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `notFoundFiles.add(normalPath) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 315, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find the file '{}', skipping violations[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 286, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((filename != null) && (!filename.isEmpty())) { 	java.lang.String root = sensorContext.fileSystem[...] ` -topatch--> `if (true) { 	java.lang.String root = sensorContext.fileSystem().baseDir().getAbsolutePath(); 	java.l[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 286, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((filename != null) && (!filename.isEmpty())) { 	java.lang.String root = sensorContext.fileSystem[...] ` -topatch--> `if (false) { 	java.lang.String root = sensorContext.fileSystem().baseDir().getAbsolutePath(); 	java.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 286, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((filename != null) && (!filename.isEmpty())) { 	java.lang.String root = sensorContext.fileSystem[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 274, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveViolation(sensorContext, ruleRepoKey, file, line, ruleId, msg) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 273, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(((file + line) + ruleId) + msg)) { 	saveViolation(sensorContext, ruleRepoKey, f[...] ` -topatch--> `if (true) { 	saveViolation(sensorContext, ruleRepoKey, file, line, ruleId, msg); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 273, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(((file + line) + ruleId) + msg)) { 	saveViolation(sensorContext, ruleRepoKey, f[...] ` -topatch--> `if (false) { 	saveViolation(sensorContext, ruleRepoKey, file, line, ruleId, msg); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 273, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (uniqueIssues.add(((file + line) + ruleId) + msg)) { 	saveViolation(sensorContext, ruleRepoKey, f[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 141, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("{} processed = {}", org.sonar.cx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 141, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("{} processed = {}", org.sonar.c[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 141, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 140, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `processReport(context, report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `executeReport(context, report, prevViolationsCount) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Processing report '{}'", report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 96, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.io.File report : reports) { 	int prevViolationsCount = violationsPerModuleCount; 	org.sona[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 222, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `reports.add(new java.io.File(found)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 221, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String found : includeFiles) { 	reports.add(new java.io.File(found)); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 228, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Parser will parse '{}' report files", reports.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 180, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return normalizedPath ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `if (true) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer> entry : t[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `if (false) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer> entry : [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (metric != null) { 	for (java.util.Map.Entry<org.sonar.api.batch.fs.InputFile, java.lang.Integer>[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 102, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("{} processed = {}", org.sonar.cxx.sensors.util[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `if (true) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `if (false) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 179, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	return normalizedPath; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 178, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `normalizedPath = org.apache.commons.io.FilenameUtils.normalize((baseDir + java.io.File.separator) + [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 247, pointed element: CtContinueImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtContinueImpl) `continue ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 246, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `includes.add(normalizedPath) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 220, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Scanner found '{}' report files", includeFiles[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 217, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `directoryScanner.scan() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 216, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `directoryScanner.setIncludes(includes.toArray(new java.lang.String[includes.size()])) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Scanner uses report paths: '{}'"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Scanner uses report paths: '{}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `if (true) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `if (false) { 	return normalizedPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 173, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((normalizedPath != null) && new java.io.File(normalizedPath).isAbsolute()) { 	return normalizedP[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find a report for '{}={}'"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("Cannot find a report for '{}={}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 225, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (reports.isEmpty() && (!includes.isEmpty())) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.w[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Normalized report includes to '{[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Normalized report includes to '[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 254, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 245, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `if (true) { 	includes.add(normalizedPath); 	continue; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 245, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `if (false) { 	includes.add(normalizedPath); 	continue; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 245, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalizedPath != null) { 	includes.add(normalizedPath); 	continue; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 242, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String reportPath : reportPaths) {  	java.lang.String normalizedPath = org.sonar.cxx.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 94, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `violationsPerModuleCount = 0 ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 93, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `violationsPerFileCount.clear() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 90, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Searching reports by relative path with basedi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `if (true) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.normalize(filen[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `if (false) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.normalize(file[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 169, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filename != null) {   	java.lang.String normalizedPath = org.apache.commons.io.FilenameUtils.nor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 65, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.language = language ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 205, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined report path value for k[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 205, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined report path value for [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 205, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (reportPathString.isEmpty()) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.info("Undefined r[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `if (true) { 	return reports; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `if (false) { 	return reports; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (com.google.common.base.Strings.isNullOrEmpty(genericReportKeyData)) { 	return reports; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 38, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser.LOG.info("Parsing the XUnit Test Resul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 49, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.XUnitTestResultsFileParser line: 48, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 101, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parse(inf.rootElementCursor(input)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 87, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parse(input) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 133, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `streamHandler.stream(rootCursor) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 49, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 48, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser line: 38, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.NUnitTestResultsFileParser.LOG.info("Parsing the NUnit Test Resul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 51, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.JsonCompilationDatabase.LOG.debug("Parsing 'JSON Compilation Database' f[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 54, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `mapper.disable(com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.JsonCompilationDatabase line: 55, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `mapper.enable(com.fasterxml.jackson.databind.DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 53, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(streamHandler, false) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `if (true) { 	com.ctc.wstx.stax.WstxInputFactory wstxInputfactory = ((com.ctc.wstx.stax.WstxInputFact[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `if (false) { 	com.ctc.wstx.stax.WstxInputFactory wstxInputfactory = ((com.ctc.wstx.stax.WstxInputFac[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (xmlFactory instanceof com.ctc.wstx.stax.WstxInputFactory) { 	com.ctc.wstx.stax.WstxInputFactory [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 65, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.streamHandler = streamHandler ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 72, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.IS_VALIDATING, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 69, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `wstxInputfactory.configureForLowMemUsage() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 70, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `wstxInputfactory.getConfig().setUndeclaredEntityResolver(new org.sonar.cxx.sensors.utils.StaxParser.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 75, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.isoControlCharsAwareParser = isoControlCharsAwareParser ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 76, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `inf = new org.codehaus.staxmate.SMInputFactory(xmlFactory) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 73, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.SUPPORT_DTD, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 74, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlFactory.setProperty(javax.xml.stream.XMLInputFactory.IS_NAMESPACE_AWARE, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.StaxParser line: 135, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.getStreamReader().closeCompletely() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `if (true) { 	parser = this.parsers.get(parserValue.get()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `if (false) { 	parser = this.parsers.get(parserValue.get()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 96, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (parserValue.isPresent()) { 	parser = parsers.get(parserValue.get()); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 97, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parser = parsers.get(parserValue.get()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerSensor.LOG.info("C-Compiler parser: '{}'", parserValue) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 44, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser.LOG.info("Parsing the Visual St[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	saveUniqueViolation(context[...] ` -topatch--> `if (true) { 	saveUniqueViolation(context, parser.rulesRepositoryKey(), w.filename, w.line, w.id, w.m[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	saveUniqueViolation(context[...] ` -topatch--> `if (false) { 	saveUniqueViolation(context, parser.rulesRepositoryKey(), w.filename, w.line, w.id, w.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerSensor.isInputValid(w)) { 	saveUniqueViolation(context[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 119, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, parser.rulesRepositoryKey(), w.filename, w.line, w.id, w.msg) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 117, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.compiler.CompilerParser.Warning w : warnings) { 	if (org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 59, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.unitTestResults = unitTestResults ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.tests.dotnet.VisualStudioTestResultsFileParser line: 58, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.warn("Cannot find the file '{}', i[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.warn("Cannot find the file '{}', [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath.startsWith(context.fileSystem().baseDir().getAbsolutePath())) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 197, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Cannot find the file '{}', [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 197, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Cannot find the file '{}',[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 197, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 178, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `if (true) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCoverage().on[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 178, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `if (false) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCoverage().o[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 178, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cxxFile != null) {  	org.sonar.api.batch.sensor.coverage.NewCoverage newCoverage = context.newCo[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 175, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("save coverage measure for f[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 175, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("save coverage measure for [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 175, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 172, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `if (true) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fil[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 172, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `if (false) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fi[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 172, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (filePath != null) { 	filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath,[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 173, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePathFull(filePath, context.fileSystem().bas[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 170, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.util.Map.Entry<java.lang.String, org.sonar.cxx.sensors.coverage.CoverageMeasures> entry : [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 135, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ((((!file.isEmpty()) && (id != null)) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 62, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addCompilerParser(new org.sonar.cxx.sensors.compiler.CxxCompilerVcParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 63, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `addCompilerParser(new org.sonar.cxx.sensors.compiler.CxxCompilerGccParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 84, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.put(parser.key(), parser) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 116, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.processReport(context, report, reportCharset, reportRegEx, warnings) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerSensor line: 114, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerSensor.LOG.info("Scanner '{}' initialized with report '{}'[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `if (true) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `if (false) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 154, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isMisra2012) { 	newKey = "M2012-" + misraRule; } else { 	newKey = "M" + misraRule; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 157, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `newKey = "M" + misraRule ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Remap MISRA rule {} to key {}",[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Remap MISRA rule {} to key {}"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 159, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.pcli[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 162, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return newKey ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `if (true) { 	return def; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `if (false) { 	return def; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 78, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((s == null) || s.isEmpty()) { 	return def; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `if (true) {  	return (((id != null) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `if (false) {  	return (((id != null) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((file == null) || file.isEmpty()) || (java.lang.Integer.parseInt(line) == 0)) {  	return (((id [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `if (true) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA 2004") || msg.contains("MISR[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `if (false) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA 2004") || msg.contains("MIS[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(file, line, id, msg)) { 	if (msg.contains("MISRA")) {   		if (((msg.contains("MISRA[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `if (true) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  	msg.contains("MI[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `if (false) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  	msg.contains("M[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA")) {   	if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `if (true)  { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE); } else { 	if (msg.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `if (false)  { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE); } else { 	if (msg[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((msg.contains("MISRA 2004") || msg.contains("MISRA 2008")) ||  msg.contains("MISRA C++ 2008")) [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 111, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, org.sonar.cxx.sensors.pclint.CxxPCLintRuleRepository.KEY,  file, line, [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 73, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `filePath = org.sonar.cxx.sensors.utils.CxxUtils.normalizePath(filename) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 132, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 126, pointed element: CtBreakImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtBreakImpl) `break ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 124, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `cacheCov.put(report.getAbsolutePath(), measuresTotal) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("cached measures for '{}' : [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("cached measures for '{}' :[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 120, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 119, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.parseCoverageReport(parser, context, report, measur[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 164, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `measuresTotal.putAll(measuresForReport) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 165, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Added coverage report '{}' (parsed by: {}[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 50, pointed element: CtOperatorAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `this.hits += hits ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 34, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.line = line ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 47, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasure.setHits(hits) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 45, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `lineMeasures.computeIfAbsent(lineId, ( v) -> new org.sonar.cxx.sensors.coverage.CoverageMeasure(line[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.info("Parsing 'Visual C++' format ({})", char[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (fpath.matches("^\\d+>.*$")) { 	return fpath.substring(fpath.indexOf('>') + 1, fpath.length()); } ` -topatch--> `if (true) { 	return fpath.substring(fpath.indexOf('>') + 1, fpath.length()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (fpath.matches("^\\d+>.*$")) { 	return fpath.substring(fpath.indexOf('>') + 1, fpath.length()); } ` -topatch--> `if (false) { 	return fpath.substring(fpath.indexOf('>') + 1, fpath.length()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (fpath.matches("^\\d+>.*$")) { 	return fpath.substring(fpath.indexOf('>') + 1, fpath.length()); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 86, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.info("Using pattern : '{}'", p) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 89, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matchres = scanner.match() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 88, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (scanner.findWithinHorizon(p, 0) != null) { 	matchres = scanner.match(); 	java.lang.String fil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.debug("Scanner-matches file='{}'[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.debug("Scanner-matches file='{}[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerVcParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `warnings.add(new org.sonar.cxx.sensors.compiler.CompilerParser.Warning(filename, line, id, msg)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 168, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 87, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 94, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String file = errorCursor.getAttrValue("file"); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 78, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.pclint.CxxPCLintSensor.LOG.debug("Parsing 'PC-Lint' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `if (true) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if (isMisra20[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `if (false) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if (isMisra2[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 151, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.find()) { 	java.lang.String misraRule = matcher.group(1); 	java.lang.String newKey; 	if [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `if (true) { 	for (org.sonar.cxx.sensors.coverage.CoverageParser parser : this.parsers) { 		try { 			[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `if (false) { 	for (org.sonar.cxx.sensors.coverage.CoverageParser parser : this.parsers) { 		try { 		[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 116, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!cacheCov.containsKey(report.getAbsolutePath())) { 	for (org.sonar.cxx.sensors.coverage.Coverage[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 106, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.FALSE) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 115, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.io.File report : reports) { 	if (!cacheCov.containsKey(report.getAbsolutePath())) { 		for [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 65, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectPackageMeasures(baseDir, rootCursor.descendant[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 67, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `packageParser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 71, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (source.getNext() != null) { 	java.lang.String sourceValue = source.getElemStringValue().trim([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 83, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (pack.getNext() != null) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileMeasures[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 59, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `readBaseDir(rootCursor.descendantElementCursor("source")) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 61, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sourceParser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 64, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 160, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `if (true) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("Coverage report " + repo[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 160, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `if (false) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("Coverage report " + rep[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 160, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (measuresForReport.isEmpty()) { 	throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("C[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 155, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.processReport(context, report, measuresForReport) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 150, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxUtils.validateRecovery(e, language) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 119, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 106, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coverageMeasures = processReports(context, reports, this.cache.unitCoverageCache()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 107, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveMeasures(context, coverageMeasures) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Parsing unit test coverage [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Parsing unit test coverage[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 101, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 126, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setHits(startLine, covered) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 125, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (startLine <= endLine) { 	builder.setHits(startLine, covered); 	startLine++; }  ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 122, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `lastSourceId = sourceId ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 118, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 119, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(sourceId, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 116, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = coverageData.get(sourceId) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (true) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put(s[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (false) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put([...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 117, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `if (true) { 	builder = coverageData.get(sourceId); 	if (builder == null) { 		builder = org.sonar.cxx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `if (false) { 	builder = coverageData.get(sourceId); 	if (builder == null) { 		builder = org.sonar.cx[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((!sourceId.equals(lastSourceId)) || (builder == null)) { 	builder = coverageData.get(sourceId); [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 108, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (range.getNext() != null) { 	java.lang.String sourceId = range.getAttrValue("source_id"); 	int[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 66, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.handleModuleItems(module, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectRangeMeasures(function, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 97, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (function.getNext() != null) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectRange[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 90, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(sourceFile.getAttrValue("path"), builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 86, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (sourceFile.getNext() != null) { 	java.lang.String id = sourceFile.getAttrValue("id"); 	org.so[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 78, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 76, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, coverageData) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, cove[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectSourceFileMeasures(child, cov[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 77, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("source_files".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.coll[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, covera[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collectFunctionMeasures(child, cover[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("functions".equalsIgnoreCase(name)) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.collect[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 73, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (child.getNext() != null) { 	java.lang.String name = child.getLocalName(); 	if ("functions".eq[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 100, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String file = errorCursor.getAttrValue("file"); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 110, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 106, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, org.sonar.cxx.sensors.other.CxxOtherRepository.KEY, file, line, id, msg[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `if (true) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 		org.sona[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `if (false) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 		org.son[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 100, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (context.config().hasKey(getReportPathKey())) { 	if (org.sonar.cxx.sensors.coverage.CxxCoverageSe[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Coverage BaseDir '{}' ", context.fileSyst[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 94, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Searching for coverage reports '{}'", jav[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 92, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.info("Searching coverage reports by path with b[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 68, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.BullseyeParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 69, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.VisualStudioParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 66, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.cache = cache ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 67, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.coverage.CoberturaParser()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 79, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return def ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 54, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.debug("Parsing 'Cobertura' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 55, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `baseDir = context.fileSystem().baseDir().getAbsolutePath() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `if (true) { 	measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `if (false) { 	measuresTotal.putAll(cacheCov.get(report.getAbsolutePath())); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 131, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cacheCov.get(report.getAbsolutePath()) != null) { 	measuresTotal.putAll(cacheCov.get(report.getA[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 117, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.coverage.CoverageParser parser : parsers) { 	try { 		org.sonar.cxx.sensor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 64, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 147, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Cannot read report", e); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 147, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.debug("Cannot read report", e); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 147, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.utils[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 146, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.utils.CxxReportSensor.LOG.warn("The report '{}' seems to be empty, ignoring.",[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 115, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (folder.getNext() != null) { 	java.lang.String folderName = folder.getAttrValue("name"); 	path[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 65, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.collectCoverageLeafNodes(rootCursor.getAttrValue("dir"[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 76, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.collectCoverage2(rootCursor.getAttrValue("dir"), rootC[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 75, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 80, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `topLevelparser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 81, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 90, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (folder.getNext() != null) { 	java.io.File fileName = new java.io.File(correctPath, folder.get[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 161, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new org.sonar.cxx.sensors.utils.EmptyReportException(((("Coverage report " + report) + " resul[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `if (true) { 	return refPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `if (false) { 	return refPath; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 246, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((refPath == null) || refPath.isEmpty()) { 	return refPath; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 247, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return refPath ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 65, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (module.getNext() != null) { 	org.sonar.cxx.sensors.coverage.VisualStudioParser.handleModuleIt[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 60, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 56, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.collectModuleMeasures(rootCursor.descendantElement[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 94, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.other.CxxOtherSensor.LOG.debug("Parsing 'other' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 75, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRepository.KEY,  frame.ge[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 84, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error : org.sonar.cxx.sensors.drmem[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.[...] ` -topatch--> `if (true) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.CxxDrMemoryRuleRepository.K[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.[...] ` -topatch--> `if (false) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.CxxDrMemoryRuleRepository.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 85, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (error.getStackTrace().isEmpty()) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.LOG.debug("Parsing 'Dr Memory' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 90, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location errorLocation : error.getS[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.isFileInAnalysis(context, errorLocation)) { 	sa[...] ` -topatch--> `if (true) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.CxxDrMemoryRuleRepository.K[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.isFileInAnalysis(context, errorLocation)) { 	sa[...] ` -topatch--> `if (false) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.drmemory.CxxDrMemoryRuleRepository.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor line: 91, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.drmemory.CxxDrMemorySensor.isFileInAnalysis(context, errorLocation)) { 	sa[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 85, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (com.dd.plist.NSObject diagnostic : diagnostics) { 	com.dd.plist.NSDictionary diag = ((com.dd.pl[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 101, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context,  org.sonar.cxx.sensors.clangsa.CxxClangSARuleRepository.KEY,  ((com.dd.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 91, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (clazz.getNext() != null) { 	java.lang.String normalPath = org.sonar.cxx.sensors.utils.CxxUtil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 93, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.get(normalPath);[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 93, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.get(normalPath)[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 93, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (normalPath != null) { 	org.sonar.cxx.sensors.coverage.CoverageMeasures builder = coverageData.ge[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 96, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (true) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put(n[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `if (false) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverageData.put([...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 95, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (builder == null) { 	builder = org.sonar.cxx.sensors.coverage.CoverageMeasures.create(); 	coverag[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 84, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileMeasures(baseDir, pack.descendantElementCu[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 106, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (line.getNext() != null) { 	int lineId = java.lang.Integer.parseInt(line.getAttrValue("number"[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn("Truncating the actual number o[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn("Truncating the actual number [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (noHits > java.lang.Integer.MAX_VALUE) { 	org.sonar.cxx.sensors.coverage.CoberturaParser.LOG.warn[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageData.put(normalPath, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CoberturaParser.collectFileData(clazz, builder) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `if (true) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineId, j[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `if (false) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineId, [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 121, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	java.lang.String[] conditions = m.group(1).split("/"); 	builder.setConditions(lineI[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 123, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setConditions(lineId, java.lang.Integer.parseInt(conditions[1]), java.lang.Integer.parseInt([...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 114, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `builder.setHits(lineId, ((int) (noHits))) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Patt[...] ` -topatch--> `if (true) { 	java.util.regex.Pattern p = java.util.regex.Pattern.compile("\\((.*?)\\)"); 	java.util.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Patt[...] ` -topatch--> `if (false) { 	java.util.regex.Pattern p = java.util.regex.Pattern.compile("\\((.*?)\\)"); 	java.util[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((text != null) && "true".equals(isBranch)) && (!text.trim().isEmpty())) { 	java.util.regex.Patt[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `if (true) { 	return child.getTextTrim(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `if (false) { 	return child.getTextTrim(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 104, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (child != null) { 	return child.getTextTrim(); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 105, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return child.getTextTrim() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.rats.CxxRatsSensor.LOG.error("Ignore incomplete XML output from RATS '{}'", or[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 90, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom.Element lineElem : lines) { 	java.lang.String line = lineElem.getTextTrim(); 	saveUniq[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 92, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, org.sonar.cxx.sensors.rats.CxxRatsRuleRepository.KEY,  fileName, line, [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 85, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom.Element file : files) { 	java.lang.String fileName = file.getChild("name").getTextTrim[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 78, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.jdom.Element vulnerability : vulnerabilities) { 	java.lang.String type = org.sonar.cxx.sens[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.rats.CxxRatsSensor line: 71, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.rats.CxxRatsSensor.LOG.debug("Parsing 'RATS' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 136, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Processing report '{}' skip[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 136, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Processing report '{}' ski[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 136, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.isDebugEnabled()) { 	org.sonar.cxx.sensors.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 135, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `measuresTotal = cacheCov.get(report.getAbsolutePath()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `if (true) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.TRUE); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `if (false) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.TRUE); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (msg.contains("MISRA 2012 Rule")) { 	id = mapMisraRulesToUniqueSonarRules(msg, java.lang.Boolean.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 79, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 70, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor.LOG.debug("Parsing 'Vera++' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 95, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context, org.sonar.cxx.sensors.veraxx.CxxVeraxxRuleRepository.KEY,  name, line, [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"error".equals(name)) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.S[...] ` -topatch--> `if (true) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.String message = e[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"error".equals(name)) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.S[...] ` -topatch--> `if (false) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.String message = [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!"error".equals(name)) { 	java.lang.String line = errorCursor.getAttrValue("line"); 	java.lang.S[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 89, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	if (!"error".equals(name)) { 		java.lang.String line = erro[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 85, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (fileCursor.getNext() != null) { 	java.lang.String name = fileCursor.getAttrValue("name");  	o[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 81, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new org.sonar.cxx.sensors.utils.EmptyReportException("Cannot read vera++ report ", eofExc) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.veraxx.CxxVeraxxSensor line: 109, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 99, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `scanner.close() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `warnings.add(new org.sonar.cxx.sensors.compiler.CompilerParser.Warning(filename, line, id, msg)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Scanner-matches file='{}[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Scanner-matches file='{[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.isDebugEnabled()) { 	org.sonar.cxx.senso[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 54, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coveredConditions = coveredConditions ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasure line: 55, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.conditions = totalConditions ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.info("Parsing '{}' format", org.sonar.cxx.se[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 88, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (scanner.findWithinHorizon(p, 0) != null) { 	matchres = scanner.match(); 	java.lang.String fil[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 89, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matchres = scanner.match() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerGccParser line: 86, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.compiler.CxxCompilerGccParser.LOG.debug("Using pattern : '{}'", p) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 51, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `lineMeasures.computeIfAbsent(lineId, ( v) -> new org.sonar.cxx.sensors.coverage.CoverageMeasure(line[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoverageMeasures line: 53, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `coverageMeasure.setConditions(totalConditions, coveredConditions) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 61, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.id = id ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 62, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.title = title ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.compiler.CxxCompilerVcParser line: 105, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return fpath.substring(fpath.indexOf('>') + 1, fpath.length()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 130, pointed element: CtBreakImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtBreakImpl) `break ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.BullseyeParser line: 57, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.BullseyeParser.LOG.debug("Parsing 'Bullseye' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CxxCoverageSensor line: 128, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.CxxCoverageSensor.LOG.debug("Report is empty {}", e) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.VisualStudioParser line: 49, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.coverage.VisualStudioParser.LOG.debug("Parsing 'Visual Studio' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 87, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `transformFiles(context.fileSystem().baseDir(), context) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 329, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `newIssue.save() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxReportSensor line: 328, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `newIssue.at(location) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (recovery.isPresent() && recovery.get()) { 	return; } ` -topatch--> `if (true) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (recovery.isPresent() && recovery.get()) { 	return; } ` -topatch--> `if (false) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 118, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (recovery.isPresent() && recovery.get()) { 	return; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 129, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((stylesheet == null) && inputs.isEmpty()) && outputs.isEmpty()) { 	break; } ` -topatch--> `if (true) { 	break; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 129, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (((stylesheet == null) && inputs.isEmpty()) && outputs.isEmpty()) { 	break; } ` -topatch--> `if (false) { 	break; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 129, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((stylesheet == null) && inputs.isEmpty()) && outputs.isEmpty()) { 	break; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.other.CxxOtherSensor line: 119, pointed element: CtForImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 1; i < org.sonar.cxx.sensors.other.CxxOtherSensor.MAX_STYLESHEETS; i++) { 	java.lang.St[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (frame != null) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRep[...] ` -topatch--> `if (true) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRepository.K[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (frame != null) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRep[...] ` -topatch--> `if (false) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRepository.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 74, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (frame != null) { 	saveUniqueViolation(context, org.sonar.cxx.sensors.valgrind.CxxValgrindRuleRep[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 93, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `saveUniqueViolation(context,  org.sonar.cxx.sensors.clangtidy.CxxClangTidyRuleRepository.KEY,  path,[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 87, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	java.util.regex.MatchResult m = matcher.toMatchResult(); 	java.lang.String[...] ` -topatch--> `if (true) { 	java.util.regex.MatchResult m = matcher.toMatchResult(); 	java.lang.String path = m.gro[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 87, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	java.util.regex.MatchResult m = matcher.toMatchResult(); 	java.lang.String[...] ` -topatch--> `if (false) { 	java.util.regex.MatchResult m = matcher.toMatchResult(); 	java.lang.String path = m.gr[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 87, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (matcher.matches()) { 	java.util.regex.MatchResult m = matcher.toMatchResult(); 	java.lang.String[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.CxxValgrindSensor line: 72, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.valgrind.ValgrindError error : valgrindErrors) { 	org.sonar.cxx.sensors.v[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangsa.CxxClangSASensor line: 73, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.clangsa.CxxClangSASensor.LOG.debug("Processing clangsa report '{}''", report.g[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 74, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `baseDir = java.nio.file.Paths.get(baseDir).resolve(sourceValue).normalize().toString() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 73, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!sourceValue.isEmpty()) { 	baseDir = java.nio.file.Paths.get(baseDir).resolve(sourceValue).norma[...] ` -topatch--> `if (true) { 	this.baseDir = java.nio.file.Paths.get(this.baseDir).resolve(sourceValue).normalize().t[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 73, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!sourceValue.isEmpty()) { 	baseDir = java.nio.file.Paths.get(baseDir).resolve(sourceValue).norma[...] ` -topatch--> `if (false) { 	this.baseDir = java.nio.file.Paths.get(this.baseDir).resolve(sourceValue).normalize().[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 73, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!sourceValue.isEmpty()) { 	baseDir = java.nio.file.Paths.get(baseDir).resolve(sourceValue).norma[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.coverage.CoberturaParser line: 75, pointed element: CtBreakImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtBreakImpl) `break ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxUtils line: 106, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `throwable.printStackTrace(pw) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.pclint.CxxPCLintSensor line: 133, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return (((id != null) && (!id.isEmpty())) && (msg != null)) && (!msg.isEmpty()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 116, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return "[inconclusive] " + msg ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 93, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `line = null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 92, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `file = null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 62, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new org.sonar.cxx.sensors.utils.EmptyReportException("Cannot read cppcheck report (format V2)"[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 78, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `line = null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 77, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `file = null ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 172, pointed element: CtReturnImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return drMemoryErrorType ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cleanedTitle.startsWith(drMemoryErrorType.getTitle())) { 	return drMemoryErrorType; } ` -topatch--> `if (true) { 	return drMemoryErrorType; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cleanedTitle.startsWith(drMemoryErrorType.getTitle())) { 	return drMemoryErrorType; } ` -topatch--> `if (false) { 	return drMemoryErrorType; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 171, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cleanedTitle.startsWith(drMemoryErrorType.getTitle())) { 	return drMemoryErrorType; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 170, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryErrorType drMemoryErrorType : org.sonar.c[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 157, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `error.stackTrace.add(location) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 156, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `location.line = java.lang.Integer.valueOf(locationMatcher.group(2)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 153, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (locationMatcher.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location [...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location location = new org[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 153, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (locationMatcher.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location [...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location location = new or[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 153, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (locationMatcher.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError.Location [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 155, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `location.file = locationMatcher.group(1) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 160, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `result.add(error) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 205, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sb.append('\n') ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 204, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sb.append(line) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 201, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `list.add(sb.toString()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (line.matches("^\\s*$")) { 	list.add(sb.toString()); 	sb.setLength(0); } else { 	sb.append(line);[...] ` -topatch--> `if (true) { 	list.add(sb.toString()); 	sb.setLength(0); } else { 	sb.append(line); 	sb.append('\n');[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (line.matches("^\\s*$")) { 	list.add(sb.toString()); 	sb.setLength(0); } else { 	sb.append(line);[...] ` -topatch--> `if (false) { 	list.add(sb.toString()); 	sb.setLength(0); } else { 	sb.append(line); 	sb.append('\n')[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 200, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (line.matches("^\\s*$")) { 	list.add(sb.toString()); 	sb.setLength(0); } else { 	sb.append(line);[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 202, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sb.setLength(0) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 212, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `list.add(sb.toString()) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 215, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `br.close() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (sb.length() > 0) { 	list.add(sb.toString()); } ` -topatch--> `if (true) { 	list.add(sb.toString()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (sb.length() > 0) { 	list.add(sb.toString()); } ` -topatch--> `if (false) { 	list.add(sb.toString()); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 211, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (sb.length() > 0) { 	list.add(sb.toString()); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cnt > org.sonar.cxx.sensors.drmemory.DrMemoryParser.TOP_COUNT) { 	if (line.matches("^\\s*$")) { [...] ` -topatch--> `if (true) { 	if (line.matches("^\\s*$")) { 		list.add(sb.toString()); 		sb.setLength(0); 	} else { 	[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (cnt > org.sonar.cxx.sensors.drmemory.DrMemoryParser.TOP_COUNT) { 	if (line.matches("^\\s*$")) { [...] ` -topatch--> `if (false) { 	if (line.matches("^\\s*$")) { 		list.add(sb.toString()); 		sb.setLength(0); 	} else { [...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 199, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (cnt > org.sonar.cxx.sensors.drmemory.DrMemoryParser.TOP_COUNT) { 	if (line.matches("^\\s*$")) { [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 198, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while ((line = br.readLine()) != null) { 	if (cnt > org.sonar.cxx.sensors.drmemory.DrMemoryParser.TO[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 143, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String element : elements) { 	java.util.regex.Matcher m = org.sonar.cxx.sensors.drmem[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 148, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `error.type = org.sonar.cxx.sensors.drmemory.DrMemoryParser.extractErrorType(m.group(1)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 151, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (java.lang.String elementPart : elementSplitted) { 	java.util.regex.Matcher locationMatcher = or[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 150, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `error.message = elementSplitted[0] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 146, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error = new org.sonar.c[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error = new org.sonar.cxx.s[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 146, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error = new org.sonar.c[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error = new org.sonar.cxx.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.drmemory.DrMemoryParser line: 146, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (m.find()) { 	org.sonar.cxx.sensors.drmemory.DrMemoryParser.DrMemoryError error = new org.sonar.c[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 84, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (scanner.hasNextLine()) { 	java.lang.String line = scanner.nextLine(); 	final java.util.regex.[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor line: 72, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.clangtidy.CxxClangTidySensor.LOG.debug("Parsing 'clang-tidy' report, CharSet= [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 84, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.trace("Report {} cannot be parsed by {}", repor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 126, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!msg.isEmpty()) && "true".equals(inconclusive)) { 	return "[inconclusive] " + msg; } ` -topatch--> `if (true) { 	return "[inconclusive] " + msg; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ((!msg.isEmpty()) && "true".equals(inconclusive)) { 	return "[inconclusive] " + msg; } ` -topatch--> `if (false) { 	return "[inconclusive] " + msg; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 115, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((!msg.isEmpty()) && "true".equals(inconclusive)) { 	return "[inconclusive] " + msg; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 110, pointed element: CtThrowImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `throw new javax.xml.stream.XMLStreamException() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 98, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRuleRepository.KEY, fi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `if (true) { 	this.sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRule[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `if (false) { 	this.sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRul[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 97, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `if (true) {  	file = null; 	line = null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `if (false) {  	file = null; 	line = null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 90, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 87, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `file = file.replace('\\', '/') ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 86, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `if (true) { 	file = file.replace('\\', '/'); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 86, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `if (false) { 	file = file.replace('\\', '/'); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 86, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 84, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `line = locationCursor.getAttrValue("line") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 49, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.cppcheck.CppcheckParserV1.LOG.debug("Parsing 'Cppcheck V1' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 83, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `file = locationCursor.getAttrValue("file") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 82, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (locationCursor.getNext() != null) { 	file = locationCursor.getAttrValue("file"); 	line = locatio[...] ` -topatch--> `if (true) { 	file = locationCursor.getAttrValue("file"); 	line = locationCursor.getAttrValue("line")[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 82, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (locationCursor.getNext() != null) { 	file = locationCursor.getAttrValue("file"); 	line = locatio[...] ` -topatch--> `if (false) { 	file = locationCursor.getAttrValue("file"); 	line = locationCursor.getAttrValue("line"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 82, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (locationCursor.getNext() != null) { 	file = locationCursor.getAttrValue("file"); 	line = locatio[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 72, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String id = errorCursor.getAttrValue("id"); 	java[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 70, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parsed = true ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 69, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (errorsCursor.getNext() != null) { 	parsed = true; 	org.codehaus.staxmate.in.SMInputCursor errorC[...] ` -topatch--> `if (true) { 	parsed = true; 	org.codehaus.staxmate.in.SMInputCursor errorCursor = errorsCursor.child[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 69, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (errorsCursor.getNext() != null) { 	parsed = true; 	org.codehaus.staxmate.in.SMInputCursor errorC[...] ` -topatch--> `if (false) { 	parsed = true; 	org.codehaus.staxmate.in.SMInputCursor errorCursor = errorsCursor.chil[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 69, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (errorsCursor.getNext() != null) { 	parsed = true; 	org.codehaus.staxmate.in.SMInputCursor errorC[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 97, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.parse(report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 82, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRuleRepository.KEY, fi[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `if (true) { 	this.sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRule[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `if (false) { 	this.sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.CxxCppCheckRul[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 81, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (isInputValid(id, msg)) { 	sensor.saveUniqueViolation(context, org.sonar.cxx.sensors.cppcheck.Cxx[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `if (true) {  	file = null; 	line = null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `if (false) {  	file = null; 	line = null; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 75, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("*".equals(file)) {  	file = null; 	line = null; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 72, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `file = file.replace('\\', '/') ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `if (true) { 	file = file.replace('\\', '/'); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `if (false) { 	file = file.replace('\\', '/'); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 71, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	file = file.replace('\\', '/'); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 65, pointed element: CtWhileImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (errorCursor.getNext() != null) { 	java.lang.String file = errorCursor.getAttrValue("file"); 	[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 58, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 79, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parser.processReport(context, report) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 81, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `parsed = true ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 80, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.info("Added report '{}' (parsed by: {})", repor[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 82, pointed element: CtBreakImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtBreakImpl) `break ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.error("Report {} cannot be pars[...] ` -topatch--> `if (true) { 	org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.error("Report {} cannot be parsed"[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.error("Report {} cannot be pars[...] ` -topatch--> `if (false) { 	org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.error("Report {} cannot be parsed[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 88, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor.LOG.error("Report {} cannot be pars[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	throw new javax.xml.stream.XMLStreamException(); } ` -topatch--> `if (true) { 	throw new javax.xml.stream.XMLStreamException(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	throw new javax.xml.stream.XMLStreamException(); } ` -topatch--> `if (false) { 	throw new javax.xml.stream.XMLStreamException(); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 109, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!parsed) { 	throw new javax.xml.stream.XMLStreamException(); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("2".equals(version)) { 	org.codehaus.staxmate.in.SMInputCursor errorsCursor = rootCursor.childEl[...] ` -topatch--> `if (true) { 	org.codehaus.staxmate.in.SMInputCursor errorsCursor = rootCursor.childElementCursor("er[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if ("2".equals(version)) { 	org.codehaus.staxmate.in.SMInputCursor errorsCursor = rootCursor.childEl[...] ` -topatch--> `if (false) { 	org.codehaus.staxmate.in.SMInputCursor errorsCursor = rootCursor.childElementCursor("e[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 67, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ("2".equals(version)) { 	org.codehaus.staxmate.in.SMInputCursor errorsCursor = rootCursor.childEl[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 60, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `rootCursor.advance() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 77, pointed element: CtForEachImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.sonar.cxx.sensors.cppcheck.CppcheckParser parser : parsers) { 	try { 		parser.processReport[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 50, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `org.sonar.cxx.sensors.cppcheck.CppcheckParserV2.LOG.debug("Parsing 'Cppcheck V2' format") ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 55, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.cppcheck.CppcheckParserV1(this)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CxxCppCheckSensor line: 54, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `parsers.add(new org.sonar.cxx.sensors.cppcheck.CppcheckParserV2(this)) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV1 line: 41, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.sensor = sensor ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.cppcheck.CppcheckParserV2 line: 41, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.sensor = sensor ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dir.exists() && dir.isDirectory()) { 	if ((suffixes != null) && (suffixes.length > 0)) { 		files[...] ` -topatch--> `if (true) { 	if ((suffixes != null) && (suffixes.length > 0)) { 		files.addAll(org.apache.commons.io[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dir.exists() && dir.isDirectory()) { 	if ((suffixes != null) && (suffixes.length > 0)) { 		files[...] ` -topatch--> `if (false) { 	if ((suffixes != null) && (suffixes.length > 0)) { 		files.addAll(org.apache.commons.i[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 107, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dir.exists() && dir.isDirectory()) { 	if ((suffixes != null) && (suffixes.length > 0)) { 		files[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 81, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `xmlLoader.load(repository, xmlStream, charset) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"".equals(fileName())) { 	java.io.InputStream xmlStream = getClass().getResourceAsStream(fileNa[...] ` -topatch--> `if (true) { 	java.io.InputStream xmlStream = getClass().getResourceAsStream(fileName()); 	xmlLoader.[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (!"".equals(fileName())) { 	java.io.InputStream xmlStream = getClass().getResourceAsStream(fileNa[...] ` -topatch--> `if (false) { 	java.io.InputStream xmlStream = getClass().getResourceAsStream(fileName()); 	xmlLoader[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 79, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!"".equals(fileName())) { 	java.io.InputStream xmlStream = getClass().getResourceAsStream(fileNa[...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 66, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.xmlRuleLoader = xmlRuleLoader ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 65, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.fileSystem = fileSystem ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 68, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.repositoryName = name ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 67, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.repositoryKey = key + language.getRepositorySuffix() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 70, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.language = language ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 69, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.customRepositoryKey = customKey ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 101, pointed element: CtInvocationImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `repository.done() ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (language.getStringOption(this.customRepositoryKey).isPresent()) { 	java.lang.String customRules [...] ` -topatch--> `if (true) { 	java.lang.String customRules = this.language.getStringOption(this.customRepositoryKey).[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (language.getStringOption(this.customRepositoryKey).isPresent()) { 	java.lang.String customRules [...] ` -topatch--> `if (false) { 	java.lang.String customRules = this.language.getStringOption(this.customRepositoryKey)[...]` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.utils.CxxAbstractRuleRepository line: 94, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (language.getStringOption(this.customRepositoryKey).isPresent()) { 	java.lang.String customRules [...] ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 56, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.dir = org.apache.commons.io.FilenameUtils.normalize(dir) ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 58, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	this.file = file; } ` -topatch--> `if (true) { 	this.file = file; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 58, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	this.file = file; } ` -topatch--> `if (false) { 	this.file = file; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 58, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (file != null) { 	this.file = file; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 59, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.file = file ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 52, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (fn != null) { 	this.fn = fn; } ` -topatch--> `if (true) { 	this.fn = fn; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 52, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (fn != null) { 	this.fn = fn; } ` -topatch--> `if (false) { 	this.fn = fn; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 52, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (fn != null) { 	this.fn = fn; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 53, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.fn = fn ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 55, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dir != null) { 	this.dir = org.apache.commons.io.FilenameUtils.normalize(dir); } ` -topatch--> `if (true) { 	this.dir = org.apache.commons.io.FilenameUtils.normalize(dir); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 55, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (dir != null) { 	this.dir = org.apache.commons.io.FilenameUtils.normalize(dir); } ` -topatch--> `if (false) { 	this.dir = org.apache.commons.io.FilenameUtils.normalize(dir); }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 55, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (dir != null) { 	this.dir = org.apache.commons.io.FilenameUtils.normalize(dir); } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 61, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (line != null) { 	this.line = line; } ` -topatch--> `if (true) { 	this.line = line; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 61, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (line != null) { 	this.line = line; } ` -topatch--> `if (false) { 	this.line = line; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 61, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (line != null) { 	this.line = line; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 62, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.line = line ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 49, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj != null) { 	this.obj = obj; } ` -topatch--> `if (true) { 	this.obj = obj; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 49, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (obj != null) { 	this.obj = obj; } ` -topatch--> `if (false) { 	this.obj = obj; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 49, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (obj != null) { 	this.obj = obj; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 50, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.obj = obj ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 46, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (ip != null) { 	this.ip = ip; } ` -topatch--> `if (true) { 	this.ip = ip; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 46, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
ReplaceIfBooleanOp:(spoon.support.reflect.code.CtIfImpl) `if (ip != null) { 	this.ip = ip; } ` -topatch--> `if (false) { 	this.ip = ip; }` (spoon.support.reflect.code.CtIfImpl) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 46, pointed element: CtIfImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ip != null) { 	this.ip = ip; } ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:59) - mod_point MP=org.sonar.cxx.sensors.valgrind.ValgrindFrame line: 47, pointed element: CtAssignmentImpl
[INFO ] fr.inria.astor.core.solutionsearch.ExhaustiveSearchEngine.startEvolution(ExhaustiveSearchEngine.java:60) - -->op: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.ip = ip ` -topatch--> `-` (null) 
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:171) - Time Repair Loop (s): 5375.515
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:173) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:255) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:265) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:190) - Time Total(s): 5451.518

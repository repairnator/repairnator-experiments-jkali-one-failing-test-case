@startuml

package "slf4j" {
  interface Logger
  interface ILoggerFactory
}

package "org.logevents" {

	class LoggerDelegator implements Logger {
	  levelThreshold : Level|"Inherit"
	  ownObserver : LogEventObserver
	  inheritParentObserver : boolean
	}
	
	class LogEventFactory implements ILoggerFactory {
	  setLogLevel(logger, level)
	  setLogEventObserver(logger, observer, inheritParent)
	  addObserver(logger, observer)
	}
	
	interface LogEventGenerator
	LoggerDelegator ..> LogEventGenerator
	
	class NullLogEventGenerator implements LogEventGenerator
	class LevelLogEventDelegator implements LogEventGenerator
	
	interface LogEventObserver {
	  name
	  configure(Properties)
	  logEvent(e)
	}
	LevelLogEventDelegator ..> LogEventObserver
	
	class CompositeLogEventObserver implements LogEventObserver
	class ConditionalLogEventObserver implements LogEventObserver
	class BatchingLogEventObserver implements LogEventObserver {
	  idleTime
	  cooldownTime
	  maximumWaitTime
	}
	class TextLogEventObserver implements LogEventObserver
	class CircularBufferLogEventDestination implements LogEventObserver
	CompositeLogEventObserver ..> "*" LogEventObserver
	ConditionalLogEventObserver ..> "1" LogEventObserver
	
	
	package "destinations" {
		interface LogEventFormatter
		TextLogEventObserver ..> LogEventFormatter
		class PatternFormatter implements LogEventFormatter
		
		interface LogEventDestination
		TextLogEventObserver ..> LogEventDestination

		class ConsoleLogEventDestination implements LogEventDestination
		class FileLogEventDestination implements LogEventDestination
		class RollingFileEventDestination extends FileLogEventDestination
	}
	
	class LogEventBatchProcessor
	BatchingLogEventObserver ..> LogEventBatchProcessor

}
	
@enduml

<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2006 sp2 U (http://www.altova.com) by gerry simon (home) -->
<!-- 

Style Notes, used throughout the schema:

	- Element and Type names begin with a capital letter.
	- Type names end with the word "Type".
	- Attribute names begin with a lowercase letter.
	- Usually, when the UML class diagram references classes, W3C Elements are used, and whenever
	  the UML references simple types (strings, ints), W3C Attributes are used.  In general, 
	  attributes are preferred over elements because they're easier to deal with 
	  in SAX and DOM, but whenever the Element/Attribute may one day carry metadata,
	  elements should be used.  One exception, is enumerated classes, because enumerations 
	  may be defined for attributes but not for elements.
	- Bias toward self-describing names over short, bandwidth conserving ones.
	- Use mixed case in names rather than underscores to combine multiple words (camelCase).
	- A documentation annotation is included in every element and type definition.  Annotations for a type are 
        included with the type definition, use of the type is annotated in the element definition.
	- Hints on units (for values with units) are provided in the names of attributes and 
	  elements (e.g. "dataRateInBPS" is preferred over "dataRate" OR "frameLengthInBits" is 
	  preferred over "frameLength").
	- Major elements or any elements used multiple times are first defined with a complexType definition
	- All collections are put inside either a "List" element or a "Set" Element depending on whether the collection
	  is ordered or unordered.
	- Simplicity in the XML files is favored over simplicity in the Schema
	- Whenever an additional validity check must be performed that is not describable in the schema language, 
	  an appinfo annotation describes that validity check.
-->
<schema xmlns:xtce="http://www.omg.org/space/xtce" xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.omg.org/space/xtce" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.2">
	<import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2001/03/xml.xsd"/>
	<annotation>
		<documentation xml:lang="en">This is the master schema for the OMG Space Domain Task Force XML Telemetric and Command data Exchange (XTCE) format.</documentation>
	</annotation>
	<!--******** SpaceSystem *********************-->
	<element name="SpaceSystem" type="xtce:SpaceSystemType" nillable="true">
		<annotation>
			<documentation xml:lang="en">The ROOT Element</documentation>
		</annotation>
		<key name="parameterNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique parameter name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ParameterSet/xtce:Parameter|xtce:CommandMetaData/xtce:ParameterSet/xtce:Parameter"/>
			<field xpath="@name"/>
		</key>
		<key name="parameterTypeNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique parameter type name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ParameterTypeSet/*|xtce:CommandMetaData/xtce:ParameterTypeSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="metaCommandNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique metaCommand name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:MetaCommandSet/xtce:MetaCommand"/>
			<field xpath="@name"/>
		</key>
		<key name="algorithmNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique algorithm name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:AlgorithmSet/*|xtce:CommandMetaData/xtce:AlgorithmSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="streamNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique stream name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:StreamSet/*|xtce:CommandMetaData/xtce:StreamSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="serviceNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique service name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:ServiceSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="containerNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a container stream name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:ContainerSet/*|xtce:CommandMetaData/xtce:CommandContainerSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="messageNameKey">
			<selector xpath="xtce:TelemetryMetaData/xtce:MessageSet/*"/>
			<field xpath="@name"/>
		</key>
		<!-- DAVEO removed eventNameKey for now -->
		<!-- key name="eventNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique event name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:TelemetryMetaData/xtce:EventMessageSet/*"/>
			<field xpath="@name"/>
		</key -->
		<key name="argumentTypeNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique argument type name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:ArgumentTypeSet/*|xtce:CommandMetaData/xtce:ParameterTypeSet/*"/>
			<field xpath="@name"/>
		</key>
		<key name="blockMetaCommandNameKey">
			<annotation>
				<documentation xml:lang="en">This key ensures a unique BlockMetaCommand name at the system level.</documentation>
			</annotation>
			<selector xpath="xtce:CommandMetaData/xtce:MetaCommandSet/xtce:BlockMetaCommand"/>
			<field xpath="@name"/>
		</key>
	</element>
	<complexType name="SpaceSystemType" mixed="false">
		<annotation>
			<documentation xml:lang="en">SpaceSystem is a collection of SpaceSystem(s) including space assets, ground assets, multi-satellite systems and sub-systems.  A SpaceSystem is the root element for the set of data necessary to monitor and command an arbitrary space device - this includes the binary decomposition the data streams going into and out of a device.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="Header" type="xtce:HeaderType" minOccurs="0"/>
					<element name="TelemetryMetaData" type="xtce:TelemetryMetaDataType" minOccurs="0"/>
					<element name="CommandMetaData" type="xtce:CommandMetaDataType" minOccurs="0"/>
					<element name="ServiceSet" type="xtce:ServiceSetType" minOccurs="0"/>
					<element ref="xtce:SpaceSystem" minOccurs="0" maxOccurs="unbounded"/>
				</sequence>
				<attribute name="operationalStatus" type="token" use="optional"/>
				<attribute ref="xml:base"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CommandMetaDataType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Command Meta Data contains information about commands</documentation>
		</annotation>
		<sequence>
			<element name="ParameterTypeSet" type="xtce:ParameterTypeSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of parameter types</documentation>
				</annotation>
			</element>
			<element name="ParameterSet" type="xtce:ParameterSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Parameters referenced by MetaCommands.  This Parameter Set is located here so that MetaCommand data can be built independently of TelemetryMetaData.</documentation>
				</annotation>
			</element>
			<element name="ArgumentTypeSet" type="xtce:ArgumentTypeSetType" minOccurs="0"/>
			<element name="MetaCommandSet" type="xtce:MetaCommandSetType" minOccurs="0"/>
			<element name="CommandContainerSet" type="xtce:CommandContainerSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">The Command Container defines the construction of a Command.</documentation>
				</annotation>
			</element>
			<element name="StreamSet" type="xtce:StreamSetType" minOccurs="0"/>
			<element name="AlgorithmSet" type="xtce:AlgorithmSetType" minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="TelemetryMetaDataType" mixed="false">
		<annotation>
			<documentation xml:lang="en">All the data about telemetry is contained in TelemetryMetaData</documentation>
		</annotation>
		<sequence>
			<element name="ParameterTypeSet" type="xtce:ParameterTypeSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of parameter types</documentation>
				</annotation>
			</element>
			<element name="ParameterSet" type="xtce:ParameterSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">A list of Parameters for this Space System.  </documentation>
				</annotation>
			</element>
			<element name="ContainerSet" type="xtce:ContainerSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Holds the list of all potential container definitions for telemetry. Containers may parts of packets or TDM, and then groups of the containers, and then an entire entity -- such as a packet.  In order to maximize re-used for duplication, the pieces may defined once here, and then assembled as needed into larger structures, also here.</documentation>
				</annotation>
			</element>
			<element name="MessageSet" type="xtce:MessageSetType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Messages are an alternative method of uniquely identifying containers within a Service.  A message provides a test in the form of MatchCriteria to match to a container.  A simple example might be: [When minorframeID=21, the message is the 21st minorframe container.  The collection of messages to search thru will be bound by a Service.</documentation>
				</annotation>
			</element>
			<element name="StreamSet" type="xtce:StreamSetType" minOccurs="0"/>
			<element name="AlgorithmSet" type="xtce:AlgorithmSetType" minOccurs="0"/>
		</sequence>
	</complexType>
	<!--****** End of Top Level SpaceSystem Schema *****-->
	<!--*************************************************************-->
	<!--****** Packaging Schema *******************************-->
	<annotation>
		<documentation xml:lang="en">This schema defines the dictionary for containers, which in turn describe the physical composition of data in a communication system</documentation>
	</annotation>
	<complexType name="ArrayParameterRefEntryType">
		<annotation>
			<documentation>Describe an entry that is an array parameter. Specify the dimension sizes if you subsetting the array (the number of dimensions shall match the number defined in the parameter’s type definition), otherwise the ones in the ParameterType are assumed.  See SequenceEntryType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<sequence minOccurs="0">
					<annotation>
						<documentation>Only used for subsetting an array.  The array's maximum dimension sizes are set in the type.  When a DimensionList is not used, the array is the full size provided in the type.</documentation>
					</annotation>
					<element name="DimensionList" type="xtce:DimensionListType">
						<annotation>
							<documentation>The dimension here if used for subsetting must be less than the ones in the type.  It's not a subset if its the same size.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseAlarmType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Supplies an optional non-reference-able name and short description for alarms.  Also includes an optional ancillary data for any special local flags, note that these may not necessarily transfer to another recipient of an instance document.</documentation>
		</annotation>
		<sequence>
			<element name="AncillaryDataSet" type="xtce:AncillaryDataSetType" minOccurs="0"/>
		</sequence>
		<attribute name="name" type="string" use="optional">
			<annotation>
				<documentation xml:lang="en">The alarm definition may be named.</documentation>
			</annotation>
		</attribute>
		<attribute name="shortDescription" type="xtce:ShortDescriptionType">
			<annotation>
				<documentation xml:lang="en">An optional brief description of this alarm definition.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="BaseContainerType">
		<sequence>
			<element name="RestrictionCriteria" type="xtce:RestrictionCriteriaType" minOccurs="0"/>
		</sequence>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="ContainerType" abstract="true" mixed="false">
		<annotation>
			<documentation xml:lang="en">An abstract block of data; used as the base type for more specific container types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<annotation>
						<documentation xml:lang="en">RateInStream is used to:  a) generate alarms when the Container is updated too frequently or too infrequently, b) provide some 'guidelines' for generating forward link containers, c) provide some guidelines for spacecraft simulators to generate telemetry containers.  If necessary, these rates may be defined on a per stream basis.</documentation>
						<appinfo>The software should check that any Stream names referenced in the RateInStreamSet actually exist.</appinfo>
					</annotation>
					<element name="DefaultRateInStream" type="xtce:RateInStreamType" minOccurs="0"/>
					<element name="RateInStreamSet" type="xtce:RateInStreamSetType" minOccurs="0"/>
					<element name="BinaryEncoding" type="xtce:BinaryDataEncodingType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">May be used to indicate error detection and correction, change byte order,  provide the size (when it can't be derived), or perform some custom processing.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerRefSetType">
		<sequence>
			<element name="ContainerRef" type="xtce:ContainerRefType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ContainerRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a container</documentation>
		</annotation>
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of container</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ContainerRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is simply a reference to another container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="containerRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerSegmentRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is only a portion of a container indicating that the entire container must be assembled from other container segments.   It is assumed that container segments happen sequentially in time, that is the first part of a container is first, however (and there's always a however), if this is not the case the order of this container segment may be supplied with the order attribute where the first segment order="0".  Each instance of a container cannot overlap in the overall sequence with another instance</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="containerRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="order" type="positiveInteger"/>
				<attribute name="sizeInBits" type="positiveInteger" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContainerSetType">
		<annotation>
			<documentation xml:lang="en">Unordered Set of Containers</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="SequenceContainer" type="xtce:SequenceContainerType">
				<annotation>
					<documentation xml:lang="en">SequenceContainers define sequences of parameters or other containers.  </documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="EntryListType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Contains an ordered list of Entries.  Used in Sequence Container</documentation>
		</annotation>
		<choice minOccurs="0" maxOccurs="unbounded">
			<element name="ParameterRefEntry" type="xtce:ParameterRefEntryType"/>
			<element name="ParameterSegmentRefEntry" type="xtce:ParameterSegmentRefEntryType"/>
			<element name="ContainerRefEntry" type="xtce:ContainerRefEntryType"/>
			<element name="ContainerSegmentRefEntry" type="xtce:ContainerSegmentRefEntryType"/>
			<element name="StreamSegmentEntry" type="xtce:StreamSegmentEntryType"/>
			<element name="IndirectParameterRefEntry" type="xtce:IndirectParameterRefEntryType"/>
			<element name="ArrayParameterRefEntry" type="xtce:ArrayParameterRefEntryType"/>
		</choice>
	</complexType>
	<complexType name="IndirectParameterRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry whose name is given by the value of a ParamameterInstance.  This entry may be used to implement dwell telemetry streams.  The value of the parameter in ParameterInstance must use either the name of the Parameter or its alias.  If it's an alias name, the alias namespace is supplied as an attribute.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<sequence>
					<element name="ParameterInstance" type="xtce:ParameterInstanceRefType"/>
				</sequence>
				<attribute name="aliasNameSpace" type="string"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="LocationInContainerInBitsType">
		<annotation>
			<documentation xml:lang="en">Addresses are relative to the container the entry is in.  Zero is always the start of the container.  If the container is an entry in another, the referring container's entry address is added to the one being referred to the compute addresses. For container inheritance, the root container starts at address zero.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerValueType">
				<attribute name="referenceLocation" type="xtce:ReferenceLocationType" default="previousEntry"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MessageRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a message</documentation>
		</annotation>
		<attribute name="messageRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of message</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ParameterRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is a single Parameter</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterSegmentRefEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is only a portion of a parameter value indicating that the entire parameter value must be assembled from other parameter segments.   It is assumed that parameter segments happen sequentially in time, that is the first part if a telemetry parameter first, however (and there's always a however), if this is not the case the order of this parameter segment may be supplied with the order attribute where the first segment order="0".</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="parameterRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="order" type="positiveInteger"/>
				<attribute name="sizeInBits" type="positiveInteger" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="SequenceContainerType">
		<annotation>
			<documentation xml:lang="en">A list of raw parameters, parameter segments, stream segments, containers, or container segments.  Sequence containers may inherit from other sequence containers; when they do, the sequence in the parent SequenceContainer is 'inherited' and if the location of entries in the child sequence is not specified, it is assumed to start where the parent sequence ended.  Parent sequence containers may be marked as "abstract".  The idle pattern is part of any unallocated space in the Container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ContainerType">
				<sequence>
					<element name="EntryList" type="xtce:EntryListType"/>
					<element name="BaseContainer" type="xtce:BaseContainerType" minOccurs="0"/>
				</sequence>
				<attribute name="abstract" type="boolean" default="false"/>
				<attribute name="idlePattern" type="xtce:FixedIntegerValueType" default="0x0"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="SequenceEntryType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type used by sequence containers. An entry contains a location in the container. The location may be either fixed or dynamic, absolute (to the start or 	end of the enclosing container, or relative (to either the previous or subsequent entry). Entries may also repeat.</documentation>
		</annotation>
		<sequence>
			<element name="LocationInContainerInBits" type="xtce:LocationInContainerInBitsType" minOccurs="0"/>
			<element name="RepeatEntry" type="xtce:RepeatType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">
						May be used when this entry repeats itself in
						the sequence container. If not supplied, the
						entry does not repeat.
					</documentation>
				</annotation>
			</element>
			<element name="IncludeCondition" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">
						This entry will only be included in the sequence
						when this condition is true. If no
						IncludeCondition is given, then it is will be
						included. A parameter that is not included will
						be treated as if it did not exist in the
						sequence at all.
					</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="shortDescription" type="string" use="optional"/>
	</complexType>
	<complexType name="ServiceType">
		<annotation>
			<documentation xml:lang="en">Holds a set of services, logical groups of containers  OR messages (not both).</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<choice>
					<element name="MessageRefSet" type="xtce:MessageRefSetType"/>
					<element name="ContainerRefSet" type="xtce:ContainerRefSetType"/>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StreamSegmentEntryType">
		<annotation>
			<documentation xml:lang="en">An entry that is a portion of a stream (streams are by definition, assumed continuous)   It is assumed that stream segments happen sequentially in time, that is the first part if a steam first, however, if this is not the case the order of the stream segments may be supplied with the order attribute where the first segment order="0".</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="streamRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="order" type="positiveInteger"/>
				<attribute name="sizeInBits" type="positiveInteger" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MessageType">
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MatchCriteria" type="xtce:MatchCriteriaType"/>
					<element name="ContainerRef" type="xtce:ContainerRefType">
						<annotation>
							<documentation xml:lang="en">The ContainerRef should point to ROOT container that will describe an entire packet/minor frame or chunk of telemetry.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MessageSetType">
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<sequence>
					<element name="Message" type="xtce:MessageType" maxOccurs="unbounded"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RateInStreamSetType">
		<sequence>
			<element name="RateInStream" type="xtce:RateInStreamWithStreamNameType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="RateInStreamType">
		<annotation>
			<documentation xml:lang="en">Used in packaging to define the expected rate that any individual container will be in a Stream</documentation>
		</annotation>
		<attribute name="basis" type="xtce:BasisType" default="perSecond"/>
		<attribute name="minimumValue" type="double"/>
		<attribute name="maximumValue" type="double"/>
	</complexType>
	<complexType name="RateInStreamWithStreamNameType">
		<complexContent>
			<extension base="xtce:RateInStreamType">
				<attribute name="streamRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="ReferenceLocationType">
		<annotation>
			<documentation xml:lang="en">The location may be relative to the start of the container (containerStart), relative to the end of the previous entry (previousEntry), relative to the end of the container (containerEnd), or relative to the entry that follows this one (nextEntry). If going forward (containerStart and previousEntry) then the location refers to the start of the									Entry. If going backwards (containerEnd and nextEntry) then, the location refers to the end of the entry.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="containerStart"/>
			<enumeration value="containerEnd"/>
			<enumeration value="previousEntry"/>
			<enumeration value="nextEntry"/>
		</restriction>
	</simpleType>
	<simpleType name="ReferencePointType">
		<restriction base="string">
			<enumeration value="start"/>
			<enumeration value="end"/>
		</restriction>
	</simpleType>
	<complexType name="RestrictionCriteriaType">
		<annotation>
			<documentation xml:lang="en">Given that this Container is the Base container type, RestrictionCriteria lists conditions that must be true for this Container to be 'this' subContainer type.  May be a simple Comparison List, a Boolean Expression, and/or in a Graph of containers established by the NextContainer</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<choice>
					<element name="NextContainer" type="xtce:ContainerRefType" minOccurs="0"/>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<!--****** End of Packaging Schema **********************-->
	<!--*************************************************************-->
	<!--****** Telemetry Schema *******************************-->
	<annotation>
		<documentation xml:lang="en">This schema defines the dictionary for telemetry</documentation>
	</annotation>
	<complexType name="AbsoluteTimeParameterType">
		<complexContent>
			<extension base="xtce:AbsoluteTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="AggregateParameterType">
		<annotation>
			<documentation xml:lang="en">AggegateParameters are analogous to a C struc, they are an aggregation of related data items.  Each of these data items is defined here as a 'Member' </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AggregateDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArrayParameterType">
		<annotation>
			<documentation>Describe an array parameter type.  The size and number of dimensions are described here. See ArrayParameterRefEntryType, NameReferenceType and ArrayDataType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ArrayDataTypeType"/>
		</complexContent>
	</complexType>
	<complexType name="BinaryParameterType">
		<complexContent>
			<extension base="xtce:BinaryDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:AlarmType" minOccurs="0"/>
					<element name="BinaryContextAlarmList" type="xtce:BinaryContextAlarmListType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanParameterType">
		<complexContent>
			<extension base="xtce:BooleanDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:BooleanAlarmType" minOccurs="0"/>
					<element name="ContextAlarmList" type="xtce:BooleanContextAlarmListType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="DerivationType">
		<annotation>
			<documentation>Result of the MathOperation will be the new Parameter value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MathOperationType"/>
		</complexContent>
	</complexType>
	<complexType name="EnumeratedParameterType">
		<complexContent>
			<extension base="xtce:EnumeratedDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:EnumerationAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Describe labels for this parameter that should be in an alarm state.  The default definition applies when there are no context alarm definitions or all the context alarm definitions evaluate to false in their matching criteria.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:EnumerationContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Describe labels for this parameter that should be in an alarm state when another parameter and value combination evaluates to true using the described matching criteria.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumerationContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">Describe an ordered collection of context enumeration alarms, duplicates are valid.  Process the contexts in list order.  See EnumerationContextAlarmType.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:EnumerationContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Describe the alarm matching context criteria and the alarm definition itself.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="FloatParameterType">
		<complexContent>
			<extension base="xtce:FloatDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:NumericAlarmType" minOccurs="0"/>
					<element name="ContextAlarmList" type="xtce:NumericContextAlarmListType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerParameterType">
		<annotation>
			<documentation xml:lang="en">Describe an integer parameter type. Several are supported.  Calibrated integer to integer relationships should be described with this data type. Use the integer data encoding to define calibrators. Joins float as one of the numerics. See IntegerDataEncoding and IntegerDataType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:IntegerDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:NumericAlarmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Default alarm definitions are those which do not adjust definition logic based on the value of other parameters.  Other parameters may participate in the determination of an alarm condition for this parameter, but the definition logic of the alarm on this parameter is constant.  If the alarming logic on this parameter changes based on the value of other parameters, then it is a ContextAlarm and belongs in the ContextAlarmList element.</documentation>
						</annotation>
					</element>
					<element name="ContextAlarmList" type="xtce:NumericContextAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Context alarm definitions are those which adjust the definition logic for this parameter based on the value of other parameters.  A context which evaluates to being in effect, based on the testing of another parameter, takes precedence over the default alarms in the DefaultAlarm element.  If the no context alarm evaluates to being in effect, based on the testing of another parameter, then the default alarm definitions from the DefaultAlarm element will remain in effect.  If multiple contexts evaluate to being in effect, then the first one that appears will take precedence.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MessageRefSetType">
		<sequence>
			<element name="MessageRef" type="xtce:MessageRefType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="NumericContextAlarmListType">
		<annotation>
			<documentation xml:lang="en">An ordered collection of numeric alarms associated with a context.  A context is an alarm definition on a parameter which is valid only in the case of a test on the value of other parameters. Process the contexts in list order. Used by both FloatParameterType and IntegerParameterType. See NumericContextAlarmType.</documentation>
		</annotation>
		<sequence>
			<element name="ContextAlarm" type="xtce:NumericContextAlarmType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">A contextual alarm definition for the parameter that uses this type that is valid when a test against the value of one or more other parameters evaluates to true.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="ParameterInstanceRefType">
		<annotation>
			<documentation xml:lang="en">A reference to an instance of a Parameter.   Used when the value of a parameter is required for a calculation or as an index value.  A positive value for instance is forward in time, a negative value for count is backward in time, a 0 value for count means use the current value of the parameter or the first value in a container.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="instance" type="integer" default="0"/>
				<attribute name="useCalibratedValue" type="boolean" default="true"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterPropertiesType" mixed="false">
		<annotation>
			<documentation xml:lang="en">A wrapper for those properties that are unique to telemetry parameters.</documentation>
		</annotation>
		<sequence>
			<element name="SystemName" type="string" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Optional.  Normally used when the database is built in a flat, non-hierarchical format</documentation>
				</annotation>
			</element>
			<element name="ValidityCondition" type="xtce:MatchCriteriaType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Optional condition that must be true for this Parameter to be valid</documentation>
				</annotation>
			</element>
			<element name="PhysicalAddressSet" type="xtce:PhysicalAddressSetType" minOccurs="0"/>
			<element name="TimeAssociation" type="xtce:TimeAssociationType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">This time will override any Default value for TimeAssociation. </documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="dataSource" type="xtce:TelemetryDataSourceType" use="optional"/>
		<attribute name="readOnly" type="boolean" use="optional" default="false">
			<annotation>
				<documentation xml:lang="en">A Parameter marked as 'readOnly' true is constant and non-settable</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ParameterType">
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="ParameterProperties" type="xtce:ParameterPropertiesType" minOccurs="0"/>
				</sequence>
				<attribute name="parameterTypeRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="initialValue" type="string" use="optional">
					<annotation>
						<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
						<appinfo>The value type must match the Parameter type</appinfo>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterTypeSetType">
		<annotation>
			<documentation xml:lang="en">Holds the list of parameter type definitions. A Parameter is a description of something that can have a value; it is not the value itself.   </documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="StringParameterType" type="xtce:StringParameterType"/>
			<element name="EnumeratedParameterType" type="xtce:EnumeratedParameterType"/>
			<element name="IntegerParameterType" type="xtce:IntegerParameterType"/>
			<element name="BinaryParameterType" type="xtce:BinaryParameterType"/>
			<element name="FloatParameterType" type="xtce:FloatParameterType"/>
			<element name="BooleanParameterType" type="xtce:BooleanParameterType"/>
			<element name="RelativeTimeParameterType" type="xtce:RelativeTimeParameterType"/>
			<element name="AbsoluteTimeParameterType" type="xtce:AbsoluteTimeParameterType"/>
			<element name="ArrayParameterType" type="xtce:ArrayParameterType"/>
			<element name="AggregateParameterType" type="xtce:AggregateParameterType"/>
		</choice>
	</complexType>
	<complexType name="ParameterRefType">
		<annotation>
			<documentation xml:lang="en">A reference to a Parameter. Uses Unix ‘like’ naming across the SpaceSystem Tree (e.g., SimpleSat/Bus/EPDS/BatteryOne/Voltage).  To reference an individual member of an array use the zero based bracket notation commonly used in languages like C, C++, and Java.</documentation>
		</annotation>
		<attribute name="parameterRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="PhysicalAddressSetType">
		<annotation>
			<documentation xml:lang="en">One or more physical addresses may be associated with each Parameter.  Examples of physical addresses include a location on the spacecraft or a location on a data collection bus. </documentation>
		</annotation>
		<sequence>
			<element name="PhysicalAddress" type="xtce:PhysicalAddressType" minOccurs="0" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Contains the address (e.g., channel information) required to process the spacecraft telemetry streams. May be an onboard  id, a mux address, or a physical location.</documentation>
					<documentation xml:lang="en">Contains the address (channel information) required to process the spacecraft telemetry streams</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="PhysicalAddressType" mixed="false">
		<annotation>
			<documentation xml:lang="en">When it's important to know the physical address(s) on the spacecraft that this parameter may be collected from, use this.  </documentation>
		</annotation>
		<sequence>
			<element name="SubAddress" type="xtce:PhysicalAddressType" minOccurs="0"/>
		</sequence>
		<attribute name="sourceName" type="string"/>
		<attribute name="sourceAddress" type="string"/>
	</complexType>
	<complexType name="ServiceSetType">
		<annotation>
			<documentation xml:lang="en">A service is a logical grouping of container and/or messages.</documentation>
		</annotation>
		<sequence>
			<element name="Service" type="xtce:ServiceType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="StringParameterType">
		<complexContent>
			<extension base="xtce:StringDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:StringAlarmType" minOccurs="0"/>
					<element name="ContextAlarmList" type="xtce:StringContextAlarmListType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeParameterType">
		<complexContent>
			<extension base="xtce:RelativeTimeDataType">
				<sequence>
					<element name="DefaultAlarm" type="xtce:TimeAlarmType" minOccurs="0"/>
					<element name="ContextAlarmList" type="xtce:TimeContextAlarmListType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="TelemetryDataSourceType">
		<annotation>
			<documentation xml:lang="en">A telemetered Parameter is one that will have values in telemetry. A derived Parameter is one that is calculated, usually by an Algorithm. A constant Parameter is one that is used as a constant in the system (e.g. a vehicle id). A local Parameter is one that is used purely by the software locally (e.g. a ground command counter). A ground Parameter is one that is generated by an asset which is not the spacecraft.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="telemetered"/>
			<enumeration value="derived"/>
			<enumeration value="constant"/>
			<enumeration value="local"/>
			<enumeration value="ground"/>
		</restriction>
	</simpleType>
	<complexType name="TimeAssociationType">
		<annotation>
			<documentation xml:lang="en">Telemetry parameter instances are oftentimes "time-tagged" with a timing signal either provided on the ground or on  the space system.  This data element allows one to specify which of possibly many AbsoluteTimeParameters to use to "time-tag" parameter instances with.  </documentation>
			<appinfo>The parameter ref must be to an AbsoluteTime Parameter</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="interpolateTime" type="boolean" default="true">
					<annotation>
						<documentation xml:lang="en">If true, then the current value of the AbsoluteTime will be projected to current time.  In other words, if the value of the AbsoluteTime parameter was set 10 seconds ago, then 10 seconds will be added to its value before associating this time with the parameter.</documentation>
					</annotation>
				</attribute>
				<attribute name="offset" type="double">
					<annotation>
						<documentation xml:lang="en">The offset is used to supply a relative time offset from the time association and to this parameter</documentation>
					</annotation>
				</attribute>
				<attribute name="unit" type="xtce:TimeAssociationUnitType" default="si_second">
					<annotation>
						<documentation>Specify the units the offset is in, the default is si_second.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="TimeWindowIsRelativeToType">
		<restriction base="string">
			<enumeration value="commandRelease"/>
			<enumeration value="timeLastVerifierPassed"/>
		</restriction>
	</simpleType>
	<!--****** End of Telemetry Schema ***********************-->
	<!--*************************************************************-->
	<!--****** Command Schema *******************************-->
	<annotation>
		<documentation xml:lang="en">This schema defines the dictionary for commanding</documentation>
	</annotation>
	<complexType name="AbsoluteTimeArgumentType">
		<complexContent>
			<extension base="xtce:AbsoluteTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArrayArgumentType">
		<annotation>
			<documentation>Describe an array argument type.  The size and number of dimension are described here. See ArrayParameterRefEntryType, NameReferenceType and ArrayDataType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ArrayDataTypeType"/>
		</complexContent>
	</complexType>
	<complexType name="AggregateArgumentType">
		<complexContent>
			<extension base="xtce:AggregateDataType"/>
		</complexContent>
	</complexType>
	<complexType name="ArgumentAssignmentListType">
		<sequence>
			<element name="ArgumentAssignment" type="xtce:ArgumentAssignmentType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ArgumentAssignmentType">
		<attribute name="argumentName" type="xtce:NameReferenceType" use="required"/>
		<attribute name="argumentValue" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ArgumentListType">
		<choice maxOccurs="unbounded">
			<element name="Argument" type="xtce:ArgumentType" maxOccurs="unbounded">
				<annotation>
					<appinfo>Need to ensure that the named types actually exist</appinfo>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="ArrayArgumentRefEntryType">
		<annotation>
			<documentation>Describe an entry that is an array argument. Specify the dimension sizes (the number of dimensions shall match the number defined in the parameter’s type definition).   Valid constructions should have all indexes contiguously defined. See SequenceEntryType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ArrayParameterRefEntryType"/>
		</complexContent>
	</complexType>
	<complexType name="ArgumentRefEntryType">
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="argumentRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArgumentType">
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="argumentTypeRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArgumentTypeSetType">
		<annotation>
			<documentation xml:lang="en">Holds the list of argument type definitions. </documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="StringArgumentType" type="xtce:StringArgumentType"/>
			<element name="EnumeratedArgumentType" type="xtce:EnumeratedArgumentType"/>
			<element name="IntegerArgumentType" type="xtce:IntegerArgumentType"/>
			<element name="BinaryArgumentType" type="xtce:BinaryArgumentType"/>
			<element name="FloatArgumentType" type="xtce:FloatArgumentType"/>
			<element name="BooleanArgumentType" type="xtce:BooleanArgumentType"/>
			<element name="RelativeTimeAgumentType" type="xtce:RelativeTimeArgumentType"/>
			<element name="AbsoluteTimeArgumentType" type="xtce:AbsoluteTimeArgumentType"/>
			<element name="ArrayArgumentType" type="xtce:ArrayArgumentType"/>
			<element name="AggregateArgumentType" type="xtce:AggregateArgumentType"/>
		</choice>
	</complexType>
	<complexType name="ArgumentValueAssignmentListType">
		<sequence>
			<element name="Argument" type="xtce:ArgumentValueAssignmentType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ArgumentValueAssignmentType">
		<attribute name="name" type="xtce:NameReferenceType" use="required"/>
		<attribute name="value" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="BaseMetaCommandType">
		<annotation>
			<documentation xml:lang="en">The MetaCommand is derived from this Base.  Arguments of the base MetaCommand are further specified.</documentation>
		</annotation>
		<sequence>
			<element name="ArgumentAssignmentList" type="xtce:ArgumentAssignmentListType" minOccurs="0"/>
		</sequence>
		<attribute name="metaCommandRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="BinaryArgumentType">
		<complexContent>
			<extension base="xtce:BinaryDataType"/>
		</complexContent>
	</complexType>
	<complexType name="BlockMetaCommandType">
		<annotation>
			<documentation xml:lang="en">BlockMetaCommands are simply a list of individual MetaCommands that can be packaged up in a single BlockMetaCommand.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MetaCommandStepList" type="xtce:MetaCommandStepListType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanArgumentType">
		<complexContent>
			<extension base="xtce:BooleanDataType"/>
		</complexContent>
	</complexType>
	<complexType name="CommandContainerEntryListType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Similar to an EntryList type but also may include command arguments or -as a convenience - fixed value entries.</documentation>
		</annotation>
		<choice minOccurs="0" maxOccurs="unbounded">
			<element name="ParameterRefEntry" type="xtce:ParameterRefEntryType"/>
			<element name="ParameterSegmentRefEntry" type="xtce:ParameterSegmentRefEntryType"/>
			<element name="ContainerRefEntry" type="xtce:ContainerRefEntryType"/>
			<element name="ContainerSegmentRefEntry" type="xtce:ContainerSegmentRefEntryType"/>
			<element name="StreamSegmentEntry" type="xtce:StreamSegmentEntryType"/>
			<element name="IndirectParameterRefEntry" type="xtce:IndirectParameterRefEntryType"/>
			<element name="ArrayParameterRefEntry" type="xtce:ArrayParameterRefEntryType"/>
			<element name="ArgumentRefEntry" type="xtce:ArgumentRefEntryType"/>
			<element name="ArrayArgumentRefEntry" type="xtce:ArrayParameterRefEntryType"/>
			<element name="FixedValueEntry" type="xtce:FixedValueEntryType"/>
		</choice>
	</complexType>
	<complexType name="CommandContainerSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered Set of Command Containers</documentation>
		</annotation>
		<sequence>
			<element name="CommandContainer" type="xtce:SequenceContainerType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="CommandContainerType" mixed="false">
		<annotation>
			<documentation xml:lang="en">The Key = Command Op Code.  Each MetaCommand may have one CommandContainer.  The sequence may now contain command fields</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ContainerType">
				<sequence>
					<element name="EntryList" type="xtce:CommandContainerEntryListType"/>
					<element name="BaseContainer" type="xtce:BaseContainerType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="CommandVerifierType" abstract="true">
		<annotation>
			<documentation xml:lang="en">A command verifier is used to check that the command has been successfully executed. Command Verifiers may be either a Custom Algorithm or a Boolean Check or the presence of a Container for a relative change in the value of a Parameter.  The CheckWindow is a time period where the verification must test true to pass.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<sequence>
					<choice>
						<element name="ComparisonList" type="xtce:ComparisonListType"/>
						<element name="ContainerRef" type="xtce:ContainerRefType">
							<annotation>
								<documentation xml:lang="en">When verification is a new instance the referenced container. For example, sending a command to download memory then receiving a packet with the memory download would be verified upon receipt of the packet</documentation>
							</annotation>
						</element>
						<element name="ParameterValueChange" type="xtce:ParameterValueChangeType"/>
						<element name="CustomAlgorithm" type="xtce:InputAlgorithmType"/>
						<element name="BooleanExpression" type="xtce:BooleanExpressionType"/>
						<element name="Comparison" type="xtce:ComparisonType"/>
					</choice>
					<choice>
						<element name="CheckWindow" type="xtce:CheckWindowType"/>
						<element name="CheckWindowAlgorithms" type="xtce:CheckWindowAlgorithmsType"/>
					</choice>
				</sequence>

			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumeratedArgumentType">
		<complexContent>
			<extension base="xtce:EnumeratedDataType"/>
		</complexContent>
	</complexType>
	<complexType name="FloatArgumentType">
		<complexContent>
			<extension base="xtce:FloatDataType">
				<sequence>
					<element name="ValidRangeSet" type="xtce:ValidFloatRangeSetType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerArgumentType">
		<complexContent>
			<extension base="xtce:IntegerDataType">
				<sequence>
					<element name="ValidRangeSet" type="xtce:ValidIntegerRangeSetType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MetaCommandSetType">
		<annotation>
			<documentation xml:lang="en">A set of Command Definitions</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="MetaCommand" type="xtce:MetaCommandType">
				<annotation>
					<documentation xml:lang="en">All commands to be sent on this mission are listed here.  In addition this area has verification and validation information</documentation>
				</annotation>
				<key name="ArgumentNameKey">
					<selector xpath="xtce:ArgumentList/*"/>
					<field xpath="@name"/>
				</key>
			</element>
			<element name="MetaCommandRef" type="xtce:NameReferenceType">
				<annotation>
					<documentation xml:lang="en">Used to include a MetaCommand defined in another sub-system in this sub-system.</documentation>
				</annotation>
			</element>
			<element name="BlockMetaCommand" type="xtce:BlockMetaCommandType"/>
		</choice>
	</complexType>
	<complexType name="MetaCommandStepListType">
		<sequence>
			<element name="MetaCommandStep" type="xtce:MetaCommandStepType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="MetaCommandStepType">
		<annotation>
			<documentation>Describe a MetaCommand step, consisting MetaCommand reference and argument list. See MetaCommandStepListType and NameReferenceType.</documentation>
		</annotation>
		<sequence>
			<element name="ArgumentAssigmentList" type="xtce:ArgumentAssignmentListType" minOccurs="0"/>
		</sequence>
		<attribute name="metaCommandRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="MetaCommandType" mixed="false">
		<annotation>
			<documentation xml:lang="en">A type definition used as the base type for a CommandDefinition</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="BaseMetaCommand" type="xtce:BaseMetaCommandType" minOccurs="0"/>
					<element name="SystemName" type="string" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Optional.  Normally used when the database is built in a flat, non-hierarchical format</documentation>
						</annotation>
					</element>
					<element name="ArgumentList" type="xtce:ArgumentListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Many commands have one or more options.  These are called command arguments.  Command arguments may be of any of the standard data types.  MetaCommand arguments are local to the MetaCommand.</documentation>
						</annotation>
					</element>
					<element name="CommandContainer" type="xtce:CommandContainerType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Tells how to package this command</documentation>
						</annotation>
					</element>
					<element name="TransmissionConstraintList" type="xtce:TransmissionConstraintListType" minOccurs="0"/>
					<element name="DefaultSignificance" type="xtce:SignificanceType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Some Command and Control Systems may require special user access or confirmations before transmitting commands with certain levels.  The level is inherited from the Base MetaCommand.</documentation>
						</annotation>
					</element>
					<element name="ContextSignificanceList" type="xtce:ContextSignificanceListType" minOccurs="0"/>
					<element name="Interlock" type="xtce:InterlockType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">An Interlock is a type of Constraint, but not on Command instances of this MetaCommand; Interlocks apply instead to the next command.  An Interlock will block successive commands until this command has reached a certain stage (through verifications).  Interlocks are scoped to a SpaceSystem basis.</documentation>
						</annotation>
					</element>
					<element name="VerifierSet" type="xtce:VerifierSetType" minOccurs="0"/>
					<element name="ParameterToSetList" type="xtce:ParameterToSetListType" minOccurs="0"/>
					<element name="ParametersToSuspendAlarmsOnSet" type="xtce:ParametersToSuspendAlarmsOnSetType" minOccurs="0"/>
				</sequence>
				<attribute name="abstract" type="boolean" default="false"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeArgumentType">
		<complexContent>
			<extension base="xtce:RelativeTimeDataType"/>
		</complexContent>
	</complexType>
	<complexType name="SignificanceType" mixed="false">
		<annotation>
			<documentation xml:lang="en">Significance provides some cautionary information about the potential consequence of each MetaCommand.</documentation>
		</annotation>
		<attribute name="spaceSystemAtRisk" type="xtce:NameReferenceType">
			<annotation>
				<documentation xml:lang="en">If none is supplied, then the current SpaceSystem is assumed to be the one at risk by the issuance of this command</documentation>
			</annotation>
		</attribute>
		<attribute name="reasonForWarning" type="string"/>
		<attribute name="consequenceLevel" type="xtce:ConsequenceLevelType" default="normal"/>
	</complexType>
	<complexType name="StringArgumentType">
		<complexContent>
			<extension base="xtce:StringDataType"/>
		</complexContent>
	</complexType>
	<!--*************************************************************-->
	<!--******** Types used with Cmd Execution Control ****-->
	<complexType name="AcceptedVerifierType">
		<annotation>
			<documentation xml:lang="en">A verifier that means the SpaceSystem has accepted the command</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="CheckWindowType">
		<attribute name="timeToStartChecking" type="xtce:RelativeTimeType"/>
		<attribute name="timeToStopChecking" type="xtce:RelativeTimeType" use="required"/>
		<attribute name="timeWindowIsRelativeTo" type="xtce:TimeWindowIsRelativeToType" default="timeLastVerifierPassed"/>
	</complexType>
	<complexType name="CheckWindowAlgorithmsType">
		<annotation>
			<documentation xml:lang="en">Used when times must be calculated</documentation>
		</annotation>
		<sequence>
			<element name="StartCheck" type="xtce:InputAlgorithmType"/>
			<element name="StopTime" type="xtce:InputAlgorithmType"/>
		</sequence>
	</complexType>
	<complexType name="CompleteVerifierType">
		<annotation>
			<documentation xml:lang="en">A possible set of verifiers that all must be true for the command be considered completed.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType">
				<sequence minOccurs="0">
					<element name="ReturnParmRef" type="xtce:ParameterRefType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContextSignificanceType">
		<sequence>
			<element name="ContextMatch" type="xtce:ContextMatchType"/>
			<element name="Significance" type="xtce:SignificanceType"/>
		</sequence>
	</complexType>
	<complexType name="ContextSignificanceListType">
		<annotation>
			<documentation xml:lang="en">Used when the significance (possible consequence) of a command varies by the operating context</documentation>
		</annotation>
		<sequence>
			<element name="ContextSignificance" type="xtce:ContextSignificanceType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ExecutionVerifierType">
		<annotation>
			<documentation xml:lang="en">A verifier that indicates that the command is being executed.  An optional Element indicates how far along the command has progressed either as a fixed value or an (possibly scaled) ParameterInstance value.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType">
				<sequence minOccurs="0">
					<element name="PercentComplete" type="xtce:PercentCompleteType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FailedVerifierType">
		<annotation>
			<documentation xml:lang="en">When true, indicates that the command failed.  timeToWait is how long to wait for the FailedVerifier to test true.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType">
				<sequence minOccurs="0">
					<element name="ReturnParmRef" type="xtce:ParameterRefType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FixedValueEntryType">
		<complexContent>
			<extension base="xtce:SequenceEntryType">
				<attribute name="name" type="string" use="optional">
					<annotation>
						<documentation xml:lang="en">An optional name for the fixed/constant field in the sequence.</documentation>
					</annotation>
				</attribute>
				<attribute name="binaryValue" type="hexBinary" use="required">
					<annotation>
						<documentation xml:lang="en">The fixed/constant value that should be encoded into the sequence.  This value provided should have sufficient bit length to accomodate the size in bits.  If the value is larger, the most significant unnecessary bits are dropped.  The value provided should be in network byte order for encoding.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="xtce:PositiveLongType" use="required">
					<annotation>
						<documentation xml:lang="en">The number of bits that this fixed/constant value should occupy in the sequence.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InterlockType">
		<attribute name="scopeToSpaceSystem" type="xtce:NameReferenceType">
			<annotation>
				<documentation xml:lang="en">The name of a SpaceSystem this Interlock applies to.  By default, it only applies to the SpaceSystem that contains this MetaCommand.</documentation>
			</annotation>
		</attribute>
		<attribute name="verificationToWaitFor" type="xtce:VerifierEnumerationType" default="complete"/>
		<attribute name="verificationProgressPercentage" type="decimal">
			<annotation>
				<documentation xml:lang="en">Only applies when the verificationToWaitFor attribute is 'queued' or 'executing'.</documentation>
			</annotation>
		</attribute>
		<attribute name="suspendable" type="boolean" default="false">
			<annotation>
				<documentation xml:lang="en">A flag that indicates that under special circumstances, this Interlock can be suspended.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="ParameterToSetType">
		<annotation>
			<documentation xml:lang="en">Sets a Parameter to a new value (either from a derivation or explicitly) after the command has been verified (all verifications have passed)</documentation>
			<appinfo>Value type must match Parameter type</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<choice>
					<element name="Derivation" type="xtce:DerivationType"/>
					<element name="NewValue" type="string">
						<annotation>
							<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
						</annotation>
					</element>
				</choice>
				<attribute name="setOnVerification" type="xtce:VerifierEnumerationType" default="complete"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParameterToSetListType">
		<annotation>
			<documentation xml:lang="en">Parameters that are set with a new value after the command has been sent.  Appended to the Base Command list</documentation>
		</annotation>
		<sequence>
			<element name="ParameterToSet" type="xtce:ParameterToSetType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ParameterToSuspendAlarmsOnType">
		<annotation>
			<documentation xml:lang="en">Will suspend all Alarms associated with this Parameter for the given suspense time after the given verifier</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="suspenseTime" type="xtce:RelativeTimeType" use="required"/>
				<attribute name="verifierToTriggerOn" type="xtce:VerifierEnumerationType" default="release"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ParametersToSuspendAlarmsOnSetType">
		<annotation>
			<documentation xml:lang="en">Sometimes it is necessary to suspend alarms - particularly 'change' alarms for commands that will change the value of a Parameter</documentation>
		</annotation>
		<sequence>
			<element name="ParameterToSuspendAlarmsOn" type="xtce:ParameterToSuspendAlarmsOnType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ParameterValueChangeType">
		<annotation>
			<documentation xml:lang="en">A parameter change in value or specified delta change in value.</documentation>
		</annotation>
		<sequence>
			<element name="ParameterRef" type="xtce:ParameterRefType"/>
			<element name="Change" type="xtce:ChangeValueType"/>
		</sequence>
	</complexType>
	<complexType name="QueuedVerifierType">
		<annotation>
			<documentation xml:lang="en">A verifer that means the command is scheduled for execution by the SpaceSystem.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="ReceivedVerifierType">
		<annotation>
			<documentation xml:lang="en">A verifier that simply means the SpaceSystem has received the command.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="SentFromRangeVerifierType">
		<annotation>
			<documentation xml:lang="en">Sent from range means the command has been transmitted to the spacecraft by the network that connects the ground system to the spacecraft.  Obviously, this verifier must come from something other than the spacecraft. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<simpleType name="TimeAssociationUnitType">
		<annotation>
			<documentation>Time units the time association decimal value is in.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="si_nanosecond"/>
			<enumeration value="si_microsecond"/>
			<enumeration value="si_millsecond"/>
			<enumeration value="si_second"/>
			<enumeration value="minute"/>
			<enumeration value="day"/>
			<enumeration value="julianYear"/>
		</restriction>
	</simpleType>
	<complexType name="TransferredToRangeVerifierType">
		<annotation>
			<documentation xml:lang="en">Transferred to range means the command has been received to the network that connects the ground system to the spacecraft.  Obviously, this verifier must come from something other than the spacecraft. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:CommandVerifierType"/>
		</complexContent>
	</complexType>
	<complexType name="TransmissionConstraintType">
		<annotation>
			<documentation xml:lang="en">A CommandTransmission constraint is used to check that the command can be run in the current operating mode and may block the transmission of the command if the constraint condition is true.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<attribute name="timeOut" type="xtce:RelativeTimeType">
					<annotation>
						<documentation xml:lang="en">Pause during timeOut, fail when the timeout passes</documentation>
					</annotation>
					<!-- removed for CASTOR: default="PT0S" -->
				</attribute>
				<attribute name="suspendable" type="boolean" default="false">
					<annotation>
						<documentation xml:lang="en">Indicates whether the constraints for a Command may be suspended.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TransmissionConstraintListType">
		<annotation>
			<documentation xml:lang="en">Appended to the TramsmissionConstraint List of the base command.  Constraints are checked in order.  </documentation>
		</annotation>
		<sequence>
			<element name="TransmissionConstraint" type="xtce:TransmissionConstraintType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="VerifierEnumerationType">
		<annotation>
			<documentation xml:lang="en">An enumerated list of verifier types</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="release"/>
			<enumeration value="transferredToRange"/>
			<enumeration value="sentFromRange"/>
			<enumeration value="received"/>
			<enumeration value="accepted"/>
			<enumeration value="queued"/>
			<enumeration value="executing"/>
			<enumeration value="complete"/>
			<enumeration value="failed"/>
		</restriction>
	</simpleType>
	<complexType name="VerifierSetType">
		<annotation>
			<documentation xml:lang="en">Describe a collection of unordered verifiers.  A command verifier is a conditional check on the telemetry from a SpaceSystem that that provides positive indication on the processing state of a command.  There are eight different verifiers each associated with difference states in command processing: TransferredToRange, TransferredFromRange, Received, Accepted, Queued, Execution, Complete, and Failed.  There may be multiple ‘complete’ and 'execution' verifiers. If the MetaCommand is part of an inheritance relation (BaseMetaCommand), the 'complete' and 'execution' verifier sets are appended to any defined in the parent MetaCommand. All others will override a verifier defined in a BaseMetaCommand.  Duplicate verifiers in the list of CompleteVerifiers and ExecutionVerifiers before and after appending to the verifiers in BaseMetaCommand should be avoided. See MetaCommandType and BaseMetaCommandType for additional information.</documentation>
		</annotation>
		<sequence>
			<element name="TransferredToRangeVerifier" type="xtce:TransferredToRangeVerifierType" minOccurs="0"/>
			<element name="SentFromRangeVerifier" type="xtce:SentFromRangeVerifierType" minOccurs="0"/>
			<element name="ReceivedVerifier" type="xtce:ReceivedVerifierType" minOccurs="0"/>
			<element name="AcceptedVerifier" type="xtce:AcceptedVerifierType" minOccurs="0"/>
			<element name="QueuedVerifier" type="xtce:QueuedVerifierType" minOccurs="0"/>
			<element name="ExecutionVerifier" type="xtce:ExecutionVerifierType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="CompleteVerifier" type="xtce:CompleteVerifierType" minOccurs="0" maxOccurs="unbounded"/>
			<element name="FailedVerifier" type="xtce:FailedVerifierType" minOccurs="0"/>
		</sequence>
	</complexType>
	<!--******** End of Command Schema *********************-->
	<!--*************************************************************-->
	<!--****** Algorithm Schema ********************************-->
	<annotation>
		<documentation xml:lang="en">This schema defines the structure for an Algorithm.   An Algorithm may be one of a growing set of pre-defined algorithms or a named escape into a user defined algorithm where (depending on the system) the name of the algorithm may be a java class, a function in a shared library, an external program or some other reference to an outside algorithm.  At some later date, this schema may also allow the logic of the user defined algorithm to be defined within the instance document itself (perhaps using MathML?).</documentation>
	</annotation>
	<complexType name="AlgorithmTextType">
		<annotation>
			<documentation xml:lang="en">This optional element may be used to enter Pseudo or actual code for the algorithm.  The language for the algorithm is specified with the language attribute</documentation>
		</annotation>
		<simpleContent>
			<extension base="string">
				<attribute name="language" type="string" default="pseudo"/>
			</extension>
		</simpleContent>
	</complexType>
	<complexType name="ChecksumType">
		<annotation>
			<documentation>Describe checksum information.</documentation>
		</annotation>
		<sequence>
			<element name="InputAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
				<annotation>
					<documentation>Assumed to return the computed checksum.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="bitsFromReference" type="xtce:NonNegativeLongType"/>
		<attribute name="reference" type="xtce:ReferencePointType" default="start"/>
		<attribute name="name" use="required">
			<annotation>
				<documentation>Qualified list of name checksum algorithms. If custom is chosen, InputAlgorithm must be set.</documentation>
			</annotation>
			<simpleType>
				<restriction base="string">
					<enumeration value="unix_sum"/>
					<enumeration value="sum8"/>
					<enumeration value="sum16"/>
					<enumeration value="sum24"/>
					<enumeration value="sum32"/>
					<enumeration value="fletcher4"/>
					<enumeration value="fletcher8"/>
					<enumeration value="fletcher16"/>
					<enumeration value="fletcher32"/>
					<enumeration value="adler32"/>
					<enumeration value="luhn"/>
					<enumeration value="verhoeff"/>
					<enumeration value="damm"/>
					<enumeration value="custom">
						<annotation>
							<documentation>Document a custom checksum algorithm</documentation>
						</annotation>
					</enumeration>
				</restriction>
			</simpleType>
		</attribute>
		<attribute name="hashSizeInBits" type="xtce:PositiveLongType"/>
	</complexType>
	<complexType name="ConstantType">
		<annotation>
			<documentation xml:lang="en">Names and provides a value for a constant input to the algorithm.  There are two attributes to Constant, constantName and value.  constantName is a variable name in the algorithm to be executed.  value is the value of the constant to be used.</documentation>
		</annotation>
		<attribute name="constantName" type="string"/>
		<attribute name="value" type="string" use="required"/>
	</complexType>
	<complexType name="ContextCalibratorListType">
		<annotation>
			<documentation xml:lang="en">Use when different calibrations must be used on the Parameter in different contexts.  Use the first one that tests true</documentation>
		</annotation>
		<sequence>
			<element name="ContextCalibrator" type="xtce:ContextCalibratorType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ExternalAlgorithmType">
		<annotation>
			<documentation xml:lang="en">This is the external algorithm.  Multiple entries are provided so that the same database may be used for multiple implementation s</documentation>
		</annotation>
		<attribute name="implementationName" type="string" use="required"/>
		<attribute name="algorithmLocation" type="string" use="required"/>
	</complexType>
	<complexType name="ExternalAlgorithmSetType">
		<sequence>
			<element name="ExternalAlgorithm" type="xtce:ExternalAlgorithmType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="InputAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A set of labeled inputs is added to the SimpleAlgorithmType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:SimpleAlgorithmType">
				<sequence>
					<element name="InputSet" type="xtce:InputSetType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputOutputAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A set of labeled outputs are added to the SimpleInputAlgorithmType</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:InputAlgorithmType">
				<sequence>
					<element name="OutputSet" type="xtce:OutputSetType" minOccurs="0"/>
				</sequence>
				<attribute name="thread" type="boolean" use="optional" default="false"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputOutputTriggerAlgorithmType">
		<annotation>
			<documentation xml:lang="en">Input output algorithm is extended with a set of labeled triggers. See InputOutputAlgorithmType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:InputOutputAlgorithmType">
				<sequence>
					<element name="TriggerSet" type="xtce:TriggerSetType" minOccurs="0"/>
				</sequence>
				<attribute name="triggerContainer" type="xtce:NameReferenceType" use="optional">
					<annotation>
						<documentation xml:lang="en">First telemetry container from which the output parameter should be calculated.</documentation>
					</annotation>
				</attribute>
				<attribute name="priority" type="int" use="optional">
					<annotation>
						<documentation xml:lang="en">Algorithm processing priority. If more than one algorithm is triggered by the same container, the lowest priority algorithm should be calculated first.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputParameterInstanceRefType">
		<annotation>
			<documentation xml:lang="en">Names an input parameter to the algorithm.  There are two attributes to InputParm, inputName and parameterName. parameterName is a parameter reference name for a parameter that will be used in this algorithm.  inputName is an optional "friendly" name for the input parameter. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="inputName" type="string"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="InputSetType">
		<choice maxOccurs="unbounded">
			<element name="InputParameterInstanceRef" type="xtce:InputParameterInstanceRefType"/>
			<element name="Constant" type="xtce:ConstantType" minOccurs="0"/>
		</choice>
	</complexType>
	<complexType name="MathAlgorithmType">
		<annotation>
			<documentation xml:lang="en">A simple mathematical operation</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MathOperation" type="xtce:TriggeredMathOperationType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="OnContainerUpdateTriggerType">
		<attribute name="containerRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="OnPeriodicRateTriggerType">
		<attribute name="fireRateInSeconds" type="decimal" use="required"/>
	</complexType>
	<complexType name="OnParameterUpdateTriggerType">
		<annotation>
			<documentation xml:lang="en">Names a parameter that upon change will start the execution of the algorithm.  Holds a parameter reference name for a parameter that when it changes, will cause this algorithm to be executed.</documentation>
		</annotation>
		<attribute name="parameterRef" type="xtce:NameReferenceType" use="required"/>
	</complexType>
	<complexType name="OutputParameterRefType">
		<annotation>
			<documentation xml:lang="en">Names an output parameter to the algorithm.  There are two attributes to OutputParm, outputName and parameterName. parameterName is a parameter reference name for a parameter that will be updated by this algorithm.  outputName is an optional "friendly" name for the output parameter.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterRefType">
				<attribute name="outputName" type="string"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="OutputSetType">
		<sequence>
			<element name="OutputParameterRef" type="xtce:OutputParameterRefType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="SimpleAlgorithmType" abstract="true">
		<annotation>
			<documentation xml:lang="en">The simplest form of algorithm, a SimpleAlgorithmType contains an area for a free-form pseudo code description of the algorithm plus a Set of references to external algorithms.  External algorithms are usually unique to a ground system type.   Multiple external algorithms are possible because XTCE documents may be used across multiple ground systems.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="AlgorithmText" type="xtce:AlgorithmTextType" minOccurs="0"/>
					<element name="ExternalAlgorithmSet" type="xtce:ExternalAlgorithmSetType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TriggeredMathOperationType">
		<complexContent>
			<extension base="xtce:MathOperationType">
				<sequence>
					<element name="TriggerSet" type="xtce:TriggerSetType"/>
				</sequence>
				<attribute name="outputParameterRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TriggerSetType">
		<annotation>
			<documentation xml:lang="en">A trigger is used to initiate the processing of some algorithm.  A trigger may be based on an update of a Parameter or on a time basis.  Triggers may also have a rate that limits their firing to a 1/rate basis.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="OnParameterUpdateTrigger" type="xtce:OnParameterUpdateTriggerType"/>
			<element name="OnContainerUpdateTrigger" type="xtce:OnContainerUpdateTriggerType"/>
			<element name="OnPeriodicRateTrigger" type="xtce:OnPeriodicRateTriggerType"/>
		</choice>
		<attribute name="name" type="string" use="optional"/>
		<attribute name="triggerRate" type="nonNegativeInteger" use="optional" default="1"/>
	</complexType>
	<!--*************************************************************-->
	<!--******** Calibrator Algorithm Types ***********************-->
	<complexType name="CalibratorType">
		<annotation>
			<documentation xml:lang="en">Calibrators are normally used to convert to and from bit compacted numerical data</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:OptionalNameDescriptionType">
				<choice>
					<element name="SplineCalibrator" type="xtce:SplineCalibratorType"/>
					<element name="PolynomialCalibrator" type="xtce:PolynomialCalibratorType"/>
					<element name="MathOperationCalibrator" type="xtce:MathOperationCalibratorType"/>
				</choice>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ChangeValueType">
		<attribute name="value" type="decimal" use="required"/>
	</complexType>
	<complexType name="MathOperationCalibratorType">
		<complexContent>
			<extension base="xtce:MathOperationType"/>
		</complexContent>
	</complexType>
	<complexType name="PolynomialCalibratorType">
		<annotation>
			<documentation xml:lang="en">A calibration type where a curve in a raw vs calibrated plane is described using a set of polynomial coefficients.  Raw values are converted to calibrated values by finding a position on the curve corresponding to the raw value. The first coefficient belongs with the X^0 term, the next coefficient belongs to the X^1 term and so on. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:PolynomialType"/>
		</complexContent>
	</complexType>
	<complexType name="SplineCalibratorType">
		<annotation>
			<documentation xml:lang="en">A calibration type where a segmented line in a raw vs calibrated plane is described using a set of points.  Raw values are converted to calibrated values by finding a position on the line corresponding  to the raw value. The algorithm triggers on the input parameter.</documentation>
		</annotation>
		<sequence>
			<element name="SplinePoint" type="xtce:SplinePointType" minOccurs="2" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="order" type="xtce:NonNegativeLongType" default="1"/>
		<attribute name="extrapolate" type="boolean" default="false"/>
	</complexType>
	<!--******** End of Algorithm Schema *********************-->
	<!--*************************************************************-->
	<!--******** Stream Definitions Schema *******************-->
	<annotation>
		<documentation xml:lang="en">This schema provides a language for defining binary stream data.</documentation>
	</annotation>
	<complexType name="AutoInvertType">
		<annotation>
			<documentation xml:lang="en">After searching for the frame sync marker for some number of bits, it may be desirable to invert the incoming data, and then look for frame sync.  In some cases this will require an external algorithm</documentation>
		</annotation>
		<sequence>
			<element name="InvertAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0"/>
		</sequence>
		<attribute name="badFramesToAutoInvert" type="positiveInteger" default="1024"/>
	</complexType>
	<complexType name="CustomStreamType">
		<annotation>
			<documentation xml:lang="en">A stream type where some level of custom processing (e.g. convolutional, encryption, compression) is performed.  Has a reference to external algorithms for encoding and decoding algorithms.</documentation>
			<appinfo>Must check to ensure that the attributes encodedStreamRef and decodedStreamRef point to valid Streams</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:PCMStreamType">
				<sequence>
					<element name="EncodingAlgorithm" type="xtce:InputAlgorithmType"/>
					<element name="DecodingAlgorithm" type="xtce:InputOutputAlgorithmType">
						<annotation>
							<documentation xml:lang="en">Algorithm outputs may be used to set decoding quality parameters.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="encodedStreamRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="decodedStreamRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="FlagBitType">
		<restriction base="string">
			<enumeration value="zeros"/>
			<enumeration value="ones"/>
		</restriction>
	</simpleType>
	<complexType name="FlagType">
		<annotation>
			<documentation xml:lang="en">The pattern of bits used to look for frame synchronization.</documentation>
		</annotation>
		<attribute name="flagSizeInBits" type="positiveInteger" default="6"/>
		<attribute name="flagBitType" type="xtce:FlagBitType" default="ones"/>
	</complexType>
	<complexType name="FrameStreamType">
		<annotation>
			<documentation xml:lang="en">The top level type definition for all data streams that are frame based.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:PCMStreamType">
				<sequence>
					<choice>
						<element name="ContainerRef" type="xtce:ContainerRefType">
							<annotation>
								<documentation xml:lang="en">This Container (usually abstract) is the container that is in the fixed frame stream.  Normally, this is a general container type from which many specific containers are inherited.</documentation>
							</annotation>
						</element>
						<element name="ServiceRef" type="xtce:ServiceRefType"/>
					</choice>
					<element name="StreamRef" type="xtce:StreamRefType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">This is a reference to a connecting stream - say a custom stream.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FixedFrameStreamType">
		<annotation>
			<documentation xml:lang="en">For streams that contain a series of frames with a fixed frame length where the frames are found by looking for a marker in the data.  This marker is sometimes called the frame sync pattern and sometimes the Asynchronous Sync Marker (ASM).  This marker need not be contiguous although it usually is.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FrameStreamType">
				<sequence>
					<element name="SyncStrategy" type="xtce:FixedFrameSyncStrategyType"/>
				</sequence>
				<attribute name="syncApertureInBits" type="nonNegativeInteger" default="0">
					<annotation>
						<documentation xml:lang="en">Allowed slip (in bits) in either direction for the sync pattern</documentation>
					</annotation>
				</attribute>
				<attribute name="frameLengthInBits" type="long" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="FixedFrameSyncStrategyType">
		<complexContent>
			<extension base="xtce:SyncStrategyType">
				<sequence>
					<element name="SyncPattern" type="xtce:SyncPatternType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PCMStreamType" abstract="true">
		<annotation>
			<documentation xml:lang="en">A PCM Stream Type is the high level definition for all Pulse Code Modulated (PCM) (i.e., binary) streams.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="bitRateInBPS" type="double"/>
				<attribute name="pcmType" type="xtce:PCMType" default="NRZL"/>
				<attribute name="inverted" type="boolean" default="false"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="PCMType">
		<restriction base="string">
			<enumeration value="NRZL"/>
			<enumeration value="NRZM"/>
			<enumeration value="NRZS"/>
			<enumeration value="BiPhaseL"/>
			<enumeration value="BiPhaseM"/>
			<enumeration value="BiPhaseS"/>
		</restriction>
	</simpleType>
	<complexType name="StreamRefType">
		<annotation>
			<documentation xml:lang="en">Holds a reference to a stream</documentation>
		</annotation>
		<attribute name="streamRef" type="xtce:NameReferenceType" use="required">
			<annotation>
				<documentation xml:lang="en">name of reference stream</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="StreamSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered set of Streams.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="FixedFrameStream" type="xtce:FixedFrameStreamType"/>
			<element name="VariableFrameStream" type="xtce:VariableFrameStreamType"/>
			<element name="CustomStream" type="xtce:CustomStreamType"/>
		</choice>
	</complexType>
	<complexType name="SyncStrategyType" abstract="true">
		<annotation>
			<documentation xml:lang="en">A Sync Strategy specifies the strategy on how to find frames within a stream of PCM data.  The sync strategy is based upon a state machine that begins in the 'Search' state until the first sync marker is found.  Then it goes into the 'Verify' state until a specified number of successive good sync markers are found.  Then, the state machine goes into the 'Lock' state, in the 'Lock' state frames are considered good.  Should a sync marker be missed in the 'Lock' state, the state machine will transition into the 'Check' state, if the next sync marker is where it's expected within a specified number of frames, then the state machine will transition back to the 'Lock' state, it not it will transition back to 'Search'.  </documentation>
		</annotation>
		<sequence>
			<element name="AutoInvert" type="xtce:AutoInvertType" minOccurs="0"/>
		</sequence>
		<attribute name="verifyToLockGoodFrames" type="nonNegativeInteger" default="4"/>
		<attribute name="checkToLockGoodFrames" type="nonNegativeInteger" default="1"/>
		<attribute name="maxBitErrorsInSyncPattern" type="nonNegativeInteger" default="0">
			<annotation>
				<documentation xml:lang="en">Maximum number of bit errors in the sync pattern (marker).</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="SyncPatternType">
		<annotation>
			<documentation xml:lang="en">The pattern of bits used to look for frame synchronization.</documentation>
		</annotation>
		<attribute name="pattern" type="hexBinary" use="required">
			<annotation>
				<documentation xml:lang="en">CCSDS ASM for non-turbocoded frames = 1acffc1d</documentation>
			</annotation>
		</attribute>
		<attribute name="bitLocationFromStartOfContainer" type="integer" default="0"/>
		<attribute name="mask" type="hexBinary"/>
		<attribute name="maskLengthInBits" type="positiveInteger">
			<annotation>
				<documentation xml:lang="en">truncate the mask from the left</documentation>
			</annotation>
		</attribute>
		<attribute name="patternLengthInBits" type="positiveInteger" use="required">
			<annotation>
				<documentation xml:lang="en">truncate the pattern from the left</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="VariableFrameStreamType">
		<annotation>
			<documentation xml:lang="en">For streams that contain a series of frames with a variable frame length where the frames are found by looking for a series of one's or zero's (usually one's).  The series is called the flag.   in the PCM stream that are usually made to be illegal in the PCM stream by zero or one bit insertion.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FrameStreamType">

				<sequence>
					<element name="SyncStrategy" type="xtce:VariableFrameSyncStrategyType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="VariableFrameSyncStrategyType">
		<complexContent>
			<extension base="xtce:SyncStrategyType">
				<sequence>
					<element name="Flag" type="xtce:FlagType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<!--******** End of Stream Definition Schema ************-->
	<!--*************************************************************-->
	<!--******** DataTypes ***************************************-->
	<complexType name="AbsoluteTimeDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Used to contain an absolute time. Contains an absolute (to a known epoch) time.  Use the [ISO 8601] extended format CCYY-MM-DDThh:mm:ss where "CC" represents the century, "YY" the year, "MM" the month and "DD" the day, preceded by an optional leading "-" sign to indicate a negative number. If the sign is omitted, "+" is assumed. The letter "T" is the date/time separator and "hh", "mm", "ss" represent hour, minute and second respectively. Additional digits can be used to increase the precision of fractional seconds if desired i.e. the format ss.ss... with any number of digits after the decimal point is supported. 
</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseTimeDataType">
				<attribute name="initialValue" type="dateTime"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AggregateDataType" abstract="true">
		<annotation>
			<documentation>Contains multiple values (as members) of any type</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="MemberList" type="xtce:MemberListType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ArrayDataTypeType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An array of values of the type referenced in 'arrayTypeRef' and have the number of array dimensions as specified in 'numberOfDimensions' </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="DimensionList" type="xtce:DimensionListType"/>
				</sequence>
				<attribute name="arrayTypeRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type used by within the schema to derive other data types by the ground system.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<element name="UnitSet" type="xtce:UnitSetType" minOccurs="0"/>
					<choice minOccurs="0">
						<element name="BinaryDataEncoding" type="xtce:BinaryDataEncodingType"/>
						<element name="FloatDataEncoding" type="xtce:FloatDataEncodingType"/>
						<element name="IntegerDataEncoding" type="xtce:IntegerDataEncodingType"/>
						<element name="StringDataEncoding" type="xtce:StringDataEncodingType"/>
					</choice>
				</sequence>
				<attribute name="baseType" type="xtce:NameReferenceType">
					<annotation>
						<documentation xml:lang="en">Used to derive one Data Type from another - will inherit all the attributes from the baseType any of which may be redefined in this type definition.  </documentation>
						<appinfo>Must be derived from a like type (e.g,, String from String).  No circular derivations.    </appinfo>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BaseTimeDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type used by within the schema to describe derive other data types by the ground system.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<sequence>
					<sequence minOccurs="0">
						<element name="Encoding" type="xtce:EncodingType"/>
					</sequence>
					<sequence minOccurs="0">
						<element name="ReferenceTime" type="xtce:ReferenceTimeType"/>
					</sequence>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BinaryDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains an arbitrarily large binary value </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<attribute name="initialValue" type="hexBinary">
					<annotation>
						<documentation xml:lang="en">Extra bits are truncated from the MSB (leftmost)</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains a boolean value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form. </documentation>
						<appinfo>Initial value must match either the oneStringValue or the zeroStringValue</appinfo>
					</annotation>
				</attribute>
				<attribute name="oneStringValue" type="string" default="True"/>
				<attribute name="zeroStringValue" type="string" default="False"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="DimensionType" mixed="false">
		<annotation>
			<documentation xml:lang="en">For partial entries of an array, the starting and ending index for each dimension, OR the Size must be specified.  Indexes are zero based.</documentation>
		</annotation>
		<sequence>
			<element name="StartingIndex" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">zero based index</documentation>
				</annotation>
			</element>
			<element name="EndingIndex" type="xtce:IntegerValueType"/>
		</sequence>
	</complexType>
	<complexType name="DimensionListType">
		<annotation>
			<documentation xml:lang="en">Where the Dimension list is in this form:  Array[1stDim][2ndDim][lastDim].  The last dimension is assumed to be the least significant - that is this dimension will cycle through its combination before the next to last dimension changes.  The order MUST ascend or the array will need to be broken out entry by entry. </documentation>
		</annotation>
		<sequence>
			<element name="Dimension" type="xtce:DimensionType" maxOccurs="unbounded">
				<annotation>
					<appinfo>For an ArrayParameterType of size N, their should be N Dimensions</appinfo>
					<appinfo>An array made up by multiple Entries should not have indexes that overlap, but should be continuous.</appinfo>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="EnumeratedDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains an enumerated value - a value that has both an integral and a string representation.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="EnumerationList" type="xtce:EnumerationListType"/>
				</sequence>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumerationListType">
		<sequence>
			<element name="Enumeration" type="xtce:ValueEnumerationType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="FloatDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains a floating point value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericDataType">
				<sequence>
					<element name="ValidRange" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">The Valid Range bounds the universe of possible values this Parameter may have.</documentation>
						</annotation>
						<complexType>
							<complexContent>
								<extension base="xtce:FloatRangeType">
									<attribute name="validRangeAppliesToCalibrated" type="boolean" default="true"/>
								</extension>
							</complexContent>
						</complexType>
					</element>
				</sequence>
				<attribute name="initialValue" type="double">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="xtce:FloatSizeInBitsType" default="32"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="IntegerDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains an integral value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericDataType">
				<sequence>
					<element name="ValidRange" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">The Valid Range bounds the universe of possible values this Parameter may have.</documentation>
						</annotation>
						<complexType>
							<complexContent>
								<extension base="xtce:IntegerRangeType">
									<attribute name="validRangeAppliesToCalibrated" type="boolean" default="true"/>
								</extension>
							</complexContent>
						</complexType>
					</element>
				</sequence>
				<attribute name="initialValue" type="xtce:FixedIntegerValueType">
					<annotation>
						<documentation xml:lang="en">Initial value is always given in calibrated form.  Default is base 10 form; binary, octal, or hexadecimal values may be given by preceding value with 0[b|B], 0[o|O|, 0[x|X] respectively.</documentation>
					</annotation>
				</attribute>
				<attribute name="sizeInBits" type="positiveInteger" default="32"/>
				<attribute name="signed" type="boolean" default="true"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MemberType">
		<annotation>
			<documentation xml:lang="en">Describe a member field in an AggregateDataType. Each member has a name and a type reference to a data type for the aggregate member name.  If this aggregate is a Parameter aggregate, then the typeRef is a parameter type reference.  If this aggregate is an Argument aggregate, then the typeRef is an argument type reference.  References to an array data type is currently not supported. Circular references are not allowed.  See MemberListType. AggregateParameterType and AggregateArgumentType.</documentation>
			<appinfo>ensure no circular references</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:NameDescriptionType">
				<attribute name="typeRef" type="xtce:NameReferenceType" use="required"/>
				<attribute name="initialValue" type="string" use="optional">
					<annotation>
						<documentation xml:lang="en">Used to set the initial calibrated values of Parameters.  Will overwrite an initial value defined for the ParameterType.  For integer types base 10 (decimal) form is assumed unless: if proceeded by a 0b or 0B, value is in base two (binary form, if proceeded by a 0o or 0O, values is in base 8 (octal) form, or if proceeded by a 0x or 0X, value is in base 16 (hex) form.  Floating point types may be specified in normal (100.0) or scientific (1.0e2) form.  Time types are specified using the ISO 8601 formats described for XTCE time data types.  Initial values for string types, may include C language style (\n, \t, \", \\, etc.) escape sequences.</documentation>
						<appinfo>The value type must match the Parameter type</appinfo>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="MemberListType">
		<annotation>
			<documentation>Order is important only if the name of the AggregateParameter or Aggregate Argument is directly referenced in SequenceContainers.  In this case the members are assued to be added sequentially (in the order listed here) into the Container.</documentation>
		</annotation>
		<sequence>
			<element name="Member" type="xtce:MemberType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="NumericDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type that is a super type of either an Integer or Float Data type.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="ToString" type="xtce:ToStringType" minOccurs="0"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RelativeTimeDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Used to contain a relative time value.  Used to describe a relative time.  Normally used for time offsets.  A Relative time is expressed as PnYn MnDTnH nMnS, where nY represents the number of years, nM the number of months, nD the number of days, 'T' is the date/time separator, nH the number of hours, nM the number of minutes and nS the number of seconds. The number of seconds can include decimal digits to arbitrary precision.  For example, to indicate a duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes, one would write: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.  An extension of Schema duration type. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseTimeDataType">
				<attribute name="initialValue" type="duration"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringDataType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Contains a String Value</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseDataType">
				<sequence>
					<element name="SizeRangeInCharacters" type="xtce:IntegerRangeType" minOccurs="0"/>
				</sequence>
				<attribute name="initialValue" type="string">
					<annotation>
						<documentation xml:lang="en">Initial values for string types, may include C language style (\n, \t, \", \\, etc.) escape sequences.</documentation>
					</annotation>
				</attribute>
				<attribute name="restrictionPattern" type="string">
					<annotation>
						<documentation xml:lang="en">restriction pattern is a regular expression</documentation>
					</annotation>
				</attribute>
				<attribute name="characterWidth" type="xtce:CharacterWidthType"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="UnitSetType">
		<sequence>
			<element name="Unit" type="xtce:UnitType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ValidFloatRangeSetType">
		<annotation>
			<documentation xml:lang="en">Numerical ranges that define the universe of valid values for this argument.  Used to further bound argument values inside the ValidRange for the overall Data Type</documentation>
		</annotation>
		<sequence>
			<element name="ValidRange" type="xtce:FloatRangeType" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="validRangeAppliesToCalibrated" type="boolean" default="true"/>
	</complexType>
	<complexType name="ValidIntegerRangeSetType">
		<annotation>
			<documentation xml:lang="en">Numerical ranges that define the universe of valid values for this argument.  Used to further bound argument values inside the ValidRange for the overall Data Type</documentation>
		</annotation>
		<sequence>
			<element name="ValidRange" type="xtce:IntegerRangeType" maxOccurs="unbounded"/>
		</sequence>
		<attribute name="validRangeAppliesToCalibrated" type="boolean" default="true"/>
	</complexType>
	<!--*************************************************************-->
	<!--******** Data Types used with Encoding **************-->
	<simpleType name="BitOrderType">
		<restriction base="string">
			<enumeration value="leastSignificantBitFirst"/>
			<enumeration value="mostSignificantBitFirst"/>
		</restriction>
	</simpleType>
	<complexType name="BinaryDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For binary data or for integer, float, string, or time data that is not in any of the known encoding formats.  For any data that is not encoded in any of the known integer, float, string, or time data formats use a To/From transform algorithm.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="SizeInBits" type="xtce:IntegerValueType"/>
					<element name="FromBinaryTransformAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Used to convert binary data to an application data type</documentation>
						</annotation>
					</element>
					<element name="ToBinaryTransformAlgorithm" type="xtce:InputAlgorithmType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Used to convert binary data from an application data type to binary data</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ByteType">
		<attribute name="byteSignificance" type="nonNegativeInteger" use="required"/>
	</complexType>
	<simpleType name="CharacterWidthType">
		<restriction base="integer">
			<enumeration value="8"/>
			<enumeration value="16"/>
		</restriction>
	</simpleType>
	<complexType name="CRCType">
		<annotation>
			<documentation xml:lang="en">Cyclic Redundancy Check (CRC) definition. The polynomial coefficients for the CRC 
are defined as a truncated hex value.  The coefficient for the nth bit of an n-bit CRC will always be 1 and is not 
represented in the truncated hex value.  For example, the truncated hex value of CRC-32 (width=32 bits) used in the 
Ethernet specification is 0x04C11DB7, where each non-zero bit of the truncated hex represents a coefficient of 1 in
the polynomial and the bit position represents the exponent. There may also be an initial remainder "InitRemainder" 
and a final XOR "FinalXOR" to fully specify the CRC.  reflectData and reflectRemainder may also be specified to 
reverse the bit order in the incoming data and/or the result.
      </documentation>
		</annotation>
		<sequence>
			<element name="Polynomial" type="hexBinary"/>
			<element name="InitRemainder" type="hexBinary" minOccurs="0"/>
			<element name="FinalXOR" type="hexBinary" minOccurs="0"/>
		</sequence>
		<attribute name="width" type="xtce:PositiveLongType"/>
		<attribute name="reflectData" type="boolean" default="false"/>
		<attribute name="reflectRemainder" type="boolean" default="false"/>
		<attribute name="bitsFromReference" type="nonNegativeInteger"/>
		<attribute name="reference" type="xtce:ReferencePointType" default="start"/>
	</complexType>
	<complexType name="DataEncodingType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Describes how a particular piece of data is sent or received from some non-native, off-platform device. (e.g. a spacecraft)</documentation>
		</annotation>
		<sequence>
			<element name="ErrorDetectCorrect" type="xtce:ErrorDetectCorrectType" minOccurs="0"/>
			<element name="ByteOrderList" type="xtce:ByteOrderType" minOccurs="0">
				<annotation>
					<documentation xml:lang="en">Used to describe an arbitrary byte order in multibyte parameters.  First byte in list is the first in the stream.  Byte significance is the highest for most significant bytes.  If not included, it is assumed that the most significant byte is first, least significant byte last.</documentation>
				</annotation>
			</element>
		</sequence>
		<attribute name="bitOrder" type="xtce:BitOrderType" default="mostSignificantBitFirst"/>
	</complexType>
	<complexType name="EncodingType">
		<annotation>
			<documentation xml:lang="en">Scale and offset are used in a y =mx +b type relationship (m is the scale and b is the offset) to make adjustments to the encoded value to that it matches the time units.  Binary Encoded time is typically used with a user supplied transform algorithm to convert time data formats that are too difficult to describe in XTCE.</documentation>
		</annotation>
		<choice>
			<element name="BinaryDataEncoding" type="xtce:BinaryDataEncodingType"/>
			<element name="FloatDataEncoding" type="xtce:FloatDataEncodingType"/>
			<element name="IntegerDataEncoding" type="xtce:IntegerDataEncodingType"/>
			<element name="StringDataEncoding" type="xtce:StringDataEncodingType"/>
		</choice>
		<attribute name="units" type="xtce:TimeUnitsType" default="seconds"/>
		<attribute name="scale" type="double" default="1"/>
		<attribute name="offset" type="double" default="0"/>
	</complexType>
	<simpleType name="EpochType">
		<annotation>
			<documentation xml:lang="en">Epochs may be specified as an xs date where time is implied to be 00:00:00, xs dateTime, or string enumeration of common epochs.  The enumerations are TAI (used by CCSDS and others), J2000, UNIX (also known as POSIX), and GPS.</documentation>
		</annotation>
		<union memberTypes="date dateTime xtce:EpochTimeEnumsType"/>
	</simpleType>
	<complexType name="FloatDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For common encodings of floating point data</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="DefaultCalibrator" type="xtce:CalibratorType" minOccurs="0"/>
					<element name="ContextCalibratorList" type="xtce:ContextCalibratorListType" minOccurs="0"/>
				</sequence>
				<attribute name="encoding" type="xtce:FloatEncodingType" default="IEEE754_1985"/>
				<attribute name="sizeInBits" type="xtce:FloatEncodingSizeInBitsType" default="32"/>
				<attribute name="changeThreshold" type="double" use="optional">
					<annotation>
						<documentation>A changeThreshold may optionally be specified to inform systems of the minimum change in value that is significant.  This is used by some systems to limit the telemetry processing and/or recording requirements. If the value is unspecified or zero, any change is significant.
						</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="FloatEncodingSizeInBitsType">
		<restriction base="unsignedShort">
			<enumeration value="16">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 16 bit encoding size is only valid in cases of IEEE754 and vendor specific MILSTD_1750A variation that is not a part of the standard.  This is not meant to preclude use in the event that future floating point formats may also define this value.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="32">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 32 bit encoding size is only valid in cases of IEEE754_1985, IEEE754, MILSTD_1750A, DEC, IBM, and TI.  This is not meant to preclude use in the event that future floating point formats may also define this value.  The IEEE754 enumeration and the IEEE754_1985 enumeration are allowed in this case and the interpretation is the same.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="40">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 40 bit encoding size is only valid in the case of TI.  This is not meant to preclude use in the event that future floating point formats may also define this value.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="48">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 48 bit encoding size is only valid in the case of MILSTD_1750A.  This is not meant to preclude use in the event that future floating point formats may also define this value.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="64">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 64 bit encoding size is only valid in cases of IEEE754_1985, IEEE754, DEC, and IBM.  This is not meant to preclude use in the event that future floating point formats may also define this value.  The IEEE754 enumeration and the IEEE754_1985 enumeration are allowed in this case and the interpretation is the same.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="80">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 80 bit encoding size is only valid in the case of IEEE754_1985.  This is not meant to preclude use in the event that future floating point formats may also define this value.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="128">
				<annotation>
					<documentation xml:lang="en">At the time of this writing, 128 bit encoding size is only valid in the case of IEEE754_1985 and IEEE754.  This is not meant to preclude use in the event that future floating point formats may also define this value.  The IEEE754 enumeration and the IEEE754_1985 enumeration are allowed in this case and the interpretation is the same.</documentation>
				</annotation>
			</enumeration>
			<!-- IEEE754_2008 "half" and MILSTD_1750A -->
			<!-- IEEE754_1985 and MILSTD_1750A and DEC and IBM and TI -->
			<!-- TI -->
			<!-- MILSTD_1750A -->
			<!-- IEEE754_1985 and DEC and IBM -->
			<!-- IEEE754_1985 -->
			<!-- IEEE754_1985 -->
		</restriction>
	</simpleType>
	<simpleType name="FloatEncodingType">
		<restriction base="string">
			<enumeration value="IEEE754_1985"/>
			<enumeration value="IEEE754"/>
			<enumeration value="MILSTD_1750A"/>
			<enumeration value="DEC"/>
			<enumeration value="IBM"/>
			<enumeration value="TI"/>
		</restriction>
	</simpleType>
	<simpleType name="FloatSizeInBitsType">
		<restriction base="positiveInteger">
			<enumeration value="32"/>
			<enumeration value="64"/>
			<enumeration value="128"/>
		</restriction>
	</simpleType>
	<complexType name="IntegerDataEncodingType">
		<annotation>
			<documentation xml:lang="en">For all major encodings of integer data</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<sequence>
					<element name="DefaultCalibrator" type="xtce:CalibratorType" minOccurs="0"/>
					<element name="ContextCalibratorList" type="xtce:ContextCalibratorListType" minOccurs="0"/>
				</sequence>
				<attribute name="encoding" type="xtce:IntegerEncodingType" default="unsigned"/>
				<attribute name="sizeInBits" type="positiveInteger" default="8"/>
				<attribute name="changeThreshold" type="nonNegativeInteger" use="optional">
					<annotation>
						<documentation>A changeThreshold may optionally be specified to inform systems of 
						the minimum change in value that is significant.  This is used by some systems to 
						limit the telemetry processing and/or recording requirements, such as for an 
						analog-to-digital converter that dithers in the least significant bit. If the value
						is unspecified or zero, any change is significant.
						</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="IntegerEncodingType">
		<restriction base="string">
			<enumeration value="unsigned"/>
			<enumeration value="signMagnitude"/>
			<enumeration value="twosComplement"/>
			<enumeration value="onesComplement"/>
			<enumeration value="BCD"/>
			<enumeration value="packedBCD"/>
		</restriction>
	</simpleType>
	<complexType name="LeadingSizeType">
		<annotation>
			<documentation xml:lang="en">Like PASCAL strings, the size of the string is given as an integer at the start of the string.  SizeTag must be an unsigned Integer</documentation>
		</annotation>
		<attribute name="sizeInBitsOfSizeTag" type="positiveInteger" default="16"/>
	</complexType>
	<simpleType name="ParityFormType">
		<restriction base="string">
			<enumeration value="Even"/>
			<enumeration value="Odd"/>
		</restriction>
	</simpleType>
	<complexType name="ParityType">
		<annotation>
			<documentation xml:lang="en">Bit position starts with 'zero'.</documentation>
		</annotation>
		<attribute name="type" type="xtce:ParityFormType" use="required"/>
		<attribute name="bitsFromReference" type="nonNegativeInteger" use="required"/>
		<attribute name="reference" type="xtce:ReferencePointType" default="start"/>
	</complexType>
	<complexType name="SizeInBitsType">
		<choice>
			<element name="Fixed">
				<complexType>
					<sequence>
						<element name="FixedValue" type="xtce:FixedIntegerValueType"/>
					</sequence>
				</complexType>
			</element>
			<element name="TerminationChar" type="hexBinary" default="00">
				<annotation>
					<documentation xml:lang="en">Like C strings, they are terminated with a special string, usually a null character.</documentation>
				</annotation>
			</element>
			<element name="LeadingSize" type="xtce:LeadingSizeType"/>
		</choice>
	</complexType>
	<complexType name="VariableStringType">
		<annotation>
			<documentation xml:lang="en">Describe a variable string whose length may change between samples.</documentation>
		</annotation>
		<choice>
			<element name="LeadingSize" type="xtce:LeadingSizeType"/>
			<element name="DynamicValue" type="xtce:DynamicValueType"/>
			<element name="TerminationChar" type="hexBinary"/>
			<element name="DiscreteLookupList" type="xtce:DiscreteLookupListType"/>
		</choice>
	</complexType>
	<complexType name="StringDataEncodingType">
		<annotation>
			<documentation xml:lang="en">Describe common encodings of string data: UTF-8 and UTF-16. See StringDataType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DataEncodingType">
				<choice>
					<element name="SizeInBits" type="xtce:SizeInBitsType">
						<annotation>
							<documentation xml:lang="en">Static length strings do not change in overall length between samples.   They may terminate before the end of their buffer using a terminating character, or by various lookups, or calculations.  But they have a maximum fixed size, and the data itself is always within that maximum size.</documentation>
						</annotation>
					</element>
					<element name="Variable" type="xtce:VariableStringType">
						<annotation>
							<documentation xml:lang="en">A variable length string may change lengths between samples.</documentation>
						</annotation>
					</element>
				</choice>
				<attribute name="encoding" type="xtce:StringEncodingType" default="UTF-8"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="StringEncodingType">
		<annotation>
			<documentation xml:lang="en">Defines string encodings.  US-ASCII (7-bit), ISO-8859-1 (8-bit Extended ASCII), Windows-1252 (8-bit Extended ASCII), UTF-8 (Unicode), UTF-16 (Unicode with Byte Order Mark), UTF-16LE (Unicode Little Endian), UTF-16BE (Unicode Big Endian).  See StringDataEncodingType.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="US-ASCII"/>
			<enumeration value="ISO-8859-1"/>
			<enumeration value="Windows-1252"/>
			<enumeration value="UTF-8"/>
			<enumeration value="UTF-16">
				<annotation>
					<documentation xml:lang="en">With UTF-16, encoded bits must be prepended with a Byte Order Mark.  This mark indicates whether the data is encoded in big or little endian.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="UTF-16LE">
				<annotation>
					<documentation xml:lang="en">With UTF-16LE, encoded bits will always be represented as little endian.  Bits are not prepended with a Byte Order Mark.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="UTF-16BE">
				<annotation>
					<documentation xml:lang="en">With UTF-16BE, encoded bits will always be represented as big endian.  Bits are not prepended with a Byte Order Mark.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="UTF-32">
				<annotation>
					<documentation xml:lang="en">With UTF-32, encoded bits must be prepended with a Byte Order Mark.  This mark indicates whether the data is encoded in big or little endian.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="UTF-32LE">
				<annotation>
					<documentation xml:lang="en">With UTF-32LE, encoded bits will always be represented as little endian.  Bits are not prepended with a Byte Order Mark.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="UTF-32BE">
				<annotation>
					<documentation xml:lang="en">With UTF-32BE, encoded bits will always be represented as big endian.  Bits are not prepended with a Byte Order Mark.</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>
	<complexType name="ToStringType">
		<sequence>
			<element name="NumberFormat" type="xtce:NumberFormatType" minOccurs="1" maxOccurs="1">
				<annotation>
					<documentation xml:lang="en">This element describes how a numeric value should be represented in engineering/calibrated form.  The defaults reflect the most common form.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<simpleType name="EpochTimeEnumsType">
		<annotation>
			<documentation xml:lang="en">Union values of common epoch definitions for document convenience.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="TAI"/>
			<enumeration value="J2000"/>
			<enumeration value="UNIX"/>
			<enumeration value="GPS"/>
		</restriction>
	</simpleType>
	<!--******** DataTypes **************************************-->
	<!--*************************************************************-->
	<!--******** Common Types Schema **********************-->
	<!-- Basic elements used for in all dictionaries -->
	<complexType name="AlgorithmSetType" mixed="false">
		<annotation>
			<documentation xml:lang="en">An unordered collection of algorithms</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="CustomAlgorithm" type="xtce:InputOutputTriggerAlgorithmType"/>
			<element name="MathAlgorithm" type="xtce:MathAlgorithmType"/>
		</choice>
	</complexType>
	<complexType name="AliasSetType">
		<annotation>
			<documentation xml:lang="en">Contains an unordered collection of Alias's</documentation>
		</annotation>
		<sequence>
			<element name="Alias" type="xtce:AliasType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="AliasType">
		<annotation>
			<documentation xml:lang="en">Used to contain an alias (alternate) name or ID for the object.   For example, a parameter may have a mnemonic, an on-board id, and special IDs used by various ground software applications; all of these are alias's.  Some ground system processing equipment has some severe naming restrictions on parameters (e.g., names must less then 12 characters, single case or integral id's only); their alias's provide a means of capturing each name in a "nameSpace".</documentation>
		</annotation>
		<attribute name="nameSpace" type="string" use="required"/>
		<attribute name="alias" type="string" use="required"/>
	</complexType>
	<complexType name="AncillaryDataType">
		<annotation>
			<documentation xml:lang="en">Use for any other data associated with each named object.  May be used to include administrative data (e.g., version, CM or tags) or potentially any MIME type.  Data may be included  or given as an href. </documentation>
		</annotation>
		<simpleContent>
			<extension base="string">
				<attribute name="name" type="string" use="required"/>
				<attribute name="mimeType" type="string" default="text/plain"/>
				<attribute name="href" type="anyURI"/>
			</extension>
		</simpleContent>
	</complexType>
	<complexType name="AncillaryDataSetType">
		<sequence>
			<element name="AncillaryData" type="xtce:AncillaryDataType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ANDedConditionsType">
		<annotation>
			<documentation xml:lang="en">A list of boolean comparisons, or boolean groups that are logically ANDed together.  Any ORed conditions in the list are evaluated first.</documentation>
		</annotation>
		<choice minOccurs="2" maxOccurs="unbounded">
			<element name="Condition" type="xtce:ComparisonCheckType"/>
			<element name="ORedConditions" type="xtce:ORedConditionsType"/>
		</choice>
	</complexType>
	<complexType name="AuthorSetType">
		<sequence>
			<element name="Author" type="xtce:AuthorType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="AuthorType">
		<restriction base="string"/>
	</simpleType>
	<simpleType name="BinaryType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0b or 0B form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[bB][0-1]+"/>
		</restriction>
	</simpleType>
	<complexType name="BooleanExpressionType">
		<annotation>
			<documentation xml:lang="en">Holds an arbitrarily complex boolean expression</documentation>
		</annotation>
		<choice>
			<element name="Condition" type="xtce:ComparisonCheckType"/>
			<element name="ANDedConditions" type="xtce:ANDedConditionsType"/>
			<element name="ORedConditions" type="xtce:ORedConditionsType"/>
		</choice>
	</complexType>
	<complexType name="ByteOrderType">
		<annotation>
			<documentation xml:lang="en">An ordered list of bytes where the order of the bytes is in stream order.  Each byte has an attribute giving its significance.</documentation>
			<appinfo>The software must check to ensure that the significance of each byte is unique, and does not contain bytes of greater significance greater than the size of the object</appinfo>
		</annotation>
		<sequence minOccurs="2" maxOccurs="unbounded">
			<element name="Byte" type="xtce:ByteType"/>
		</sequence>
	</complexType>
	<complexType name="ComparisonCheckType">
		<annotation>
			<documentation xml:lang="en">A ParameterInstanceRef to a value or another parameter instance</documentation>
		</annotation>
		<sequence>
			<element name="ParameterInstanceRef" type="xtce:ParameterInstanceRefType"/>
			<element name="ComparisonOperator" type="xtce:ComparisonOperatorsType"/>
			<choice>
				<element name="ParameterInstanceRef" type="xtce:ParameterInstanceRefType">
					<annotation>
						<documentation xml:lang="en">Parameter is assumed to be of the same type as the comparison Parameter</documentation>
					</annotation>
				</element>
				<element name="Value" type="string">
					<annotation>
						<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
					</annotation>
				</element>
			</choice>
		</sequence>
	</complexType>
	<complexType name="ComparisonListType">
		<annotation>
			<documentation xml:lang="en">All comparisons must be true</documentation>
		</annotation>
		<sequence>
			<element name="Comparison" type="xtce:ComparisonType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="ComparisonOperatorsType">
		<annotation>
			<documentation xml:lang="en">Operators to use when testing a boolean condition for a validity check</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="=="/>
			<enumeration value="!="/>
			<enumeration value="&lt;"/>
			<enumeration value="&lt;="/>
			<enumeration value=">"/>
			<enumeration value=">="/>
		</restriction>
	</simpleType>
	<complexType name="ComparisonType">
		<annotation>
			<documentation xml:lang="en">A simple ParameterInstanceRef to value comparison.  The string supplied in the value attribute needs to be converted to a type matching the Parameter being compared to.  Numerical values are assumed to be base 10 unless proceeded by 0x (hexadecimal), 0o (octal), or 0b (binary).  The value is truncated  to use the least significant bits that match the bit size of the Parameter being compared to.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:ParameterInstanceRefType">
				<attribute name="comparisonOperator" type="xtce:ComparisonOperatorsType" default="=="/>
				<attribute name="value" type="string" use="required">
					<annotation>
						<documentation xml:lang="en">Specify value as a string compliant with the XML
    schema (xs) type specified for each XTCE type:
    integer=xs:integer; float=xs:double; string=xs:string; boolean=xs:boolean;
    binary=xs:hexBinary; enum=xs:string from EnumerationList; 
    relative time= xs:duration; absolute time=xs:dateTime;
    array/aggregate=comma separated list of values inside curly braces {}.
    Supplied value must be within the ValidRange specified for the type and 
    is a calibrated value.
</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ContextCalibratorType">
		<annotation>
			<documentation xml:lang="en">Context calibrations are applied when the ContextMatch is true.  Context calibrators overide Default calibrators</documentation>
		</annotation>
		<sequence>
			<element name="ContextMatch" type="xtce:ContextMatchType"/>
			<element name="Calibrator" type="xtce:CalibratorType"/>
		</sequence>
	</complexType>
	<complexType name="ContextMatchType">
		<annotation>
			<documentation xml:lang="en">A MatchCriteriaType used for Context selection.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:MatchCriteriaType"/>
		</complexContent>
	</complexType>
	<complexType name="CustomAlarmType">
		<annotation>
			<documentation xml:lang="en">Describe a custom, algorithmic alarm condition. The algorithm is assumed to return a boolean value: true or false. See AlarmType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseAlarmType">
				<sequence>
					<element name="InputAlgorithm" type="xtce:InputAlgorithmType">
						<annotation>
							<documentation xml:lang="en">Algorithm returns a boolean.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="PercentCompleteType">
		<annotation>
			<documentation>Describe a percentage complete that is fixed from 0 to 100, or as value from a parameter. See ExecutionVerifierType.</documentation>
		</annotation>
		<choice>
			<element name="FixedValue">
				<annotation>
					<documentation>0 to 100 percent</documentation>
				</annotation>
				<simpleType>
					<restriction base="double">
						<minInclusive value="0.0"/>
						<maxInclusive value="100.0"/>
					</restriction>
				</simpleType>
			</element>
		</choice>
	</complexType>
	<complexType name="DescriptionType" abstract="true">
		<annotation>
			<documentation xml:lang="en">An abstract type definition used as the base for NameDescriptionType or OptionalNameDescriptionType.  The short description is intended to be used for quick "memory jogger" descriptions of the object.  </documentation>
		</annotation>
		<sequence>
			<element name="LongDescription" type="xtce:LongDescriptionType" minOccurs="0"/>
			<element name="AliasSet" type="xtce:AliasSetType" minOccurs="0"/>
			<element name="AncillaryDataSet" type="xtce:AncillaryDataSetType" minOccurs="0"/>
		</sequence>
		<attribute name="shortDescription" type="xtce:ShortDescriptionType" use="optional"/>
	</complexType>
	<complexType name="DiscreteLookupListType">
		<annotation>
			<documentation xml:lang="en">Lookup a value using the lookup list supplied.  Use the first match found.</documentation>
		</annotation>
		<sequence>
			<element name="DiscreteLookup" type="xtce:DiscreteLookupType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="DynamicValueType">
		<annotation>
			<documentation xml:lang="en">Uses a parameter instance to obtain the value.  The parameter value may be optionally adjusted by a Linear function or use a series of boolean expressions to lookup the value.  Anything more complex and a DynamicValue with a CustomAlgorithm may be used  </documentation>
		</annotation>
		<sequence>
			<element name="ParameterInstanceRef" type="xtce:ParameterInstanceRefType"/>
			<element name="LinearAdjustment" type="xtce:LinearAdjustmentType" minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="ErrorDetectCorrectType">
		<annotation>
			<documentation>Describe error detection/correction algorithm.</documentation>
		</annotation>
		<choice>
			<element name="Checksum" type="xtce:ChecksumType"/>
			<element name="CRC" type="xtce:CRCType"/>
			<element name="Parity" type="xtce:ParityType"/>
		</choice>
	</complexType>
	<simpleType name="FixedIntegerValueType">
		<annotation>
			<documentation xml:lang="en">A simple union type combining integer, octal, binary, and hexadecimal types</documentation>
		</annotation>
		<union memberTypes="integer xtce:HexadecimalType xtce:OctalType xtce:BinaryType"/>
	</simpleType>
	<complexType name="HeaderType">
		<annotation>
			<documentation xml:lang="en">Schema for a Header record.  A header contains general information about the system or subsystem.</documentation>
		</annotation>
		<sequence>
			<element name="AuthorSet" type="xtce:AuthorSetType" minOccurs="0"/>
			<element name="NoteSet" type="xtce:NoteSetType" minOccurs="0"/>
			<element name="HistorySet" type="xtce:HistorySetType" minOccurs="0"/>
		</sequence>
		<attribute name="version" type="string"/>
		<attribute name="date" type="string"/>
		<attribute name="classification" type="string" default="NotClassified"/>
		<attribute name="classificationInstructions" type="string"/>
		<attribute name="validationStatus" type="xtce:ValidationStatusType" use="required"/>
	</complexType>
	<simpleType name="HexadecimalType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0x or 0X form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[xX][0-9a-fA-F]+"/>
		</restriction>
	</simpleType>
	<complexType name="HistorySetType">
		<sequence>
			<element name="History" type="xtce:HistoryType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="HistoryType">
		<restriction base="string"/>
	</simpleType>
	<complexType name="IntegerValueType">
		<annotation>
			<documentation xml:lang="en">Contains an Integer value; value may be provided directly or via the value in a parameter.</documentation>
		</annotation>
		<choice>
			<element name="FixedValue" type="xtce:FixedIntegerValueType"/>
			<element name="DynamicValue" type="xtce:DynamicValueType"/>
			<element name="DiscreteLookupList" type="xtce:DiscreteLookupListType"/>
		</choice>
	</complexType>
	<simpleType name="LongDescriptionType">
		<annotation>
			<documentation xml:lang="en">The Long Description is intended to be used for explanatory descriptions of the object and may include HTML markup.  Long Descriptions are of unbounded length</documentation>
		</annotation>
		<restriction base="string"/>
	</simpleType>
	<simpleType name="MathOperatorsType">
		<annotation>
			<documentation>Mathematical operators used in the math operation.  Behavior of each operator on the stack is described using notation (before -- after), where "before" represents the stack before execution of the operator and "after" represent the stack after execution.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="+">
				<annotation>
					<documentation>addition (x1 x2 -- x1+x2)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="-">
				<annotation>
					<documentation>subtraction (x1 x2 -- x1-x2)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="*">
				<annotation>
					<documentation>multiplication (x1 x2 -- x1*x2)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="/">
				<annotation>
					<documentation>division (x1 x2 -- x1/x2) An undefined condition exists if x2 is zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="%">
				<annotation>
					<documentation>unsigned mod (x1 x2 -- x3) Divide x1 by x2, giving the remainder x3; an undefined condition exists if x2 is  zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="^">
				<annotation>
					<documentation>power function (x1 x2 -- x1**x2)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="y^x">
				<annotation>
					<documentation>reverse power function (x1 x2 -- x2**x1)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="ln">
				<annotation>
					<documentation>natural (base e) logarithm (x -- ln\(x)) An undefined condition exists if x is less than or equal to zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="log">
				<annotation>
					<documentation>base-10 logarithm (x-- log\(x)) An undefined condition exists if x is less than or equal to zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="e^x">
				<annotation>
					<documentation>exponentiation (x -- exp\(x))</documentation>
				</annotation>
			</enumeration>
			<enumeration value="1/x">
				<annotation>
					<documentation>inversion (x -- 1/x) An undefined condition exists if x is zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="x!">
				<annotation>
					<documentation>factorial (x -- x!) An undefined condition exists if x is less than zero</documentation>
				</annotation>
			</enumeration>
			<enumeration value="tan">
				<annotation>
					<documentation>tangent (x -- tan\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="cos">
				<annotation>
					<documentation>cosine (x -- cos\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="sin">
				<annotation>
					<documentation>sine (x -- sin\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="atan">
				<annotation>
					<documentation>arctangent (x -- atan\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="acos">
				<annotation>
					<documentation>arccosine (x -- acos\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="asin">
				<annotation>
					<documentation>arcsine (x -- asin\(x)) radians</documentation>
				</annotation>
			</enumeration>
			<enumeration value="tanh">
				<annotation>
					<documentation>hyperbolic tangent (x -- tanh\(x))</documentation>
				</annotation>
			</enumeration>
			<enumeration value="cosh">
				<annotation>
					<documentation>hyperbolic cosine (x -- cosh\(x))</documentation>
				</annotation>
			</enumeration>
			<enumeration value="sinh">
				<annotation>
					<documentation>hyperbolic sine (x -- sinh\(x))</documentation>
				</annotation>
			</enumeration>
			<enumeration value="atanh">
				<annotation>
					<documentation>hyperbolic arctangent (x -- atanh\(x)) An undefined condition exists if x is outside the range [-1.0,+1.0]</documentation>
				</annotation>
			</enumeration>
			<enumeration value="acosh">
				<annotation>
					<documentation>hyperbolic arccosine (x -- acosh\(x)) An undefined condition exists if n is less than one</documentation>
				</annotation>
			</enumeration>
			<enumeration value="asinh">
				<annotation>
					<documentation>hyperbolic arcsine (x -- asinh\(x)) </documentation>
				</annotation>
			</enumeration>
			<enumeration value="swap">
				<annotation>
					<documentation>swap the top two stack items (x1 x2 -- x2 x1)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="drop">
				<annotation>
					<documentation>Remove top item from the stack (x -- )</documentation>
				</annotation>
			</enumeration>
			<enumeration value="dup">
				<annotation>
					<documentation>Duplicate top item on the stack (x -- x x)</documentation>
				</annotation>
			</enumeration>
			<enumeration value="over">
				<annotation>
					<documentation>Duplicate top item on the stack (x1 x2 -- x1 x2 x1)</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>
	<complexType name="MatchCriteriaType">
		<annotation>
			<documentation xml:lang="en">Contains either a simple Comparison, a ComparisonList, an arbitrarily complex BooleanExpression or an escape to an externally defined algorithm</documentation>
		</annotation>
		<choice>
			<element name="Comparison" type="xtce:ComparisonType">
				<annotation>
					<documentation xml:lang="en">A simple comparison check</documentation>
				</annotation>
			</element>
			<element name="ComparisonList" type="xtce:ComparisonListType"/>
			<element name="BooleanExpression" type="xtce:BooleanExpressionType">
				<annotation>
					<documentation xml:lang="en">An arbitrarily complex boolean expression</documentation>
				</annotation>
			</element>
			<element name="CustomAlgorithm" type="xtce:InputAlgorithmType">
				<annotation>
					<documentation xml:lang="en">An escape to an externally defined algorithm</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="MathOperationType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Postfix (aka Reverse Polish Notation (RPN)) notation is used to describe mathmatical equations. It uses a stack where operands (either fixed values or ParameterInstances) are pushed onto the stack from first to last in the XML. As the operators are specified, each pops off operands as it evaluates them, and pushes the result back onto the stack. In this case postfix is used to avoid having to specify parenthesis. To convert from infix to postfix, use Dijkstra's "shunting yard" algorithm.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="ValueOperand" type="double">
				<annotation>
					<documentation xml:lang="en">The element is used to represent a constant numeric value in the math operation.</documentation>
				</annotation>
			</element>
			<element name="ThisParameterOperand" type="string">
				<annotation>
					<documentation xml:lang="en">This element is a shortcut to represent the current parameter for which this math operation applies. It is shorter than using the ParameterInstanceRefOperand, which can also specify this current parameter, but in a longer form syntax.</documentation>
				</annotation>
			</element>
			<element name="ParameterInstanceRefOperand" type="xtce:ParameterInstanceRefType">
				<annotation>
					<documentation xml:lang="en">This element is used to reference the last received/assigned value of any Parameter in this math operation.</documentation>
				</annotation>
			</element>
			<element name="Operator" type="xtce:MathOperatorsType">
				<annotation>
					<documentation xml:lang="en">Binary operators: +, -, *, /, %, ^ operate on the top two values in the stack, leaving the result on the top of the stack.  Unary operators: 1/x, x!, e^x, ln, log, and trigonometric operators operate on the top member of the stack also leaving the result on the top of the stack.  'ln' is a natural log where 'log' is a base 10 logarithm.  Trigonometric operators use degrees.  'swap' swaps the top two members of the stack.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="NameType">
		<annotation>
			<documentation>Defines a name where all characters are allowed except '.', '[', ']', ':',  ' ', and '/'.  See NameDescriptionType.</documentation>
		</annotation>
		<restriction base="normalizedString">
			<pattern value="[^./:\[\] ]+"/>
		</restriction>
	</simpleType>
	<complexType name="NameDescriptionType">
		<annotation>
			<documentation xml:lang="en">The type definition used by most elements that require a name with optional descriptions.   </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DescriptionType">
				<attribute name="name" type="xtce:NameType" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="NameReferenceType">
		<annotation>
			<documentation>Describe a reference to a named item in an XTCE instance document.  The named must be of schema type NameType.  All name references use a Unix style file system name format where the SpaceSystem names form a path in the SpaceSystem tree. The following characters are reserved for the path: '/', ‘..’ and ‘.’ (multiple consecutive ‘/’s are treated as one).  The path portion is similar to the directory path used in file system names and the path characters have similar meaning (e.g., SimpleSat/Bus/EPDS/BatteryOne/Voltage). There are three overall forms for name references:  absolute path, relative path and just the name.  The first two forms are called qualified name references; the last form is called an unqualified name reference.  The unqualified form refers to an item in the SpaceSystem the reference is used in.  The unqualified form refers to an item in the SpaceSystem the reference is used in.  It is illegal for a name reference to point to no item (“a dangling name reference”).</documentation>
		</annotation>
		<restriction base="normalizedString">
			<pattern value="/?(([^./:\[\]]+|\.|\.\.)/)*([^./:\[\]]+)+"/>
		</restriction>
	</simpleType>
	<complexType name="NoteSetType">
		<sequence>
			<element name="Note" type="xtce:NoteType" minOccurs="0" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="NoteType">
		<restriction base="string"/>
	</simpleType>
	<complexType name="NumberFormatType">
		<annotation>
			<documentation xml:lang="en">This type describes how a numeric value should be represented in engineering/calibrated form.  The defaults reflect the most common form.</documentation>
		</annotation>
		<attribute name="numberBase" type="xtce:RadixType" use="optional" default="Decimal">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to the radix.  Default is base 10.</documentation>
			</annotation>
		</attribute>
		<attribute name="minimumFractionDigits" type="xtce:NonNegativeLongType" use="optional" default="0">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to the minimum number of fractional digits.  The default is 0.</documentation>
			</annotation>
		</attribute>
		<attribute name="maximumFractionDigits" type="xtce:NonNegativeLongType" use="optional">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to the maximum or upper bound of the number of digits.  There is no default.  No value specified should be interpreted as no upper bound such that all requires digits are used to fully characterize the value.</documentation>
			</annotation>
		</attribute>
		<attribute name="minimumIntegerDigits" type="xtce:NonNegativeLongType" use="optional" default="1">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to the minimum number of integer digits.  The default is 1.</documentation>
			</annotation>
		</attribute>
		<attribute name="maximumIntegerDigits" type="xtce:NonNegativeLongType" use="optional">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to the maximum or upper bound of the integer digits.  There is no default.  No value specified should be interpreted as no upper bound such that all requires digits are used to fully characterize the value.</documentation>
			</annotation>
		</attribute>
		<attribute name="negativeSuffix" type="string" use="optional" default="">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to negative values.  This attribute specifies the character or characters that should be appended to the numeric value to indicate negative values.  The default is none.</documentation>
			</annotation>
		</attribute>
		<attribute name="positiveSuffix" type="string" use="optional" default="">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to positive values.  This attribute specifies the character or characters that should be appended to the numeric value to indicate positive values.  The default is none.  Zero is considered to be specific to the implementation/platform and is not implied here.</documentation>
			</annotation>
		</attribute>
		<attribute name="negativePrefix" type="string" use="optional" default="-">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to negative values.  This attribute specifies the character or characters that should be prepended to the numeric value to indicate negative values.  The default is a minus character "-".</documentation>
			</annotation>
		</attribute>
		<attribute name="positivePrefix" type="string" use="optional" default="">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to positive values.  This attribute specifies the character or characters that should be prepended to the numeric value to indicate positive values.  The default is none.  Zero is considered to be specific to the implementation/platform and is not implied here.</documentation>
			</annotation>
		</attribute>
		<attribute name="showThousandsGrouping" type="boolean" use="optional" default="false">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to larger values.  Groupings by thousand are specific to locale, so the schema only specifies whether they will be present and not which character separators are used.  The default is false.</documentation>
			</annotation>
		</attribute>
		<attribute name="notation" type="xtce:FloatingPointNotationType" use="optional" default="normal">
			<annotation>
				<documentation xml:lang="en">Describes how the engineering/calibrated value of this number should be displayed with respect to notation.  Engineering, scientific, or traditional decimal notation may be specified.  The precise characters used is locale specific for the implementation/platform.  The default is "normal" for the traditional notation.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<simpleType name="OctalType">
		<annotation>
			<documentation xml:lang="en">A simple restriction on string for hexadecimal numbers.  Must be in 0o or 0O form.</documentation>
		</annotation>
		<restriction base="string">
			<pattern value="0[oO][0-7]+"/>
		</restriction>
	</simpleType>
	<complexType name="OptionalNameDescriptionType">
		<annotation>
			<documentation xml:lang="en">The type definition used by most elements that have an optional name with optional descriptions.  </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:DescriptionType">
				<attribute name="name" type="xtce:NameType" use="optional"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="ORedConditionsType">
		<annotation>
			<documentation xml:lang="en">A list of boolean comparisons, or boolean groups that are logically ORed together.  Any ANDed conditions in the list are evaluated first.</documentation>
		</annotation>
		<choice minOccurs="2" maxOccurs="unbounded">
			<element name="Condition" type="xtce:ComparisonCheckType"/>
			<element name="ANDedConditions" type="xtce:ANDedConditionsType"/>
		</choice>

	</complexType>
	<complexType name="ParameterSetType">
		<annotation>
			<documentation xml:lang="en">Used by both the TelemetryMetaData and the CommandMetaData components each may be built independently.</documentation>
		</annotation>
		<choice maxOccurs="unbounded">
			<element name="Parameter" type="xtce:ParameterType">
				<annotation>
					<appinfo>Need to ensure that the named types actually exist</appinfo>
				</annotation>
			</element>
			<element name="ParameterRef" type="xtce:ParameterRefType">
				<annotation>
					<documentation xml:lang="en">Used to include a Parameter defined in another sub-system in this sub-system.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<complexType name="PolynomialType">
		<annotation>
			<documentation xml:lang="en">A polynomial expression.  For example: 3 + 2x</documentation>
		</annotation>
		<sequence>
			<element name="Term" type="xtce:TermType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<simpleType name="RadixType">
		<annotation>
			<documentation xml:lang="en">Specifies the number base</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="Decimal"/>
			<enumeration value="Hexadecimal"/>
			<enumeration value="Octal"/>
			<enumeration value="Binary"/>
		</restriction>
	</simpleType>
	<simpleType name="RangeFormType">
		<annotation>
			<documentation>Defines whether the defined range between the minimum and maximum is the outside or inside the range being defined. The default, outside matches values less than the minimum and greater than the maximum.  Inside matches values between the minimum and maximum.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="outside"/>
			<enumeration value="inside"/>
		</restriction>
	</simpleType>
	<complexType name="ReferenceTimeType">
		<annotation>
			<documentation xml:lang="en">Most time values are relative to another time e.g. seconds are relative to minutes, minutes are relative to hours.  This type is used to describe this relationship starting with the least significant time Parameter to and progressing to the most significant time parameter.  </documentation>
		</annotation>
		<choice>
			<element name="OffsetFrom" type="xtce:ParameterInstanceRefType"/>
			<element name="Epoch" type="xtce:EpochType">
				<annotation>
					<documentation xml:lang="en">Epochs may be specified as an xs date where time is implied to be 00:00:00, xs dateTime, or string enumeration of common epochs.  The enumerations are TAI (used by CCSDS and others), J2000, UNIX (also known as POSIX), and GPS.</documentation>
				</annotation>
			</element>
		</choice>
	</complexType>
	<simpleType name="RelativeTimeType">
		<annotation>
			<documentation xml:lang="en">Used to describe a relative time.  Normally used for time offsets.  A Relative time is expressed as PnYn MnDTnH nMnS, where nY represents the number of years, nM the number of months, nD the number of days, 'T' is the date/time separator, nH the number of hours, nM the number of minutes and nS the number of seconds. The number of seconds can include decimal digits to arbitrary precision.  For example, to indicate a duration of 1 year, 2 months, 3 days, 10 hours, and 30 minutes, one would write: P1Y2M3DT10H30M. One could also indicate a duration of minus 120 days as: -P120D.  An extension of Schema duration type. </documentation>
		</annotation>
		<restriction base="duration"/>
	</simpleType>
	<complexType name="RepeatType">
		<annotation>
			<documentation xml:lang="en">Hold a structure that can be repeated X times, where X is the Count</documentation>
		</annotation>
		<sequence>
			<element name="Count" type="xtce:IntegerValueType">
				<annotation>
					<documentation xml:lang="en">Value (either fixed or dynamic) that contains the count of repeated structures.</documentation>
				</annotation>
			</element>
			<element name="Offset" type="xtce:IntegerValueType" minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="ServiceRefType">
		<annotation>
			<documentation xml:lang="en">A reference to a Service</documentation>
		</annotation>
		<simpleContent>
			<extension base="xtce:NameReferenceType">
				<attribute name="serviceRef" type="xtce:NameReferenceType" use="required"/>
			</extension>
		</simpleContent>
	</complexType>
	<simpleType name="ShortDescriptionType">
		<annotation>
			<documentation xml:lang="en">It is strongly recommended that the short description be kept under 80 characters in length</documentation>
		</annotation>
		<restriction base="string"/>
	</simpleType>
	<complexType name="SplinePointType">
		<annotation>
			<documentation xml:lang="en">a spline is a set on points from which a curve may be drawn to interpolate raw to calibrated values</documentation>
		</annotation>
		<attribute name="order" type="positiveInteger" default="1"/>
		<attribute name="raw" type="double" use="required"/>
		<attribute name="calibrated" type="double" use="required"/>
	</complexType>
	<complexType name="TermType">
		<annotation>
			<documentation xml:lang="en">A term in a polynomial expression. </documentation>
		</annotation>
		<attribute name="coefficient" type="double" use="required"/>
		<attribute name="exponent" type="xtce:NonNegativeLongType" use="required"/>
	</complexType>
	<simpleType name="TimeUnitsType">
		<annotation>
			<documentation xml:lang="en">base time units.  days, months, years have obvoius ambiguity and should be avoided</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="seconds"/>
			<enumeration value="picoSeconds"/>
			<enumeration value="days"/>
			<enumeration value="months"/>
			<enumeration value="years"/>
		</restriction>
	</simpleType>
	<complexType name="UnitType" mixed="true">
		<annotation>
			<documentation>Describe the exponent, factor, form, and description for a unit.  The unit itself is in element Unit in UnitSet.  See UnitSetType.  The attributes are optional because different programs use this element in different ways, depending on vendor support.</documentation>
		</annotation>
		<attribute name="power" type="double" use="optional" default="1"/>
		<attribute name="factor" type="string" use="optional" default="1"/>
		<attribute name="description" type="string" use="optional">
			<annotation>
				<documentation>A description of the unit, which may be for expanded human readability or for specification of the nature/property of the unit.  For example, meters per second squared is of a nature/property of acceleration.</documentation>
			</annotation>
		</attribute>
		<attribute name="form" type="xtce:UnitFormType" use="optional" default="calibrated"/>
	</complexType>
	<simpleType name="ValidationStatusType">
		<restriction base="string">
			<enumeration value="Unknown"/>
			<enumeration value="Working"/>
			<enumeration value="Draft"/>
			<enumeration value="Test"/>
			<enumeration value="Validated"/>
			<enumeration value="Released"/>
			<enumeration value="Withdrawn"/>
		</restriction>
	</simpleType>
	<complexType name="ValueEnumerationType">
		<annotation>
			<documentation>Describe a value and an associated string label, see EnumerationListType.</documentation>
		</annotation>
		<attribute name="value" type="integer" use="required"/>
		<attribute name="maxValue" type="integer">
			<annotation>
				<documentation>If max value is given, the label maps to a range where value is less than or equal to maxValue. The range is inclusive.</documentation>
			</annotation>
		</attribute>
		<attribute name="label" type="string" use="required"/>
		<attribute name="shortDescription" type="xtce:ShortDescriptionType"/>
	</complexType>
	<!--*************************************************************-->
	<!--******** Types used with alarms ***********************-->
	<complexType name="AlarmConditionsType">
		<annotation>
			<documentation xml:lang="en">When the alarm is determined by boolean logic</documentation>
		</annotation>
		<sequence>
			<element name="WatchAlarm" type="xtce:MatchCriteriaType" minOccurs="0"/>
			<element name="WarningAlarm" type="xtce:MatchCriteriaType" minOccurs="0"/>
			<element name="DistressAlarm" type="xtce:MatchCriteriaType" minOccurs="0"/>
			<element name="CriticalAlarm" type="xtce:MatchCriteriaType" minOccurs="0"/>
			<element name="SevereAlarm" type="xtce:MatchCriteriaType" minOccurs="0"/>
		</sequence>
	</complexType>
	<complexType name="AlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Describe up to six ranges where either less severe ranges are a subset of more severe ranges (outside), or more severe ranges are a subset of less severe ranges (inside). In both forms, the undefined least severe range is normal. Range values are in calibrated engineering units.  See FloatRangeType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseAlarmType">
				<sequence>
					<element name="WatchRange" type="xtce:FloatRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A range of least concern.  Considered to be below the most commonly used Warning level.</documentation>
						</annotation>
					</element>
					<element name="WarningRange" type="xtce:FloatRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A range of concern that represents the most commonly used minimum concern level for many software applications.</documentation>
						</annotation>
					</element>
					<element name="DistressRange" type="xtce:FloatRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A range of concern in between the most commonly used Warning and Critical levels.</documentation>
						</annotation>
					</element>
					<element name="CriticalRange" type="xtce:FloatRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A range of concern that represents the most commonly used maximum concern level for many software applications.</documentation>
						</annotation>
					</element>
					<element name="SevereRange" type="xtce:FloatRangeType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">A range of highest concern.  Considered to be above the most commonly used Critical level.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="rangeForm" type="xtce:RangeFormType" default="outside">
					<annotation>
						<documentation xml:lang="en">A value of outside specifies that the most severe range is outside all the other ranges:  -severe -critical -distress -warning -watch normal +watch +warning +distress +critical +severe.  A value of inside "inverts" these bands:  -green -watch -warning -distress -critical severe +critical +distress +warning +watch.  The most common form used is "outside" and is the default.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AlarmType" abstract="true">
		<annotation>
			<documentation xml:lang="en">Defines a base schema type used to build up the other data type specific alarm types.  The definition includes a count to go into alarm (minViolations – the counts to go out of alarm is the same), a condition style alarm and a custom alarm.   See AlarmConditionType, CustomAlgorithmType, BinaryAlarmConditionType, BooleanAlarmType, BinaryContextAlarmType, EnumerationAlarmType, NumericAlarmType, StringAlarmType, TimeAlarmType, TimeAlarmConditionType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseAlarmType">
				<sequence>
					<choice minOccurs="0">
						<element name="AlarmConditions" type="xtce:AlarmConditionsType">
							<annotation>
								<documentation xml:lang="en">A MatchCriteria may be specified for each of the 5 alarm levels.  Each level is optional and the alarm should be the highest level to test true.</documentation>
							</annotation>
						</element>
						<element name="CustomAlarm" type="xtce:CustomAlarmType">
							<annotation>
								<documentation xml:lang="en">An escape for ridiculously complex alarm conditions.  Will trigger on changes to the  containing Parameter.</documentation>
							</annotation>
						</element>
					</choice>
				</sequence>
				<attribute name="minViolations" type="xtce:PositiveLongType" default="1">
					<annotation>
						<documentation xml:lang="en">The number of successive instances that meet the alarm conditions for the alarm to trigger. The default is 1.</documentation>
					</annotation>
				</attribute>
				<attribute name="minConformance" type="xtce:PositiveLongType">
					<annotation>
						<documentation xml:lang="en">Optionally specify the number of successive instances that do not meet the alarm conditions to leave the alarm state.  If this attribute is not specified, it is treated as being equal to minViolations (symmetric).</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="AlarmMultiRangesType">
		<annotation>
			<documentation xml:lang="en">Describe any number of alarm ranges, each with its own level (normal, warning, watch, distress, critical, severe) and range form (inside or outside).  Ranges may overlap, be disjoint and so forth.  Ranges within the value sprectrum non-specified are non-normal.  The most severe range level of value within the ranges is the level of the alarm.  Range values are in calibrated engineering units.  See FloatRangeType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:BaseAlarmType">
				<sequence>
					<element name="Range" type="xtce:MultiRangeType" maxOccurs="unbounded">
						<annotation>
							<documentation xml:lang="en">Describe any number of alarm ranges, each with its own level (normal, warning, watch, distress, critical, severe) and range form (inside or outside).  Ranges may overlap, be disjoint and so forth.  Ranges within the value sprectrum non-specified are non-normal.  The most severe range level of value within the ranges is the level of the alarm.  Range values are in calibrated engineering units.  See FloatRangeType.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="BasisType">
		<restriction base="string">
			<enumeration value="perSecond"/>
			<enumeration value="perContainerUpdate"/>
		</restriction>
	</simpleType>
	<complexType name="BinaryAlarmConditionType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Binary types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType"/>
		</complexContent>
	</complexType>
	<complexType name="BooleanAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Boolean types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType"/>
		</complexContent>
	</complexType>
	<complexType name="BinaryContextAlarmListType">
		<sequence>
			<element name="ContextAlarm" type="xtce:BinaryContextAlarmType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="BinaryContextAlarmType">
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanContextAlarmType">
		<complexContent>
			<extension base="xtce:BooleanAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="BooleanContextAlarmListType">
		<sequence>
			<element name="ContextAlarm" type="xtce:BooleanContextAlarmType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="ChangeAlarmRangesType">
		<annotation>
			<documentation xml:lang="en">Describe an alarm when the parameter value's rate-of-change is either too fast or too slow.   The change may be with respect to time (the default) or with respect to samples (delta alarms).  Use the changeType attribute to select the type: changePerSecond (time) or changePerSample (delta).  The change may also be ether relative (as a percentage change) or absolute as set by the changeBasis attribute. (Delta alarms are typically absolute but percentage is conceivable). The alarm also requires the spanOfInterest in both samples and seconds to have passed before it is to trigger.  For time based rate of change alarms, the time specified in spanOfInterestInSeconds is used to calculate the change.  For sample based rate of change alarms, the change is calculated over the number of samples specified in spanOfInterestInSamples. A typical delta alarm would set:  changeType=changePerSample, changeBasis=absoluteChange, spanOfInterestInSamples=1. A typical time based version would set:  changeType=changePerSecond, changeBasis=percentageChange, and spaceOfInterestInSeconds=1.  To set the ranges use maxInclusive, the following definition applies:   | Normal.maxInclusive | &amp;lt;= | Watch.maxInclusive | &amp;lt;= | Warning.maxInclusive | &amp;lt;= | Distress.maxInclusive | &amp;lt;= | Critical.maxInclusive | &amp;lt;= | Severe.maxInclusive |.  And it is further assumed the absolute value of each range and sampled value it taken to evaluate the alarm. See NumericAlarmType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="changeType" type="xtce:ChangeSpanType" default="changePerSecond"/>
				<attribute name="changeBasis" type="xtce:ChangeBasisType" default="absoluteChange"/>
				<attribute name="spanOfInterestInSamples" type="xtce:PositiveLongType" default="1"/>
				<attribute name="spanOfInterestInSeconds" type="double" default="0"/>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="ChangeBasisType">
		<restriction base="string">
			<enumeration value="absoluteChange"/>
			<enumeration value="percentageChange"/>
		</restriction>
	</simpleType>
	<simpleType name="ConcernLevelsType">
		<annotation>
			<documentation xml:lang="en">Defines six levels: Normal, Watch, Warning, Distress, Critical and Severe. Typical implementations color the "normal" level as green, "warning" level as yellow, and "critical" level as red.  These level definitions are used throughout the alarm definitions.  Some systems provide a greater fidelity with the additional levels provided here.  The "normal" level is not typically needed because "normal" should be construed as none of the concern levels evaluating to true.  For cases where definiing "normal" is needed, refer to the specific alarm definition types.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="normal"/>
			<enumeration value="watch"/>
			<enumeration value="warning"/>
			<enumeration value="distress"/>
			<enumeration value="critical"/>
			<enumeration value="severe"/>
		</restriction>
	</simpleType>
	<simpleType name="ConsequenceLevelType">
		<annotation>
			<documentation>Defines the criticality level of a command.  Criticality levels follow ISO 14950.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="normal">
				<annotation>
					<documentation>Normal command.  Corresponds to ISO 14950 Level D telecommand criticality.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="vital">
				<annotation>
					<documentation>Command that is not a critical command but is essential to the success of the mission and, if sent at the wrong time, could cause momentary loss of the mission.  Corresponds to ISO 14950 Level C telecommand criticality.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="critical">
				<annotation>
					<documentation>Command that, if executed at the wrong time or in the wrong configuration, could cause irreversible loss or damage for the mission.  Corresponds to ISO 14950 Level B telecommand criticality.  Some space programs have called this "restricted" and may be implemented with a secondary confirmation before transmission.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="forbidden">
				<annotation>
					<documentation>Command that is not expected to be used for nominal or foreseeable contingency operations, that is included for unforeseen contingency operations, and that could cause irreversible damage if executed at the wrong time or in the wrong configuration.  Corresponds to ISO 14950 Level A telecommand criticality.  Some space programs have called this "prohibited".</documentation>
				</annotation>
			</enumeration>
			<enumeration value="user1">
				<annotation>
					<documentation>In the event that a program uses this value, that program will need to define the meaning of this value to their system.</documentation>
				</annotation>
			</enumeration>
			<enumeration value="user2">
				<annotation>
					<documentation>In the event that a program uses this value, that program will need to define the meaning of this value to their system.</documentation>
				</annotation>
			</enumeration>
		</restriction>
	</simpleType>
	<simpleType name="ChangeSpanType">
		<restriction base="string">
			<enumeration value="changePerSecond"/>
			<enumeration value="changePerSample"/>
		</restriction>
	</simpleType>
	<complexType name="DiscreteLookupType">
		<complexContent>
			<extension base="xtce:MatchCriteriaType">
				<attribute name="value" type="integer" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumerationAlarmLevelType">
		<annotation>
			<documentation xml:lang="en">Describe an alarm level and its enumeration label to trigger from. See EnumeratedAlarmType and EnumeratedParameterType.</documentation>
		</annotation>
		<attribute name="alarmLevel" type="xtce:ConcernLevelsType" use="required">
			<annotation>
				<documentation xml:lang="en">Defines six levels: Normal, Watch, Warning, Distress, Critical and Severe. Typical implementations color the "normal" level as green, "warning" level as yellow, and "critical" level as red.  In the case of enumeration alarms, the "normal" is assumed by implementations to be any label not otherwise in an alarm state.</documentation>
			</annotation>
		</attribute>
		<attribute name="enumerationLabel" type="string" use="required">
			<annotation>
				<documentation xml:lang="en">The enumeration label is the engineering/calibrated value for enumerated types.</documentation>
			</annotation>
		</attribute>
	</complexType>
	<complexType name="EnumerationAlarmListType">
		<sequence>
			<element name="EnumerationAlarm" type="xtce:EnumerationAlarmLevelType" maxOccurs="unbounded">
				<annotation>
					<documentation xml:lang="en">Describe an alarm state for an enumeration label where the label is engineer/calibrated value.  Note that labels may represent multiple raw/uncalbrated values.</documentation>
				</annotation>
			</element>
		</sequence>
	</complexType>
	<complexType name="EnumerationContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Describe a context that when true the alarm condition may be evaluated.  See ContextMatchType and EnumerationAlarmType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:EnumerationAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType">
						<annotation>
							<documentation xml:lang="en">Describe a context in terms of a parameter and value that when true enables the context alarm definition.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="EnumerationAlarmType">
		<annotation>
			<documentation>Describe alarm conditions specific to the enumeration data type, extends the basic AlarmType with an EnumerationAlarmList.  The alarms are described using the label (engineering/calibrated value) of the enumerated parameter.  Enumeration labels may represent several raw/uncalibrated values, so as a result, a single alarm definition here may represent multiple raw values in the enumerated parameter.  It is not necessary to define an alarm for raw/uncalibrated values that do not map to an enumeration.  Implementations should implicitly define this as an alarm case, of which the manifestation of that is program/implementation specific.  See EnumeratedParameterType.</documentation>
			<appinfo>An additional check needs to be performed to ensure that the enumeration values in the alarms are valid enumeration values for the Parameter</appinfo>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="EnumerationAlarmList" type="xtce:EnumerationAlarmListType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">List of alarm state definitions for this enumerated type.</documentation>
						</annotation>
					</element>
				</sequence>
				<attribute name="defaultAlarmLevel" type="xtce:ConcernLevelsType" default="normal">
					<annotation>
						<documentation xml:lang="en">Alarm state name for when no enumeration alarms evaluate to true.  This defaults to "normal", which is almost always the case.  Setting it to another alarm state permits a form of "inverted logic" where the alarm list can specify the normal states instead of the alarm states.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="FloatingPointNotationType">
		<restriction base="string">
			<enumeration value="normal"/>
			<enumeration value="scientific"/>
			<enumeration value="engineering"/>
		</restriction>
	</simpleType>
	<complexType name="FloatRangeType">
		<annotation>
			<documentation xml:lang="en">A range of numbers.  "minInclusive", "minExclusive", "maxInclusive" and "maxExclusive" attributes are borrowed from the W3C schema language.</documentation>
		</annotation>
		<attribute name="minInclusive" type="double"/>
		<attribute name="minExclusive" type="double"/>
		<attribute name="maxInclusive" type="double"/>
		<attribute name="maxExclusive" type="double"/>
	</complexType>
	<complexType name="IntegerRangeType">
		<annotation>
			<documentation xml:lang="en">An integral range of numbers.  "min", and "max".</documentation>
		</annotation>
		<attribute name="minInclusive" type="xtce:FixedIntegerValueType"/>
		<attribute name="maxInclusive" type="xtce:FixedIntegerValueType"/>
	</complexType>
	<complexType name="LinearAdjustmentType">
		<annotation>
			<documentation xml:lang="en">A slope and intercept may be applied to scale or shift the value of the parameter in the dynamic value</documentation>
		</annotation>
		<attribute name="slope" type="double"/>
		<attribute name="intercept" type="double" default="0"/>
	</complexType>
	<complexType name="MultiRangeType">
		<annotation>
			<documentation xml:lang="en">The alarm multi-range element type permits users to define multiple alarm ranges in a sequence that goes beyond the more typical "inside" and "outside" range definitions.  It can be thought of as a "barber pole" definition.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatRangeType">
				<attribute name="rangeForm" type="xtce:RangeFormType" default="outside">
					<annotation>
						<documentation xml:lang="en">A value of outside specifies that the most severe range is outside all the other ranges:  -severe -critical -distress -warning -watch normal +watch +warning +distress +critical +severe.  A value of inside "inverts" these bands:  -green -watch -warning -distress -critical severe +critical +distress +warning +watch.  The most common form used is "outside" and is the default.</documentation>
					</annotation>
				</attribute>
				<attribute name="level" type="xtce:ConcernLevelsType">
					<annotation>
						<documentation xml:lang="en">The level of concern for this alarm definition.</documentation>
					</annotation>
				</attribute>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NumericAlarmType">
		<annotation>
			<documentation xml:lang="en">Describe alarm conditions specific to the numeric data types, extends the basic AlarmType with StaticAlarmRanges and ChangeAlarmRanges.  See FloatParameterType and IntegerParameterType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StaticAlarmRanges" type="xtce:AlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">StaticAlarmRanges are used to trigger alarms when the parameter value passes some threshold value.</documentation>
						</annotation>
					</element>
					<element name="ChangeAlarmRanges" type="xtce:ChangeAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">ChangeAlarmRanges are used to trigger alarms when the parameter value changes by a rate or quantity from a reference.</documentation>
						</annotation>
					</element>
					<element name="AlarmMultiRanges" type="xtce:AlarmMultiRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">Similar to but more lenient form of StaticAlarmRanges.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="NumericContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Describe a parameter dependent context, that when evaluates to true, enables the use of this alarm definition.  See ContextMatchType and NumericAlarmType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:NumericAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType">
						<annotation>
							<documentation xml:lang="en">Contains the evaluation criteria for a parameter dependent test, that when evaluates to true, enables this alarm definition.</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="RangeEnumerationType">
		<annotation>
			<documentation>Describe a range of values associated with a label. </documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:FloatRangeType">
				<attribute name="label" type="string" use="required"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringAlarmLevelType">
		<annotation>
			<documentation xml:lang="en">Pattern may be a regular expression</documentation>
		</annotation>
		<attribute name="alarmLevel" type="xtce:ConcernLevelsType" use="required"/>
		<attribute name="matchPattern" type="string" use="required"/>
	</complexType>
	<complexType name="StringAlarmListType">
		<sequence>
			<element name="StringAlarm" type="xtce:StringAlarmLevelType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="StringAlarmType">
		<annotation>
			<documentation xml:lang="en">Describe alarms specific to the string data type, extends the basic AlarmType, while adding a StringAlarmList and defaultAlarmLevel attribute. The string alarm list is evaluated in list order. See ConcernsLevelsType and StringAlarmListType.</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StringAlarmList" type="xtce:StringAlarmListType" minOccurs="0"/>
				</sequence>
				<attribute name="defaultAlarmLevel" type="xtce:ConcernLevelsType" default="normal"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringContextAlarmType">
		<complexContent>
			<extension base="xtce:StringAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="StringContextAlarmListType">
		<sequence>
			<element name="ContextAlarm" type="xtce:StringContextAlarmType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="TimeAlarmType">
		<annotation>
			<documentation xml:lang="en">Alarms associated with time data types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType">
				<sequence>
					<element name="StaticAlarmRanges" type="xtce:TimeAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">StaticAlarmRanges are used to trigger alarms when the parameter value passes some threshold value</documentation>
						</annotation>
					</element>
					<element name="ChangePerSecondAlarmRanges" type="xtce:TimeAlarmRangesType" minOccurs="0">
						<annotation>
							<documentation xml:lang="en">ChangePerSecondAlarmRanges are used to trigger alarms when the parameter value's rate-of-change passes some threshold value.  An alarm condition that triggers when the value changes too fast (or too slow)</documentation>
						</annotation>
					</element>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TimeAlarmConditionType">
		<annotation>
			<documentation xml:lang="en">Alarm conditions for Time types</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:AlarmType"/>
		</complexContent>
	</complexType>
	<complexType name="TimeAlarmRangesType">
		<complexContent>
			<extension base="xtce:AlarmRangesType">
				<attribute name="timeUnits" type="xtce:TimeUnitsType" default="seconds"/>
			</extension>
		</complexContent>
	</complexType>
	<complexType name="TimeContextAlarmListType">
		<sequence>
			<element name="ContextAlarm" type="xtce:TimeContextAlarmType" maxOccurs="unbounded"/>
		</sequence>
	</complexType>
	<complexType name="TimeContextAlarmType">
		<annotation>
			<documentation xml:lang="en">Context alarms are applied when the ContextMatch is true.  Context alarms override Default alarms</documentation>
		</annotation>
		<complexContent>
			<extension base="xtce:TimeAlarmType">
				<sequence>
					<element name="ContextMatch" type="xtce:ContextMatchType"/>
				</sequence>
			</extension>
		</complexContent>
	</complexType>
	<simpleType name="NonNegativeLongType">
		<annotation>
			<documentation>XTCE-specific replacement for xtce:NonNegativeLongType which more cleanly maps to native data types.</documentation>
		</annotation>
		<restriction base="long">
			<minInclusive value="0"/>
		</restriction>
	</simpleType>
	<simpleType name="PositiveLongType">
		<annotation>
			<documentation>XTCE-specific replacement for xtce:PositiveLongType which more cleanly maps to native data types.</documentation>
		</annotation>
		<restriction base="long">
			<minInclusive value="1"/>
		</restriction>
	</simpleType>
	<simpleType name="UnitFormType">
		<annotation>
			<documentation>Optionally specify if this information pertains to something other than the calibrated/engineering value.</documentation>
		</annotation>
		<restriction base="string">
			<enumeration value="calibrated"/>
			<enumeration value="uncalibrated"/>
			<enumeration value="raw"/>
		</restriction>
	</simpleType>
	<!--******** End of Common Types Schema **************-->
	<!--*************************************************************-->
</schema>

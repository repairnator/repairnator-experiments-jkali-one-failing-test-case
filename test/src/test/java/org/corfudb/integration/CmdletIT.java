package org.corfudb.integration;

import static org.assertj.core.api.Assertions.assertThat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.Objects;
import java.util.UUID;

import org.corfudb.protocols.wireprotocol.Token;
import org.corfudb.runtime.CorfuRuntime;
import org.corfudb.runtime.collections.SMRMap;
import org.corfudb.runtime.view.Layout;
import org.corfudb.runtime.view.stream.IStreamView;

import org.junit.Test;

/**
 * Tests for clojure cmdlets.
 * TODO: Implement few tests with TLS options too.
 * FIXME: Cmdlets logunit read do not work if serverEpoch > 1
 * <p>
 * Created by zlokhandwala on 5/8/17.
 */
public class CmdletIT extends AbstractIT {

    // Using port 9901 to avoid intellij port conflict.
    private final int PORT = 9901;
    private final String ENDPOINT = DEFAULT_HOST + ":" + PORT;
    private final String clusterId = "00000000-0000-0000-0000-000000000000";
    private volatile Process corfuServerProcess;

    /**
     * Generates a single layout.
     *
     * @return layout
     */
    private Layout getSingleLayout() {
        return new Layout(
                Collections.singletonList(ENDPOINT),
                Collections.singletonList(ENDPOINT),
                Collections.singletonList(new Layout
                        .LayoutSegment(Layout.ReplicationMode.CHAIN_REPLICATION,
                        0L,
                        -1L,
                        Collections.singletonList(new Layout
                                .LayoutStripe(Collections.singletonList(ENDPOINT))))),
                Collections.emptyList(),
                0L,
                UUID.fromString(clusterId));
    }

    private void runBootstrappedServer() throws IOException {
        corfuServerProcess = new CorfuServerRunner()
                .setPort(PORT)
                .setClusterId(clusterId)
                .runServer();
    }

    /**
     * Creates a process with the given command and waits for its termination.
     *
     * @param command Command to start cmdlet.
     * @return Output generated by the cmdlet.
     */
    private static String runCmdletGetOutput(String command) throws Exception {
        ProcessBuilder builder = new ProcessBuilder("sh", "-c", command);
        builder.redirectErrorStream(true);
        Process cmdlet = builder.start();
        final StringBuilder output = new StringBuilder();
        try (BufferedReader bufferedReader =
                     new BufferedReader(new InputStreamReader(cmdlet.getInputStream()))) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                output.append(line);
            }
            cmdlet.waitFor();
        }
        return output.toString();
    }

    /**
     * Testing corfu_ping
     */
    @Test
    public void testCorfuPingCmdlet() throws Exception {

        runBootstrappedServer();
        final String command = CORFU_PROJECT_DIR + "bin/corfu_ping " + ENDPOINT;
        final String expectedSubStringPing = "PING " + ENDPOINT;
        final String expectedSubStringAck = "ACK time=";
        assertThat(runCmdletGetOutput(command))
                .contains(expectedSubStringPing)
                .contains(expectedSubStringAck);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_layouts query
     * TODO: Not testing corfu_layouts -c <endpoint> edit
     */
    @Test
    public void testCorfuLayoutsCmdlet() throws Exception {

        runBootstrappedServer();
        final String command = CORFU_PROJECT_DIR + "bin/corfu_layouts -c " + ENDPOINT + " query";
        // Squashing all spaces to compare JSON.
        String output = runCmdletGetOutput(command).replace(" ", "");
        final int layoutMatcher = 10;
        Layout retrievedLayout = Layout.fromJSONString(output.substring(output.indexOf(
                getSingleLayout().asJSONString().substring(0, layoutMatcher))));
        assertThat(retrievedLayout).isEqualTo(getSingleLayout());
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_query
     */
    @Test
    public void testCorfuQueryCmdlet() throws Exception {

        corfuServerProcess = new CorfuServerRunner()
                .setPort(PORT)
                .setLogPath(getCorfuServerLogPath(DEFAULT_HOST, PORT))
                .runServer();
        final String command = CORFU_PROJECT_DIR + "bin/corfu_query " + ENDPOINT;
        final String expectedLogPath = "--log-path=" + CORFU_LOG_PATH;
        final String expectedInitialToken = "--initial-token=-1";
        final String expectedStartupArgs = new CorfuServerRunner()
                .setPort(PORT)
                .setLogPath(getCorfuServerLogPath(DEFAULT_HOST, PORT))
                .getOptionsString();
        String output = runCmdletGetOutput(command);
        assertThat(output).contains(expectedLogPath);
        assertThat(output).contains(expectedInitialToken);
        assertThat(output).contains(expectedStartupArgs);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_stream append and read.
     */
    @Test
    public void testCorfuStreamCmdlet() throws Exception {

        runBootstrappedServer();
        final String streamA = "streamA";
        CorfuRuntime runtime = createRuntime(ENDPOINT);
        IStreamView streamViewA = runtime.getStreamsView().get(CorfuRuntime.getStreamID(streamA));

        String payload1 = "Hello";
        streamViewA.append(payload1.getBytes());

        String commandRead = CORFU_PROJECT_DIR + "bin/corfu_stream"
                + " -i " + streamA
                + " -c " + ENDPOINT + " read";
        String output = runCmdletGetOutput(commandRead);
        assertThat(output.contains(payload1)).isTrue();

        String payload2 = "World";
        String commandAppend = "echo '" + payload2 + "' | "
                + CORFU_PROJECT_DIR + "bin/corfu_stream"
                + " -i " + streamA
                + " -c " + ENDPOINT + " append";
        runCmdletGetOutput(commandAppend);

        assertThat(Objects.requireNonNull(streamViewA.next()).getPayload(runtime))
                .isEqualTo(payload1.getBytes());
        assertThat(Objects.requireNonNull(streamViewA.next()).getPayload(runtime))
                .isEqualTo((payload2 + "\n").getBytes());
        assertThat(streamViewA.next()).isNull();
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_sequencer next-token and latest
     */
    @Test
    public void testCorfuSequencerCmdlet() throws Exception {

        runBootstrappedServer();
        final String streamA = "streamA";
        CorfuRuntime runtime = createRuntime(ENDPOINT);

        String commandNextToken = CORFU_PROJECT_DIR + "bin/corfu_sequencer"
                + " -i " + streamA
                + " -c " + ENDPOINT + " next-token 3";
        runCmdletGetOutput(commandNextToken);

        Token token = runtime.getSequencerView()
                .nextToken(Collections.singleton(CorfuRuntime.getStreamID(streamA)), 0)
                .getToken();

        String commandLatest = CORFU_PROJECT_DIR + "bin/corfu_sequencer"
                + " -i " + streamA
                + " -c " + ENDPOINT + " latest";
        assertThat(runCmdletGetOutput(commandLatest)).contains(token.toString());
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_as. Address space read and write.
     */
    @Test
    public void testCorfuAddressSpaceCmdlet() throws Exception {

        runBootstrappedServer();
        final String streamA = "streamA";
        String payload = "Hello";
        // Write 0 to streamA
        String commandAppend = "echo '" + payload + "' | "
                + CORFU_PROJECT_DIR + "bin/corfu_as"
                + " -i " + streamA
                + " -c " + ENDPOINT + " write 0";
        runCmdletGetOutput(commandAppend);
        // Read and assert the written value
        String commandRead = CORFU_PROJECT_DIR + "bin/corfu_as"
                + " -i " + streamA
                + " -c " + ENDPOINT + " read 0";
        assertThat(runCmdletGetOutput(commandRead)).contains(payload);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_logunit. LogUnit read and write.
     */
    @Test
    public void testCorfuLogunitCmdlet() throws Exception {

        runBootstrappedServer();
        String payload = "Hello";
        String commandAppend = "echo '" + payload + "' | "
                + CORFU_PROJECT_DIR + "bin/corfu_logunit " + ENDPOINT + " write 0";
        runCmdletGetOutput(commandAppend);

        String commandRead = CORFU_PROJECT_DIR + "bin/corfu_logunit " + ENDPOINT + " read 0";
        assertThat(runCmdletGetOutput(commandRead)).contains(payload);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_reset.
     */
    @Test
    public void testCorfuResetCmdlet() throws Exception {

        runBootstrappedServer();
        final String expectedOutputReset = "Reset " + ENDPOINT;
        final String expectedOutputAck = "ACK";
        String commandRead = CORFU_PROJECT_DIR + "bin/corfu_reset " + ENDPOINT;
        assertThat(runCmdletGetOutput(commandRead))
                .contains(expectedOutputReset)
                .contains(expectedOutputAck);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_bootstrap with a layout file.
     */
    @Test
    public void testCorfuBootstrapClusterWithStream() throws Exception {
        corfuServerProcess = new CorfuServerRunner()
                .setSingle(false)
                .setPort(PORT)
                .runServer();
        File layoutFile = new File(CORFU_LOG_PATH + File.separator + "layoutFile");
        assertThat(layoutFile.createNewFile()).isTrue();
        try (FileOutputStream fos = new FileOutputStream(layoutFile)) {
            fos.write(getSingleLayout().asJSONString().getBytes());
        }

        String command = CORFU_PROJECT_DIR + "bin/corfu_bootstrap_cluster"
                + " -l " + layoutFile.getAbsolutePath();
        String expectedOutput = "New layout installed";
        assertThat(runCmdletGetOutput(command)).contains(expectedOutput);

        CorfuRuntime runtime = createRuntime(ENDPOINT);
        IStreamView streamViewA = runtime.getStreamsView().get(CorfuRuntime.getStreamID("streamA"));
        assertThat(streamViewA.hasNext()).isFalse();

        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_management_bootstrap to bootstrap the management server.
     */
    @Test
    public void testCorfuManagementBootstrap() throws Exception {
        corfuServerProcess = new CorfuServerRunner()
                .setSingle(false)
                .setPort(PORT)
                .runServer();
        File layoutFile = new File(CORFU_LOG_PATH + File.separator + "layoutFile");
        assertThat(layoutFile.createNewFile()).isTrue();
        try (FileOutputStream fos = new FileOutputStream(layoutFile)) {
            fos.write(getSingleLayout().asJSONString().getBytes());
        }
        String command = CORFU_PROJECT_DIR + "bin/corfu_management_bootstrap"
                + " -c " + ENDPOINT
                + " -l " + layoutFile.getAbsolutePath();
        String expectedOutput = ENDPOINT + " bootstrapped successfully";
        assertThat(runCmdletGetOutput(command)).contains(expectedOutput);
        shutdownCorfuServer(corfuServerProcess);
    }

    /**
     * Testing corfu_smrobject.
     */
    @Test
    public void testCorfuSMRObject() throws Exception {
        runBootstrappedServer();
        String streamA = "streamA";
        String payload = "helloWorld";
        final String commandPut = CORFU_PROJECT_DIR + "bin/corfu_smrobject" +
                " -i " + streamA +
                " -c " + ENDPOINT +
                " " + SMRMap.class.getCanonicalName() + " putIfAbsent x " + payload;
        runCmdletGetOutput(commandPut);

        final String commandGet = CORFU_PROJECT_DIR + "bin/corfu_smrobject" +
                " -i " + streamA +
                " -c " + ENDPOINT +
                " " + SMRMap.class.getCanonicalName() + " getOrDefault x none";

        assertThat(runCmdletGetOutput(commandGet)).contains(payload);
        shutdownCorfuServer(corfuServerProcess);
    }

    @Test
    public void testCorfuAddAndRemoveNode() throws Exception {
        Process corfuServer_1 = new CorfuServerRunner()
                .setPort(PORT)
                .setClusterId(clusterId)
                .runServer();
        final int PORT_2 = 9902;
        Process corfuServer_2 = new CorfuServerRunner()
                .setSingle(false)
                .setPort(PORT_2)
                .runServer();
        final int PORT_3 = 9903;
        Process corfuServer_3 = new CorfuServerRunner()
                .setSingle(false)
                .setPort(PORT_3)
                .runServer();

        final String commandAddNode1 = CORFU_PROJECT_DIR + "bin/corfu_add_node" +
                " -c " + ENDPOINT +
                " -n " + "localhost:" + PORT_2;
        final String expectedOutputAddNode1 = "localhost:" + PORT_2 + " added successfully.";
        assertThat(runCmdletGetOutput(commandAddNode1)).contains(expectedOutputAddNode1);

        final String commandAddNode2 = CORFU_PROJECT_DIR + "bin/corfu_add_node" +
                " -c " + ENDPOINT +
                " -n " + "localhost:" + PORT_3;
        final String expectedOutputAddNode2 = "localhost:" + PORT_3 + " added successfully.";
        assertThat(runCmdletGetOutput(commandAddNode2)).contains(expectedOutputAddNode2);

        final String commandRemoveNode1 = CORFU_PROJECT_DIR + "bin/corfu_remove_node" +
                " -c " + ENDPOINT +
                " -n " + "localhost:" + PORT_2;
        final String expectedOutputRemoveNode1 = "localhost:" + PORT_2 + " removed successfully.";
        assertThat(runCmdletGetOutput(commandRemoveNode1)).contains(expectedOutputRemoveNode1);

        final String commandRemoveNode2 = CORFU_PROJECT_DIR + "bin/corfu_remove_node" +
                " -c " + ENDPOINT +
                " -n " + "localhost:" + PORT_2 +
                " --force";
        final String expectedOutputRemoveNode2 = "localhost:" + PORT_2 + " removed successfully.";
        assertThat(runCmdletGetOutput(commandRemoveNode2)).contains(expectedOutputRemoveNode2);

        shutdownCorfuServer(corfuServer_1);
        shutdownCorfuServer(corfuServer_2);
        shutdownCorfuServer(corfuServer_3);
    }

}
